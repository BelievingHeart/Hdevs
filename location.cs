//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  // Procedures 
  // Local procedures 
  public void fit_line2D_rough (HTuple hv_Xs, HTuple hv_Ys, out HTuple hv_lineX1, 
      out HTuple hv_lineY1, out HTuple hv_lineX2, out HTuple hv_lineY2)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_SumX = new HTuple(), hv_AverageX = new HTuple();
    HTuple hv_SumY = new HTuple(), hv_AverageY = new HTuple();
    HTuple hv_SumUpper = new HTuple(), hv_SumLower = new HTuple();
    HTuple hv_i = new HTuple(), hv_incrementUpper = new HTuple();
    HTuple hv_incrementLower = new HTuple(), hv_m = new HTuple();
    HTuple hv_b = new HTuple();
    // Initialize local and output iconic variables 
    hv_lineX1 = new HTuple();
    hv_lineY1 = new HTuple();
    hv_lineX2 = new HTuple();
    hv_lineY2 = new HTuple();
    hv_SumX.Dispose();
    HOperatorSet.TupleSum(hv_Xs, out hv_SumX);
    hv_AverageX.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_AverageX = hv_SumX/(new HTuple(hv_Xs.TupleLength()
        ));
    }

    hv_SumY.Dispose();
    HOperatorSet.TupleSum(hv_Ys, out hv_SumY);
    hv_AverageY.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_AverageY = hv_SumY/(new HTuple(hv_Ys.TupleLength()
        ));
    }

    hv_SumUpper.Dispose();
    hv_SumUpper = 0;
    hv_SumLower.Dispose();
    hv_SumLower = 0;
    for (hv_i=0; (int)hv_i<=(int)((new HTuple(hv_Xs.TupleLength()))-1); hv_i = (int)hv_i + 1)
    {
      hv_incrementUpper.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_incrementUpper = ((hv_Xs.TupleSelect(
          hv_i))-hv_AverageX)*((hv_Ys.TupleSelect(hv_i))-hv_AverageY);
      }
      hv_incrementLower.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_incrementLower = (hv_AverageX-(hv_Xs.TupleSelect(
          hv_i)))*(hv_AverageX-(hv_Xs.TupleSelect(hv_i)));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_SumUpper = hv_SumUpper+hv_incrementUpper;
      hv_SumUpper.Dispose();
      hv_SumUpper = ExpTmpLocalVar_SumUpper;
      }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_SumLower = hv_SumLower+hv_incrementLower;
      hv_SumLower.Dispose();
      hv_SumLower = ExpTmpLocalVar_SumLower;
      }
      }
    }

    hv_m.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_m = hv_SumUpper/hv_SumLower;
    }
    hv_b.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_b = hv_AverageY-(hv_m*hv_AverageX);
    }



    //sample two point
    hv_lineX1.Dispose();
    HOperatorSet.TupleMax(hv_Xs, out hv_lineX1);
    hv_lineX2.Dispose();
    HOperatorSet.TupleMin(hv_Xs, out hv_lineX2);

    hv_lineY1.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_lineY1 = (hv_m*hv_lineX1)+hv_b;
    }
    hv_lineY2.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_lineY2 = (hv_m*hv_lineX2)+hv_b;
    }

    hv_SumX.Dispose();
    hv_AverageX.Dispose();
    hv_SumY.Dispose();
    hv_AverageY.Dispose();
    hv_SumUpper.Dispose();
    hv_SumLower.Dispose();
    hv_i.Dispose();
    hv_incrementUpper.Dispose();
    hv_incrementLower.Dispose();
    hv_m.Dispose();
    hv_b.Dispose();

    return;
  }

  public void FitLine2D (HTuple hv_Xs, HTuple hv_Ys, HTuple hv_ignorePortion, out HTuple hv_lineX1, 
      out HTuple hv_lineY1, out HTuple hv_lineX2, out HTuple hv_lineY2)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_numPointsLeft = new HTuple(), hv_numThrows = new HTuple();
    HTuple hv_fiterrors = new HTuple(), hv_i = new HTuple();
    HTuple hv_Distance = new HTuple(), hv_Indices = new HTuple();
    HTuple hv_XsBest = new HTuple(), hv_YsBest = new HTuple();
    HTuple hv_ErrorBest = new HTuple(), hv_index = new HTuple();
    // Initialize local and output iconic variables 
    hv_lineX1 = new HTuple();
    hv_lineY1 = new HTuple();
    hv_lineX2 = new HTuple();
    hv_lineY2 = new HTuple();
    hv_lineX1.Dispose();hv_lineY1.Dispose();hv_lineX2.Dispose();hv_lineY2.Dispose();
    fit_line2D_rough(hv_Xs, hv_Ys, out hv_lineX1, out hv_lineY1, out hv_lineX2, out hv_lineY2);

    //number of points to ignore
    hv_numPointsLeft.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_numPointsLeft = (1.0-hv_ignorePortion)*(new HTuple(hv_Xs.TupleLength()
        ));
    }
    hv_numThrows.Dispose();
    hv_numThrows = 0;

    //calculate fitness of each point
    hv_fiterrors.Dispose();
    hv_fiterrors = new HTuple();
    for (hv_i=0; (int)hv_i<=(int)((new HTuple(hv_Xs.TupleLength()))-1); hv_i = (int)hv_i + 1)
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Distance.Dispose();
      HOperatorSet.DistancePl(hv_Ys.TupleSelect(hv_i), hv_Xs.TupleSelect(hv_i), hv_lineY1, 
          hv_lineX1, hv_lineY2, hv_lineX2, out hv_Distance);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_fiterrors = hv_fiterrors.TupleConcat(
          hv_Distance);
      hv_fiterrors.Dispose();
      hv_fiterrors = ExpTmpLocalVar_fiterrors;
      }
      }
    }

    hv_Indices.Dispose();
    HOperatorSet.TupleSortIndex(hv_fiterrors, out hv_Indices);

    //select the best fits
    hv_XsBest.Dispose();
    hv_XsBest = new HTuple();
    hv_YsBest.Dispose();
    hv_YsBest = new HTuple();
    hv_ErrorBest.Dispose();
    hv_ErrorBest = new HTuple();
    HTuple end_val19 = hv_numPointsLeft;
    HTuple step_val19 = 1;
    for (hv_i=0; hv_i.Continue(end_val19, step_val19); hv_i = hv_i.TupleAdd(step_val19))
    {
      hv_index.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_index = hv_Indices.TupleSelect(
          hv_i);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_XsBest = hv_XsBest.TupleConcat(
          hv_Xs.TupleSelect(hv_index));
      hv_XsBest.Dispose();
      hv_XsBest = ExpTmpLocalVar_XsBest;
      }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_YsBest = hv_YsBest.TupleConcat(
          hv_Ys.TupleSelect(hv_index));
      hv_YsBest.Dispose();
      hv_YsBest = ExpTmpLocalVar_YsBest;
      }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ErrorBest = hv_ErrorBest.TupleConcat(
          hv_fiterrors.TupleSelect(hv_index));
      hv_ErrorBest.Dispose();
      hv_ErrorBest = ExpTmpLocalVar_ErrorBest;
      }
      }
    }

    //fit line again
    hv_lineX1.Dispose();hv_lineY1.Dispose();hv_lineX2.Dispose();hv_lineY2.Dispose();
    fit_line2D_rough(hv_XsBest, hv_YsBest, out hv_lineX1, out hv_lineY1, out hv_lineX2, 
        out hv_lineY2);



    hv_numPointsLeft.Dispose();
    hv_numThrows.Dispose();
    hv_fiterrors.Dispose();
    hv_i.Dispose();
    hv_Distance.Dispose();
    hv_Indices.Dispose();
    hv_XsBest.Dispose();
    hv_YsBest.Dispose();
    hv_ErrorBest.Dispose();
    hv_index.Dispose();

    return;
  }

  public void GenVisibleMeasureRect (out HObject ho_ROI_0, HTuple hv_rect1_row, HTuple hv_rect1_col, 
      HTuple hv_rect1_rad, HTuple hv_rect1_len1, HTuple hv_rect1_len2, HTuple hv_Width, 
      HTuple hv_Height, out HTuple hv_MeasureHandle)
  {


    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    hv_MeasureHandle = new HTuple();
    ho_ROI_0.Dispose();
    HOperatorSet.GenRectangle2(out ho_ROI_0, hv_rect1_row, hv_rect1_col, hv_rect1_rad, 
        hv_rect1_len1, hv_rect1_len2);
    hv_MeasureHandle.Dispose();
    HOperatorSet.GenMeasureRectangle2(hv_rect1_row, hv_rect1_col, hv_rect1_rad, hv_rect1_len1, 
        hv_rect1_len2, hv_Width, hv_Height, "nearest_neighbor", out hv_MeasureHandle);


    return;
  }

  public void get_direction_unit (HTuple hv_xStart, HTuple hv_yStart, HTuple hv_xEnd, 
      HTuple hv_yEnd, out HTuple hv_xUnit, out HTuple hv_yUnit)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_xDiff = new HTuple(), hv_yDiff = new HTuple();
    HTuple hv_totalDiff = new HTuple();
    // Initialize local and output iconic variables 
    hv_xUnit = new HTuple();
    hv_yUnit = new HTuple();
    hv_xDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_xDiff = hv_xEnd-hv_xStart;
    }
    hv_yDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_yDiff = hv_yEnd-hv_yStart;
    }

    hv_totalDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_totalDiff = (((hv_yDiff*hv_yDiff)+(hv_xDiff*hv_xDiff))).TupleSqrt()
        ;
    }

    hv_xUnit.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_xUnit = hv_xDiff/hv_totalDiff;
    }
    hv_yUnit.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_yUnit = hv_yDiff/hv_totalDiff;
    }


    hv_xDiff.Dispose();
    hv_yDiff.Dispose();
    hv_totalDiff.Dispose();

    return;
  }

  public void get_perpendicular_direction (HTuple hv_inputVectorX, HTuple hv_inputVectorY, 
      out HTuple hv_outputVectorX, out HTuple hv_outputVectorY)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_xAssume = new HTuple(), hv_yAssume = new HTuple();
    HTuple hv_distAssume = new HTuple();
    // Initialize local and output iconic variables 
    hv_outputVectorX = new HTuple();
    hv_outputVectorY = new HTuple();
    //assume that a perticular vector perpendiclar to me is (xAssume, yAssume), let xAssume = 1
    hv_xAssume.Dispose();
    hv_xAssume = 1;
    hv_yAssume.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_yAssume = -(hv_inputVectorX/hv_inputVectorY);
    }
    hv_distAssume.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_distAssume = (((hv_yAssume*hv_yAssume)+(hv_xAssume*hv_xAssume))).TupleSqrt()
        ;
    }

    //calculate unit length direction vector
    hv_outputVectorX.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_outputVectorX = hv_xAssume/hv_distAssume;
    }
    hv_outputVectorY.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_outputVectorY = hv_yAssume/hv_distAssume;
    }


    hv_xAssume.Dispose();
    hv_yAssume.Dispose();
    hv_distAssume.Dispose();

    return;
  }

  public void get_perpendicular_line_that_passes (HTuple hv_lineXStart, HTuple hv_lineYStart, 
      HTuple hv_lineXEnd, HTuple hv_lineYEnd, HTuple hv_xPass, HTuple hv_yPass, out HTuple hv_lineXPerpendicular, 
      out HTuple hv_lineYPerpendicular)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_xUnit = new HTuple(), hv_yUnit = new HTuple();
    HTuple hv_outputVectorX = new HTuple(), hv_outputVectorY = new HTuple();
    // Initialize local and output iconic variables 
    hv_lineXPerpendicular = new HTuple();
    hv_lineYPerpendicular = new HTuple();
    hv_xUnit.Dispose();hv_yUnit.Dispose();
    get_direction_unit(hv_lineXStart, hv_lineYStart, hv_lineXEnd, hv_lineYEnd, out hv_xUnit, 
        out hv_yUnit);
    hv_outputVectorX.Dispose();hv_outputVectorY.Dispose();
    get_perpendicular_direction(hv_xUnit, hv_yUnit, out hv_outputVectorX, out hv_outputVectorY);

    //another point on the perpendicular line can be determined by
    //adding perpendicular unit vector to the first point that we passed
    hv_lineXPerpendicular.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_lineXPerpendicular = hv_xPass+hv_outputVectorX;
    }
    hv_lineYPerpendicular.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_lineYPerpendicular = hv_yPass+hv_outputVectorY;
    }


    hv_xUnit.Dispose();
    hv_yUnit.Dispose();
    hv_outputVectorX.Dispose();
    hv_outputVectorY.Dispose();

    return;
  }

  public void I40_FindOrigin (HObject ho_Image, out HObject ho_FindLineRegions, out HObject ho_PointsFound, 
      HTuple hv_ModelID, out HTuple hv_VAxisX1, out HTuple hv_VAxisY1, out HTuple hv_VAxisX2, 
      out HTuple hv_VAxisY2, out HTuple hv_HAxisX1, out HTuple hv_HAxisY1, out HTuple hv_HAxisX2, 
      out HTuple hv_HAxisY2, out HTuple hv_CoorCenterY, out HTuple hv_CoorCenterX)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ROI_0, ho_ImageReduced, ho_EdgeAmplitude;
    HObject ho_Region, ho_BinImage, ho_Contours, ho_Rectangle1;
    HObject ho_RegionMoved1, ho_Rectangle2, ho_RegionMoved2;
    HObject ho_Rectangle3, ho_RegionMoved3, ho_FindLineRegions2;
    HObject ho_FindLineRegions3, ho_PointsFound2, ho_PointsFound3;
    HObject ho_PointsFound4, ho_PointsFound5;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_xCoeff = new HTuple(), hv_yCoeff = new HTuple();
    HTuple hv_Row5 = new HTuple(), hv_Column5 = new HTuple();
    HTuple hv_Angle = new HTuple(), hv_Score = new HTuple();
    HTuple hv_HomMat2D = new HTuple(), hv_Area1 = new HTuple();
    HTuple hv_centerModelY = new HTuple(), hv_centerModelX = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    HTuple hv_Phi1 = new HTuple(), hv_Length11 = new HTuple();
    HTuple hv_Length21 = new HTuple(), hv_Row3 = new HTuple();
    HTuple hv_Column3 = new HTuple(), hv_Phi2 = new HTuple();
    HTuple hv_Length12 = new HTuple(), hv_Length22 = new HTuple();
    HTuple hv_Row4 = new HTuple(), hv_Column4 = new HTuple();
    HTuple hv_Phi3 = new HTuple(), hv_Length13 = new HTuple();
    HTuple hv_Length23 = new HTuple(), hv_XsUpperRight = new HTuple();
    HTuple hv_YsUpperRight = new HTuple(), hv_XsLeftUpper = new HTuple();
    HTuple hv_YsLeftUpper = new HTuple(), hv_XsLeftLower = new HTuple();
    HTuple hv_YsLeftLower = new HTuple(), hv_XsLeft = new HTuple();
    HTuple hv_YsLeft = new HTuple(), hv_ignorePortion = new HTuple();
    HTuple hv_lineX1Horizontal = new HTuple(), hv_lineY1Horizontal = new HTuple();
    HTuple hv_lineX2Horizontal = new HTuple(), hv_lineY2Horizontal = new HTuple();
    HTuple hv_lineY1Vertical = new HTuple(), hv_lineX1Vertical = new HTuple();
    HTuple hv_lineY2Vertical = new HTuple(), hv_lineX2Vertical = new HTuple();
    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_IsOverlapping = new HTuple(), hv_IsOverlapping1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_FindLineRegions);
    HOperatorSet.GenEmptyObj(out ho_PointsFound);
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_EdgeAmplitude);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_BinImage);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_Rectangle1);
    HOperatorSet.GenEmptyObj(out ho_RegionMoved1);
    HOperatorSet.GenEmptyObj(out ho_Rectangle2);
    HOperatorSet.GenEmptyObj(out ho_RegionMoved2);
    HOperatorSet.GenEmptyObj(out ho_Rectangle3);
    HOperatorSet.GenEmptyObj(out ho_RegionMoved3);
    HOperatorSet.GenEmptyObj(out ho_FindLineRegions2);
    HOperatorSet.GenEmptyObj(out ho_FindLineRegions3);
    HOperatorSet.GenEmptyObj(out ho_PointsFound2);
    HOperatorSet.GenEmptyObj(out ho_PointsFound3);
    HOperatorSet.GenEmptyObj(out ho_PointsFound4);
    HOperatorSet.GenEmptyObj(out ho_PointsFound5);
    hv_VAxisX1 = new HTuple();
    hv_VAxisY1 = new HTuple();
    hv_VAxisX2 = new HTuple();
    hv_VAxisY2 = new HTuple();
    hv_HAxisX1 = new HTuple();
    hv_HAxisY1 = new HTuple();
    hv_HAxisX2 = new HTuple();
    hv_HAxisY2 = new HTuple();
    hv_CoorCenterY = new HTuple();
    hv_CoorCenterX = new HTuple();
    hv_Width.Dispose();
    hv_Width = 2032;
    hv_Height.Dispose();
    hv_Height = 2500;

    hv_xCoeff.Dispose();
    hv_xCoeff = 0.016;
    hv_yCoeff.Dispose();
    hv_yCoeff = 0.02;

    //create xld features for fixturing
    ho_ROI_0.Dispose();
    HOperatorSet.GenRectangle1(out ho_ROI_0, 99.0277, 161.153, 1198.89, 1388.46);
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_ROI_0, out ho_ImageReduced);
    ho_EdgeAmplitude.Dispose();
    HOperatorSet.SobelAmp(ho_ImageReduced, out ho_EdgeAmplitude, "sum_abs", 3);
    ho_Region.Dispose();
    HOperatorSet.Threshold(ho_EdgeAmplitude, out ho_Region, 0.5, 255);
    ho_BinImage.Dispose();
    HOperatorSet.RegionToBin(ho_Region, out ho_BinImage, 255, 0, hv_Width, hv_Height);
    ho_Contours.Dispose();
    HOperatorSet.GenContourRegionXld(ho_Region, out ho_Contours, "border");

    hv_Row5.Dispose();hv_Column5.Dispose();hv_Angle.Dispose();hv_Score.Dispose();
    HOperatorSet.FindShapeModel(ho_BinImage, hv_ModelID, -0.39, 0.79, 0.5, 1, 0.5, 
        "least_squares", 0, 0.9, out hv_Row5, out hv_Column5, out hv_Angle, out hv_Score);
    hv_HomMat2D.Dispose();
    HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_Row5, hv_Column5, hv_Angle, out hv_HomMat2D);

    //center of the model
    hv_Area1.Dispose();hv_centerModelY.Dispose();hv_centerModelX.Dispose();
    HOperatorSet.AreaCenter(ho_Region, out hv_Area1, out hv_centerModelY, out hv_centerModelX);

    //align all the measure rects with respect to the created shape model which is zero centered
    HOperatorSet.SetSystem("clip_region", "false");
    //upperleft find line
    //gen_rectangle2 (Rectangle, 331.86700000, 510.16200000, rad(-90.00000000), 40, 90.95780000)
    //move_region (Rectangle, RegionMoved, -centerModelY, -centerModelX)
    //upper right find line
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Rectangle1.Dispose();
    HOperatorSet.GenRectangle2(out ho_Rectangle1, 1676.14, 792.335, (new HTuple(90)).TupleRad()
        , 60, 220.943);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RegionMoved1.Dispose();
    HOperatorSet.MoveRegion(ho_Rectangle1, out ho_RegionMoved1, -hv_centerModelY, 
        -hv_centerModelX);
    }
    //left upper find line
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Rectangle2.Dispose();
    HOperatorSet.GenRectangle2(out ho_Rectangle2, 477.38200000, 370.80400000, (new HTuple(0.00000000)).TupleRad()
        , 60, 75.89940000);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RegionMoved2.Dispose();
    HOperatorSet.MoveRegion(ho_Rectangle2, out ho_RegionMoved2, -hv_centerModelY, 
        -hv_centerModelX);
    }
    //left lower find line
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Rectangle3.Dispose();
    HOperatorSet.GenRectangle2(out ho_Rectangle3, 897.15300000, 368.12700000, (new HTuple(0.00000000)).TupleRad()
        , 60, 48.35380000);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RegionMoved3.Dispose();
    HOperatorSet.MoveRegion(ho_Rectangle3, out ho_RegionMoved3, -hv_centerModelY, 
        -hv_centerModelX);
    }
    HOperatorSet.SetSystem("clip_region", "true");


    //fix all the measure rects to track individual parts to be measured
    //affine_trans_region (RegionMoved, FindLineRegions, HomMat2D, 'nearest_neighbor')
    ho_FindLineRegions.Dispose();
    HOperatorSet.AffineTransRegion(ho_RegionMoved1, out ho_FindLineRegions, hv_HomMat2D, 
        "nearest_neighbor");
    ho_FindLineRegions2.Dispose();
    HOperatorSet.AffineTransRegion(ho_RegionMoved2, out ho_FindLineRegions2, hv_HomMat2D, 
        "nearest_neighbor");
    ho_FindLineRegions3.Dispose();
    HOperatorSet.AffineTransRegion(ho_RegionMoved3, out ho_FindLineRegions3, hv_HomMat2D, 
        "nearest_neighbor");

    //get the pose of measure rects that are fixed in place
    //smallest_rectangle2 (FindLineRegions, Row1, Column1, Phi, Length1, Length2)
    hv_Row2.Dispose();hv_Column2.Dispose();hv_Phi1.Dispose();hv_Length11.Dispose();hv_Length21.Dispose();
    HOperatorSet.SmallestRectangle2(ho_FindLineRegions, out hv_Row2, out hv_Column2, 
        out hv_Phi1, out hv_Length11, out hv_Length21);
    hv_Row3.Dispose();hv_Column3.Dispose();hv_Phi2.Dispose();hv_Length12.Dispose();hv_Length22.Dispose();
    HOperatorSet.SmallestRectangle2(ho_FindLineRegions2, out hv_Row3, out hv_Column3, 
        out hv_Phi2, out hv_Length12, out hv_Length22);
    hv_Row4.Dispose();hv_Column4.Dispose();hv_Phi3.Dispose();hv_Length13.Dispose();hv_Length23.Dispose();
    HOperatorSet.SmallestRectangle2(ho_FindLineRegions3, out hv_Row4, out hv_Column4, 
        out hv_Phi3, out hv_Length13, out hv_Length23);

    //find all the points within the above rects
    //VisionProStyleFindLine (Image, ROI_0, 'positive', Row1, Column1, rad(-90), Length2, Length1, 8, XsUpperLeft, YsUpperLeft)
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_ROI_0.Dispose();hv_XsUpperRight.Dispose();hv_YsUpperRight.Dispose();
    VisionProStyleFindLine(ho_Image, out ho_ROI_0, "negative", hv_Row2, hv_Column2, 
        (new HTuple(-90)).TupleRad(), hv_Length21, hv_Length11, 8, out hv_XsUpperRight, 
        out hv_YsUpperRight);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_ROI_0.Dispose();hv_XsLeftUpper.Dispose();hv_YsLeftUpper.Dispose();
    VisionProStyleFindLine(ho_Image, out ho_ROI_0, "positive", hv_Row3, hv_Column3, 
        (new HTuple(0)).TupleRad(), hv_Length22, hv_Length12, 8, out hv_XsLeftUpper, 
        out hv_YsLeftUpper);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_ROI_0.Dispose();hv_XsLeftLower.Dispose();hv_YsLeftLower.Dispose();
    VisionProStyleFindLine(ho_Image, out ho_ROI_0, "positive", hv_Row4, hv_Column4, 
        (new HTuple(0)).TupleRad(), hv_Length23, hv_Length13, 8, out hv_XsLeftLower, 
        out hv_YsLeftLower);
    }

    //display all the found points on the line
    //gen_cross_contour_xld (PointsFound, YsUpperLeft, XsUpperLeft, 50, 0.785398)
    ho_PointsFound.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_PointsFound, hv_YsUpperRight, hv_XsUpperRight, 
        50, 0.785398);
    ho_PointsFound2.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_PointsFound2, hv_YsLeftUpper, hv_XsLeftUpper, 
        50, 0.785398);
    ho_PointsFound3.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_PointsFound3, hv_YsLeftLower, hv_XsLeftLower, 
        50, 0.785398);

    //fit left and upper base line
    //tuple_concat (XsUpperLeft, XsUpperRight, XsUpper)
    //tuple_concat (YsUpperLeft, YsUpperRight, YsUpper)
    hv_XsLeft.Dispose();
    HOperatorSet.TupleConcat(hv_XsLeftUpper, hv_XsLeftLower, out hv_XsLeft);
    hv_YsLeft.Dispose();
    HOperatorSet.TupleConcat(hv_YsLeftUpper, hv_YsLeftLower, out hv_YsLeft);

    hv_ignorePortion.Dispose();
    hv_ignorePortion = 0.2;
    hv_lineX1Horizontal.Dispose();hv_lineY1Horizontal.Dispose();hv_lineX2Horizontal.Dispose();hv_lineY2Horizontal.Dispose();
    FitLine2D(hv_XsUpperRight, hv_YsUpperRight, hv_ignorePortion, out hv_lineX1Horizontal, 
        out hv_lineY1Horizontal, out hv_lineX2Horizontal, out hv_lineY2Horizontal);
    hv_lineY1Vertical.Dispose();hv_lineX1Vertical.Dispose();hv_lineY2Vertical.Dispose();hv_lineX2Vertical.Dispose();
    FitLine2D(hv_YsLeft, hv_XsLeft, hv_ignorePortion, out hv_lineY1Vertical, out hv_lineX1Vertical, 
        out hv_lineY2Vertical, out hv_lineX2Vertical);

    hv_Row.Dispose();hv_Column.Dispose();hv_IsOverlapping.Dispose();
    HOperatorSet.IntersectionLines(hv_lineY1Vertical, hv_lineX1Vertical, hv_lineY2Vertical, 
        hv_lineX2Vertical, hv_lineY1Horizontal, hv_lineX1Horizontal, hv_lineY2Horizontal, 
        hv_lineX2Horizontal, out hv_Row, out hv_Column, out hv_IsOverlapping);

    //move the intersection point from top left to top center
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_VAxisX1.Dispose();hv_VAxisY1.Dispose();
    move_point_along_line(hv_Column, hv_Row, hv_lineX1Horizontal, hv_lineY1Horizontal, 
        6.74/hv_xCoeff, out hv_VAxisX1, out hv_VAxisY1);
    }
    ho_PointsFound4.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_PointsFound4, hv_VAxisY1, hv_VAxisX1, 
        100, hv_Angle);

    //the perpendicular can be determined by the last four params
    hv_VAxisX2.Dispose();hv_VAxisY2.Dispose();
    get_perpendicular_line_that_passes(hv_lineX1Horizontal, hv_lineY1Horizontal, 
        hv_VAxisX1, hv_VAxisY1, hv_VAxisX1, hv_VAxisY1, out hv_VAxisX2, out hv_VAxisY2);

    //offset the horizontal line
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_HAxisX1.Dispose();hv_HAxisY1.Dispose();hv_HAxisX2.Dispose();hv_HAxisY2.Dispose();
    offset_line(hv_lineX1Horizontal, hv_lineY1Horizontal, hv_lineX2Horizontal, hv_lineY2Horizontal, 
        -19.47/hv_yCoeff, out hv_HAxisX1, out hv_HAxisY1, out hv_HAxisX2, out hv_HAxisY2);
    }

    //draw new coordinate center
    hv_CoorCenterY.Dispose();hv_CoorCenterX.Dispose();hv_IsOverlapping1.Dispose();
    HOperatorSet.IntersectionLines(hv_VAxisY1, hv_VAxisX1, hv_VAxisY2, hv_VAxisX2, 
        hv_HAxisY1, hv_HAxisX1, hv_HAxisY2, hv_HAxisX2, out hv_CoorCenterY, out hv_CoorCenterX, 
        out hv_IsOverlapping1);
    ho_PointsFound5.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_PointsFound5, hv_CoorCenterY, hv_CoorCenterX, 
        100, hv_Angle);


    //concat objects necessary for displaying
    //concat_obj (PointsFound, PointsFound1, PointsFound)
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_PointsFound, ho_PointsFound2, out ExpTmpOutVar_0);
    ho_PointsFound.Dispose();
    ho_PointsFound = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_PointsFound, ho_PointsFound3, out ExpTmpOutVar_0);
    ho_PointsFound.Dispose();
    ho_PointsFound = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_PointsFound, ho_PointsFound4, out ExpTmpOutVar_0);
    ho_PointsFound.Dispose();
    ho_PointsFound = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_PointsFound, ho_PointsFound5, out ExpTmpOutVar_0);
    ho_PointsFound.Dispose();
    ho_PointsFound = ExpTmpOutVar_0;
    }
    //concat_obj (FindLineRegions, FindLineRegions, FindLineRegions)
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_FindLineRegions, ho_FindLineRegions2, out ExpTmpOutVar_0
        );
    ho_FindLineRegions.Dispose();
    ho_FindLineRegions = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_FindLineRegions, ho_FindLineRegions3, out ExpTmpOutVar_0
        );
    ho_FindLineRegions.Dispose();
    ho_FindLineRegions = ExpTmpOutVar_0;
    }
    ho_ROI_0.Dispose();
    ho_ImageReduced.Dispose();
    ho_EdgeAmplitude.Dispose();
    ho_Region.Dispose();
    ho_BinImage.Dispose();
    ho_Contours.Dispose();
    ho_Rectangle1.Dispose();
    ho_RegionMoved1.Dispose();
    ho_Rectangle2.Dispose();
    ho_RegionMoved2.Dispose();
    ho_Rectangle3.Dispose();
    ho_RegionMoved3.Dispose();
    ho_FindLineRegions2.Dispose();
    ho_FindLineRegions3.Dispose();
    ho_PointsFound2.Dispose();
    ho_PointsFound3.Dispose();
    ho_PointsFound4.Dispose();
    ho_PointsFound5.Dispose();

    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_xCoeff.Dispose();
    hv_yCoeff.Dispose();
    hv_Row5.Dispose();
    hv_Column5.Dispose();
    hv_Angle.Dispose();
    hv_Score.Dispose();
    hv_HomMat2D.Dispose();
    hv_Area1.Dispose();
    hv_centerModelY.Dispose();
    hv_centerModelX.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_Phi1.Dispose();
    hv_Length11.Dispose();
    hv_Length21.Dispose();
    hv_Row3.Dispose();
    hv_Column3.Dispose();
    hv_Phi2.Dispose();
    hv_Length12.Dispose();
    hv_Length22.Dispose();
    hv_Row4.Dispose();
    hv_Column4.Dispose();
    hv_Phi3.Dispose();
    hv_Length13.Dispose();
    hv_Length23.Dispose();
    hv_XsUpperRight.Dispose();
    hv_YsUpperRight.Dispose();
    hv_XsLeftUpper.Dispose();
    hv_YsLeftUpper.Dispose();
    hv_XsLeftLower.Dispose();
    hv_YsLeftLower.Dispose();
    hv_XsLeft.Dispose();
    hv_YsLeft.Dispose();
    hv_ignorePortion.Dispose();
    hv_lineX1Horizontal.Dispose();
    hv_lineY1Horizontal.Dispose();
    hv_lineX2Horizontal.Dispose();
    hv_lineY2Horizontal.Dispose();
    hv_lineY1Vertical.Dispose();
    hv_lineX1Vertical.Dispose();
    hv_lineY2Vertical.Dispose();
    hv_lineX2Vertical.Dispose();
    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_IsOverlapping.Dispose();
    hv_IsOverlapping1.Dispose();

    return;
  }

  public void move_point_along_line (HTuple hv_lineStartX, HTuple hv_lineStartY, 
      HTuple hv_lineDirectionX, HTuple hv_lineDirectionY, HTuple hv_distance, out HTuple hv_lineMovedX, 
      out HTuple hv_lineMovedY)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_xDiff = new HTuple(), hv_yDiff = new HTuple();
    HTuple hv_totalDiff = new HTuple(), hv_xDirection = new HTuple();
    HTuple hv_yDirection = new HTuple();
    // Initialize local and output iconic variables 
    hv_lineMovedX = new HTuple();
    hv_lineMovedY = new HTuple();
    hv_xDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_xDiff = hv_lineDirectionX-hv_lineStartX;
    }
    hv_yDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_yDiff = hv_lineDirectionY-hv_lineStartY;
    }
    hv_totalDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_totalDiff = (((hv_yDiff*hv_yDiff)+(hv_xDiff*hv_xDiff))).TupleSqrt()
        ;
    }
    hv_xDirection.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_xDirection = hv_xDiff/hv_totalDiff;
    }
    hv_yDirection.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_yDirection = hv_yDiff/hv_totalDiff;
    }
    hv_lineMovedX.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_lineMovedX = hv_lineStartX+(hv_xDirection*hv_distance);
    }
    hv_lineMovedY.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_lineMovedY = hv_lineStartY+(hv_yDirection*hv_distance);
    }

    hv_xDiff.Dispose();
    hv_yDiff.Dispose();
    hv_totalDiff.Dispose();
    hv_xDirection.Dispose();
    hv_yDirection.Dispose();

    return;
  }

  public void offset_line (HTuple hv_x1, HTuple hv_y1, HTuple hv_x2, HTuple hv_y2, 
      HTuple hv_offset, out HTuple hv_x1Output, out HTuple hv_y1Output, out HTuple hv_x2Output, 
      out HTuple hv_y2Output)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_xDiff = new HTuple(), hv_yDiff = new HTuple();
    HTuple hv_m = new HTuple(), hv_b = new HTuple(), hv_radian = new HTuple();
    HTuple hv_yIncre = new HTuple(), hv_newB = new HTuple();
    // Initialize local and output iconic variables 
    hv_x1Output = new HTuple();
    hv_y1Output = new HTuple();
    hv_x2Output = new HTuple();
    hv_y2Output = new HTuple();
    //calculate m and b
    hv_xDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_xDiff = hv_x2-hv_x1;
    }
    hv_yDiff.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_yDiff = hv_y2-hv_y1;
    }
    hv_m.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_m = hv_yDiff/hv_xDiff;
    }
    hv_b.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_b = hv_y1-(hv_m*hv_x1);
    }

    //calculate angle
    hv_radian.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_radian = hv_m.TupleAtan()
        ;
    }
    //calculate new b after offset
    hv_yIncre.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_yIncre = hv_offset/(hv_radian.TupleCos()
        );
    }
    hv_newB.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_newB = hv_b+hv_yIncre;
    }

    //sample two points back to caller
    hv_x1Output.Dispose();
    hv_x1Output = new HTuple(hv_x1);
    hv_x2Output.Dispose();
    hv_x2Output = new HTuple(hv_x2);
    hv_y1Output.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_y1Output = (hv_x1Output*hv_m)+hv_newB;
    }
    hv_y2Output.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_y2Output = (hv_x2Output*hv_m)+hv_newB;
    }


    hv_xDiff.Dispose();
    hv_yDiff.Dispose();
    hv_m.Dispose();
    hv_b.Dispose();
    hv_radian.Dispose();
    hv_yIncre.Dispose();
    hv_newB.Dispose();

    return;
  }

  public void VisionProStyleFindLine (HObject ho_Image, out HObject ho_ROI_0, HTuple hv_transition, 
      HTuple hv_rect1_row, HTuple hv_rect1_col, HTuple hv_rect1_rad, HTuple hv_rect1_len1, 
      HTuple hv_rect1_len2, HTuple hv_numSubRects, out HTuple hv_Xs, out HTuple hv_Ys)
  {




    // Local iconic variables 

    HObject ho_Rectangle=null;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_leftFaced = new HTuple(), hv_rect1_deg = new HTuple();
    HTuple hv_widthSubRects = new HTuple(), hv_heightSubRects = new HTuple();
    HTuple hv_betaDeg = new HTuple(), hv_rectStartX = new HTuple();
    HTuple hv_rectStartY = new HTuple(), hv_subRectXIncrement = new HTuple();
    HTuple hv_subRectYIncrement = new HTuple(), hv_firstSubRectCenterX = new HTuple();
    HTuple hv_firstSubRectCenterY = new HTuple(), hv_Index = new HTuple();
    HTuple hv_subRectCenterX = new HTuple(), hv_subRectCenterY = new HTuple();
    HTuple hv_subRectLen1 = new HTuple(), hv_subRectLen2 = new HTuple();
    HTuple hv_subRectPhi = new HTuple(), hv_MeasureHandle1 = new HTuple();
    HTuple hv_RowEdge1 = new HTuple(), hv_ColumnEdge1 = new HTuple();
    HTuple hv_Amplitude1 = new HTuple(), hv_Distance1 = new HTuple();
    HTuple   hv_numSubRects_COPY_INP_TMP = new HTuple(hv_numSubRects);

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ROI_0);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    hv_Xs = new HTuple();
    hv_Ys = new HTuple();

    hv_Xs.Dispose();
    hv_Xs = new HTuple();
    hv_Ys.Dispose();
    hv_Ys = new HTuple();

    hv_Width.Dispose();hv_Height.Dispose();
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

    hv_leftFaced.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_leftFaced = (new HTuple(hv_rect1_rad.TupleLess(
        (new HTuple(-90)).TupleRad()))).TupleOr(new HTuple(hv_rect1_rad.TupleGreater(
        (new HTuple(90)).TupleRad())));
    }
    hv_rect1_deg.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_rect1_deg = hv_rect1_rad.TupleDeg()
        ;
    }

    ho_ROI_0.Dispose();
    HOperatorSet.GenRectangle2(out ho_ROI_0, hv_rect1_row, hv_rect1_col, hv_rect1_rad, 
        hv_rect1_len1, hv_rect1_len2);
    hv_numSubRects_COPY_INP_TMP.Dispose();
    hv_numSubRects_COPY_INP_TMP = 10;
    hv_widthSubRects.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_widthSubRects = (hv_rect1_len2/hv_numSubRects_COPY_INP_TMP)*2;
    }
    hv_heightSubRects.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_heightSubRects = hv_rect1_len1*2;
    }

    if ((int)(hv_leftFaced) != 0)
    {
      hv_betaDeg.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_betaDeg = (-hv_rect1_deg)-90;
      }
      hv_rectStartX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_rectStartX = hv_rect1_col-(hv_rect1_len2*(((hv_betaDeg.TupleRad()
          )).TupleCos()));
      }
      hv_rectStartY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_rectStartY = hv_rect1_row-(hv_rect1_len2*(((hv_betaDeg.TupleRad()
          )).TupleSin()));
      }
      hv_subRectXIncrement.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_subRectXIncrement = hv_widthSubRects*(((hv_betaDeg.TupleRad()
          )).TupleCos());
      }
      hv_subRectYIncrement.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_subRectYIncrement = (((hv_widthSubRects*hv_widthSubRects)-(hv_subRectXIncrement*hv_subRectXIncrement))).TupleSqrt()
          ;
      }
      hv_firstSubRectCenterX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_firstSubRectCenterX = hv_rectStartX+(hv_subRectXIncrement*0.5);
      }
      hv_firstSubRectCenterY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_firstSubRectCenterY = hv_rectStartY+(hv_subRectYIncrement*0.5);
      }
    }
    else
    {
      hv_betaDeg.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_betaDeg = 90+hv_rect1_deg;
      }
      hv_rectStartX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_rectStartX = hv_rect1_col+(hv_rect1_len2*(((hv_betaDeg.TupleRad()
          )).TupleCos()));
      }
      hv_rectStartY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_rectStartY = hv_rect1_row-(hv_rect1_len2*(((hv_betaDeg.TupleRad()
          )).TupleSin()));
      }
      hv_subRectXIncrement.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_subRectXIncrement = (-hv_widthSubRects)*(((hv_betaDeg.TupleRad()
          )).TupleCos());
      }
      hv_subRectYIncrement.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_subRectYIncrement = (((hv_widthSubRects*hv_widthSubRects)-(hv_subRectXIncrement*hv_subRectXIncrement))).TupleSqrt()
          ;
      }
      hv_firstSubRectCenterX.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_firstSubRectCenterX = hv_rectStartX+(hv_subRectXIncrement*0.5);
      }
      hv_firstSubRectCenterY.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_firstSubRectCenterY = hv_rectStartY+(hv_subRectYIncrement*0.5);
      }
    }


    HTuple end_val33 = hv_numSubRects_COPY_INP_TMP-1;
    HTuple step_val33 = 1;
    for (hv_Index=0; hv_Index.Continue(end_val33, step_val33); hv_Index = hv_Index.TupleAdd(step_val33))
    {

      if ((int)(hv_leftFaced) != 0)
      {
        hv_subRectCenterX.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_subRectCenterX = hv_firstSubRectCenterX+(hv_Index*hv_subRectXIncrement);
        }
        hv_subRectCenterY.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_subRectCenterY = hv_firstSubRectCenterY+(hv_Index*hv_subRectYIncrement);
        }
        hv_subRectLen1.Dispose();
        hv_subRectLen1 = new HTuple(hv_rect1_len1);
        hv_subRectLen2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_subRectLen2 = hv_rect1_len2/hv_numSubRects_COPY_INP_TMP;
        }
        hv_subRectPhi.Dispose();
        hv_subRectPhi = new HTuple(hv_rect1_rad);
      }
      else
      {
        hv_subRectCenterX.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_subRectCenterX = hv_firstSubRectCenterX+(hv_Index*hv_subRectXIncrement);
        }
        hv_subRectCenterY.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_subRectCenterY = hv_firstSubRectCenterY+(hv_Index*hv_subRectYIncrement);
        }
        hv_subRectLen1.Dispose();
        hv_subRectLen1 = new HTuple(hv_rect1_len1);
        hv_subRectLen2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_subRectLen2 = hv_rect1_len2/hv_numSubRects_COPY_INP_TMP;
        }
        hv_subRectPhi.Dispose();
        hv_subRectPhi = new HTuple(hv_rect1_rad);
      }

      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle2(out ho_Rectangle, hv_subRectCenterY, hv_subRectCenterX, 
          hv_subRectPhi, hv_subRectLen1, hv_subRectLen2);
      hv_MeasureHandle1.Dispose();
      HOperatorSet.GenMeasureRectangle2(hv_subRectCenterY, hv_subRectCenterX, hv_subRectPhi, 
          hv_subRectLen1, hv_subRectLen2, hv_Width, hv_Height, "nearest_neighbor", 
          out hv_MeasureHandle1);
      hv_RowEdge1.Dispose();hv_ColumnEdge1.Dispose();hv_Amplitude1.Dispose();hv_Distance1.Dispose();
      HOperatorSet.MeasurePos(ho_Image, hv_MeasureHandle1, 1, 0.5, hv_transition, 
          "first", out hv_RowEdge1, out hv_ColumnEdge1, out hv_Amplitude1, out hv_Distance1);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Xs = hv_Xs.TupleConcat(
          hv_ColumnEdge1);
      hv_Xs.Dispose();
      hv_Xs = ExpTmpLocalVar_Xs;
      }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_Ys = hv_Ys.TupleConcat(
          hv_RowEdge1);
      hv_Ys.Dispose();
      hv_Ys = ExpTmpLocalVar_Ys;
      }
      }
      HOperatorSet.CloseMeasure(hv_MeasureHandle1);
    }


    ho_Rectangle.Dispose();

    hv_numSubRects_COPY_INP_TMP.Dispose();
    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_leftFaced.Dispose();
    hv_rect1_deg.Dispose();
    hv_widthSubRects.Dispose();
    hv_heightSubRects.Dispose();
    hv_betaDeg.Dispose();
    hv_rectStartX.Dispose();
    hv_rectStartY.Dispose();
    hv_subRectXIncrement.Dispose();
    hv_subRectYIncrement.Dispose();
    hv_firstSubRectCenterX.Dispose();
    hv_firstSubRectCenterY.Dispose();
    hv_Index.Dispose();
    hv_subRectCenterX.Dispose();
    hv_subRectCenterY.Dispose();
    hv_subRectLen1.Dispose();
    hv_subRectLen2.Dispose();
    hv_subRectPhi.Dispose();
    hv_MeasureHandle1.Dispose();
    hv_RowEdge1.Dispose();
    hv_ColumnEdge1.Dispose();
    hv_Amplitude1.Dispose();
    hv_Distance1.Dispose();

    return;
  }

  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_FindLineRegions, ho_PointsFound;

    // Local control variables 

    HTuple hv_ModelID = new HTuple(), hv_WindowHandle = new HTuple();
    HTuple hv_VAxisX11 = new HTuple(), hv_VAxisY1 = new HTuple();
    HTuple hv_VAxisX2 = new HTuple(), hv_VAxisY2 = new HTuple();
    HTuple hv_HAxisX1 = new HTuple(), hv_HAxisY1 = new HTuple();
    HTuple hv_HAxisX2 = new HTuple(), hv_HAxisY2 = new HTuple();
    HTuple hv_CoorCenterY = new HTuple(), hv_CoorCenterX = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_FindLineRegions);
    HOperatorSet.GenEmptyObj(out ho_PointsFound);
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "E:/Projects/3d/3D_Image/DF3_1_Z.tif");
    hv_ModelID.Dispose();
    HOperatorSet.ReadShapeModel("./DF7_1_Z", out hv_ModelID);
    //dev_close_window(...);
    //dev_open_window(...);
    HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
    HOperatorSet.AttachBackgroundToWindow(ho_Image, hv_ExpDefaultWinHandle);
    ho_FindLineRegions.Dispose();ho_PointsFound.Dispose();hv_VAxisX11.Dispose();hv_VAxisY1.Dispose();hv_VAxisX2.Dispose();hv_VAxisY2.Dispose();hv_HAxisX1.Dispose();hv_HAxisY1.Dispose();hv_HAxisX2.Dispose();hv_HAxisY2.Dispose();hv_CoorCenterY.Dispose();hv_CoorCenterX.Dispose();
    I40_FindOrigin(ho_Image, out ho_FindLineRegions, out ho_PointsFound, hv_ModelID, 
        out hv_VAxisX11, out hv_VAxisY1, out hv_VAxisX2, out hv_VAxisY2, out hv_HAxisX1, 
        out hv_HAxisY1, out hv_HAxisX2, out hv_HAxisY2, out hv_CoorCenterY, out hv_CoorCenterX);
    HOperatorSet.DispObj(ho_FindLineRegions, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_PointsFound, hv_ExpDefaultWinHandle);

    //************A***************
    //A1: (4.34,7.12)
    //A2: (-4.34,7.12)
    //A3: (-6.57,4.54)
    //A4: (-6.57, -4.54)
    //A5: (-4.05, -6.94)
    //A6: (4.05, -6.94)
    //A7: (6.75, -4.54)
    //A8: (6.75, 4.54)

    ho_Image.Dispose();
    ho_FindLineRegions.Dispose();
    ho_PointsFound.Dispose();

    hv_ModelID.Dispose();
    hv_WindowHandle.Dispose();
    hv_VAxisX11.Dispose();
    hv_VAxisY1.Dispose();
    hv_VAxisX2.Dispose();
    hv_VAxisY2.Dispose();
    hv_HAxisX1.Dispose();
    hv_HAxisY1.Dispose();
    hv_HAxisX2.Dispose();
    hv_HAxisY2.Dispose();
    hv_CoorCenterY.Dispose();
    hv_CoorCenterX.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

