<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.0">
<procedure name="main">
<interface/>
<body>
<l>set_system ('clip_region', 'false')</l>
<l>Width := 5120</l>
<l>Height := 5120</l>
<l>read_shape_model ('E:/Projects/3d/Hdevs/backViewModel', ModelID)</l>
<l>imageDir := 'D:/Images/0925/动态/2/XIA/MV-CH250-20TM-M58S-NF (00D27021190)/'</l>
<c></c>
<l>open_file ('C:/Users/25001858/Desktop/data.txt', 'output', FileHandle)</l>
<l>header := '21_1,21_2,23_1,23_2,24_1,25_1,25_2,26_1,26_2,27_1,27_2,28_1,28_2,29_1,29_2,31_1,32_1,33_1'</l>
<l>fwrite_string (FileHandle, header)</l>
<l>fnew_line (FileHandle)</l>
<c>                </c>
<l>set_system ('image_dir', imageDir)</l>
<c></c>
<l>open_framegrabber ('File', 1, 1, Width, Height, 0, 0, 'default', -1, 'default', -1, 'false', imageDir + 'images.seq', '', 1, 2, AcqHandle)</l>
<c></c>
<c></c>
<l>dev_set_draw ('margin')</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 800, 800, 'black', WindowHandle)</l>
<c></c>
<c></c>
<l>XCoeff := 0.0076</l>
<l>YCoeff := 0.0076</l>
<l>FAINames := []</l>
<l>FAIBiases := []</l>
<l>FAIWeights := []</l>
<c></c>
<c></c>
<l>for Index := 1 to 32 by 1</l>
<l>    read_image (Image, 'D:/Images/0928/LF_20190928014626637.bmp')</l>
<l>    *grab_image (Image, AcqHandle)</l>
<c>* Find model</c>
<l>     I94BottomViewMeasure (Image, FindLineRegions, LineRegions, ModelID, XCoeff, YCoeff, FAINames, FAIWeights, FAIBiases, IntersectsX, IntersectsY, Outputs, OutputsPixel, PointsXUsed, PointsYUsed, PointsXIgnored, PointsYIgnored)</l>
<c></c>
<l>numOutputs := |Outputs|</l>
<l>numOutputsPixel := |OutputsPixel|</l>
<c></c>
<l>dev_display (Image)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (LineRegions)</l>
<l>dev_set_color ('green')</l>
<l>gen_cross_contour_xld (Cross, PointsYUsed, PointsXUsed, 100, 0.785398)</l>
<l>dev_set_color ('red')</l>
<l>gen_cross_contour_xld (Cross, PointsYIgnored, PointsXIgnored, 100, 0.785398)</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_color ('blue')</l>
<l>gen_cross_contour_xld (Cross, IntersectsY, IntersectsX, 200, 0.785398)</l>
<l>dev_set_color ('magenta')</l>
<l>dev_display (FindLineRegions)</l>
<l>dev_set_line_width (1)</l>
<c></c>
<l>for Index1 := 0 to |OutputsPixel|-1 by 1</l>
<l>                fwrite_string (FileHandle, OutputsPixel[Index1] + ',')</l>
<l>  endfor</l>
<l>  fnew_line (FileHandle)</l>
<c>  </c>
<l>stop ()</l>
<l>  endfor</l>
<c></c>
<l>close_file (FileHandle)</l>
<l>clear_shape_model (ModelID)</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="GenVisibleMeasureRect">
<interface>
<oo>
<par name="ROI_0" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="rect1_row" base_type="ctrl" dimension="0"/>
<par name="rect1_col" base_type="ctrl" dimension="0"/>
<par name="rect1_rad" base_type="ctrl" dimension="0"/>
<par name="rect1_len1" base_type="ctrl" dimension="0"/>
<par name="rect1_len2" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="MeasureHandle" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle2 (ROI_0, rect1_row, rect1_col, rect1_rad, rect1_len1, rect1_len2)</l>
<l>gen_measure_rectangle2 (rect1_row, rect1_col, rect1_rad, rect1_len1, rect1_len2, Width, Height, 'nearest_neighbor', MeasureHandle)</l>
<l>return ()</l>
</body>
<docu id="GenVisibleMeasureRect">
<parameters>
<parameter id="Height"/>
<parameter id="MeasureHandle"/>
<parameter id="ROI_0"/>
<parameter id="Width"/>
<parameter id="rect1_col"/>
<parameter id="rect1_len1"/>
<parameter id="rect1_len2"/>
<parameter id="rect1_rad"/>
<parameter id="rect1_row"/>
</parameters>
</docu>
</procedure>
<procedure name="VisionProStyleFindLine">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ROI_0" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="transition" base_type="ctrl" dimension="0"/>
<par name="rect1_row" base_type="ctrl" dimension="0"/>
<par name="rect1_col" base_type="ctrl" dimension="0"/>
<par name="rect1_rad" base_type="ctrl" dimension="0"/>
<par name="rect1_len1" base_type="ctrl" dimension="0"/>
<par name="rect1_len2" base_type="ctrl" dimension="0"/>
<par name="numSubRects" base_type="ctrl" dimension="0"/>
<par name="threshold" base_type="ctrl" dimension="0"/>
<par name="sigma" base_type="ctrl" dimension="0"/>
<par name="firstOrLast" base_type="ctrl" dimension="0"/>
<par name="usingPairs" base_type="ctrl" dimension="0"/>
<par name="whichEdgePair" base_type="ctrl" dimension="0"/>
<par name="minEdge" base_type="ctrl" dimension="0"/>
<par name="maxEdge" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Xs" base_type="ctrl" dimension="0"/>
<par name="Ys" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Xs := []</l>
<l>Ys := []</l>
<c></c>
<c></c>
<l>get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<l>leftFaced := rect1_rad&lt;rad(-90) or rect1_rad&gt;rad(90)</l>
<l>rect1_deg := deg(rect1_rad)</l>
<c></c>
<l>gen_rectangle2 (ROI_0, rect1_row, rect1_col, rect1_rad, rect1_len1, rect1_len2)</l>
<l>widthSubRects := rect1_len2/numSubRects*2</l>
<l>heightSubRects := rect1_len1*2</l>
<c></c>
<l>if(leftFaced)</l>
<l>    betaDeg := -rect1_deg - 90</l>
<l>rectStartX := rect1_col - rect1_len2 * cos(rad(betaDeg))</l>
<l>rectStartY := rect1_row - rect1_len2 * sin(rad(betaDeg))</l>
<l>subRectXIncrement := widthSubRects * cos(rad(betaDeg))</l>
<l>subRectYIncrement := sqrt(widthSubRects*widthSubRects-subRectXIncrement*subRectXIncrement)</l>
<l>firstSubRectCenterX := rectStartX + subRectXIncrement*0.5</l>
<l>firstSubRectCenterY := rectStartY + subRectYIncrement * 0.5</l>
<l>else</l>
<l>    betaDeg := 90 + rect1_deg</l>
<l>rectStartX := rect1_col + rect1_len2 * cos(rad(betaDeg))</l>
<l>rectStartY := rect1_row - rect1_len2 * sin(rad(betaDeg))</l>
<l>subRectXIncrement := -widthSubRects * cos(rad(betaDeg))</l>
<l>subRectYIncrement := sqrt(widthSubRects*widthSubRects-subRectXIncrement*subRectXIncrement)</l>
<l>firstSubRectCenterX := rectStartX + subRectXIncrement*0.5</l>
<l>firstSubRectCenterY := rectStartY + subRectYIncrement * 0.5</l>
<l>endif</l>
<c></c>
<c></c>
<l>for Index := 0 to numSubRects-1 by 1</l>
<c>    </c>
<l>    if(leftFaced)</l>
<l>         subRectCenterX := firstSubRectCenterX + Index*subRectXIncrement</l>
<l>   subRectCenterY := firstSubRectCenterY + Index*subRectYIncrement </l>
<l>   subRectLen1 := rect1_len1</l>
<l>   subRectLen2 := rect1_len2/numSubRects</l>
<l>   subRectPhi := rect1_rad</l>
<l>    else</l>
<l>           subRectCenterX := firstSubRectCenterX + Index*subRectXIncrement</l>
<l>   subRectCenterY := firstSubRectCenterY + Index*subRectYIncrement </l>
<l>   subRectLen1 := rect1_len1</l>
<l>   subRectLen2 := rect1_len2/numSubRects</l>
<l>   subRectPhi := rect1_rad</l>
<l>    endif</l>
<c>    </c>
<l>   gen_rectangle2 (Rectangle, subRectCenterY, subRectCenterX, subRectPhi, subRectLen1, subRectLen2)</l>
<l>   gen_measure_rectangle2 (subRectCenterY, subRectCenterX, subRectPhi, subRectLen1, subRectLen2, Width, Height, 'nearest_neighbor', MeasureHandle1)</l>
<c>   </c>
<l>   if(usingPairs == 'false')</l>
<l>          measure_pos (Image, MeasureHandle1, sigma, threshold, transition, firstOrLast, RowEdge1, ColumnEdge1, Amplitude1, Distance1)</l>
<l>          Xs := [Xs,ColumnEdge1]</l>
<l>          Ys := [Ys, RowEdge1]</l>
<l>   else</l>
<l>       measure_pairs (Image, MeasureHandle1, sigma, threshold, transition, whichEdgePair, RowEdgeFirst, ColumnEdgeFirst, AmplitudeFirst, RowEdgeSecond, ColumnEdgeSecond, AmplitudeSecond, IntraDistance, InterDistance)</l>
<c>       * only count if edge with is within range</c>
<l>       if(|IntraDistance|&gt;0 and IntraDistance &gt; minEdge and IntraDistance &lt; maxEdge)</l>
<l>           if(firstOrLast == 'first')</l>
<l>               Xs := [Xs,ColumnEdgeFirst]</l>
<l>               Ys := [Ys, RowEdgeFirst]</l>
<l>           else</l>
<l>                 Xs := [Xs,ColumnEdgeSecond]</l>
<l>               Ys := [Ys, RowEdgeSecond]</l>
<l>           endif</l>
<l>       endif</l>
<c>       </c>
<l>   endif</l>
<l>                close_measure (MeasureHandle1)</l>
<c></c>
<c>   </c>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="VisionProStyleFindLine">
<parameters>
<parameter id="Image"/>
<parameter id="ROI_0"/>
<parameter id="Xs"/>
<parameter id="Ys"/>
<parameter id="firstOrLast"/>
<parameter id="maxEdge">
<sem_type>real</sem_type>
</parameter>
<parameter id="minEdge">
<default_value>0</default_value>
<sem_type>real</sem_type>
</parameter>
<parameter id="numSubRects"/>
<parameter id="rect1_col"/>
<parameter id="rect1_len1"/>
<parameter id="rect1_len2"/>
<parameter id="rect1_rad"/>
<parameter id="rect1_row"/>
<parameter id="sigma">
<default_value>1</default_value>
<multivalue>false</multivalue>
<sem_type>real</sem_type>
</parameter>
<parameter id="threshold"/>
<parameter id="transition"/>
<parameter id="usingPairs">
<default_value>'false'</default_value>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
</parameter>
<parameter id="whichEdgePair">
<default_value>'first'</default_value>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="FitLine2D">
<interface>
<ic>
<par name="Xs" base_type="ctrl" dimension="0"/>
<par name="Ys" base_type="ctrl" dimension="0"/>
<par name="ignorePortion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>fit_line2D_rough (Xs, Ys, lineX1, lineY1, lineX2, lineY2)</l>
<c></c>
<l>totalPoints := |Xs|</l>
<c>* number of points to ignore</c>
<l>numPointsLeft := (1.0-ignorePortion) * |Xs|</l>
<c></c>
<c>* calculate fitness of each point</c>
<l>fiterrors := []</l>
<l>for i := 0 to |Xs|-1 by 1</l>
<l>    distance_pl (Ys[i], Xs[i], lineY1, lineX1, lineY2, lineX2, Distance)</l>
<l>    fiterrors := [fiterrors, Distance]</l>
<l>endfor</l>
<c></c>
<l>tuple_sort_index (fiterrors, Indices)</l>
<c></c>
<c>* select the best fits</c>
<l>XsUsed := []</l>
<l>YsUsed := []</l>
<l>XsIgnored := []</l>
<l>YsIgnored := []</l>
<l>ErrorBest := []</l>
<l>for i := 0 to totalPoints-1 by 1</l>
<l>    index := Indices[i]</l>
<l>   if(i &lt; numPointsLeft)</l>
<l>           XsUsed := [XsUsed, Xs[index]]</l>
<l>    YsUsed := [YsUsed, Ys[index]]</l>
<l>    ErrorBest := [ErrorBest, fiterrors[index]]</l>
<l>   else</l>
<l>       XsIgnored := [XsIgnored, Xs[index]]</l>
<l>       YsIgnored := [YsIgnored, Ys[index]]</l>
<l>   endif</l>
<l>endfor</l>
<c></c>
<c>* fit line again</c>
<l>fit_line2D_rough (XsUsed, YsUsed, lineX1, lineY1, lineX2, lineY2)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="FitLine2D">
<parameters>
<parameter id="Xs"/>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="Ys"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
<parameter id="ignorePortion"/>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
</parameters>
</docu>
</procedure>
<procedure name="move_point_along_line">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineDirectionX" base_type="ctrl" dimension="0"/>
<par name="lineDirectionY" base_type="ctrl" dimension="0"/>
<par name="distance" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineMovedX" base_type="ctrl" dimension="0"/>
<par name="lineMovedY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>xDiff := lineDirectionX - lineStartX</l>
<l>yDiff := lineDirectionY - lineStartY</l>
<l>totalDiff := sqrt(yDiff*yDiff+xDiff*xDiff)</l>
<l>xDirection := xDiff / totalDiff</l>
<l>yDirection := yDiff / totalDiff</l>
<l>lineMovedX := lineStartX + xDirection * distance</l>
<l>lineMovedY := lineStartY + yDirection * distance</l>
<l>return ()</l>
</body>
<docu id="move_point_along_line">
<parameters>
<parameter id="distance"/>
<parameter id="lineDirectionX"/>
<parameter id="lineDirectionY"/>
<parameter id="lineMovedX"/>
<parameter id="lineMovedY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="get_perpendicular_line_that_passes">
<interface>
<ic>
<par name="lineXStart" base_type="ctrl" dimension="0"/>
<par name="lineYStart" base_type="ctrl" dimension="0"/>
<par name="lineXEnd" base_type="ctrl" dimension="0"/>
<par name="lineYEnd" base_type="ctrl" dimension="0"/>
<par name="xPass" base_type="ctrl" dimension="0"/>
<par name="yPass" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineXPerpendicular" base_type="ctrl" dimension="0"/>
<par name="lineYPerpendicular" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>get_direction_unit (lineXStart, lineYStart, lineXEnd, lineYEnd, xUnit, yUnit)</l>
<l>get_perpendicular_direction (xUnit, yUnit, outputVectorX, outputVectorY)</l>
<c></c>
<c>* another point on the perpendicular line can be determined by</c>
<c>* adding perpendicular unit vector to the first point that we passed</c>
<l>lineXPerpendicular := xPass + outputVectorX</l>
<l>lineYPerpendicular := yPass + outputVectorY</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_perpendicular_line_that_passes">
<parameters>
<parameter id="lineXEnd"/>
<parameter id="lineXPerpendicular"/>
<parameter id="lineXStart"/>
<parameter id="lineYEnd"/>
<parameter id="lineYPerpendicular"/>
<parameter id="lineYStart"/>
<parameter id="xPass"/>
<parameter id="yPass"/>
</parameters>
</docu>
</procedure>
<procedure name="get_direction_unit">
<interface>
<ic>
<par name="xStart" base_type="ctrl" dimension="0"/>
<par name="yStart" base_type="ctrl" dimension="0"/>
<par name="xEnd" base_type="ctrl" dimension="0"/>
<par name="yEnd" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="xUnit" base_type="ctrl" dimension="0"/>
<par name="yUnit" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>xDiff := xEnd - xStart</l>
<l>yDiff := yEnd - yStart</l>
<c></c>
<l>totalDiff := sqrt(yDiff*yDiff + xDiff*xDiff)</l>
<c></c>
<l>xUnit := xDiff / totalDiff</l>
<l>yUnit := yDiff / totalDiff</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_direction_unit">
<parameters>
<parameter id="xEnd"/>
<parameter id="xStart"/>
<parameter id="xUnit"/>
<parameter id="yEnd"/>
<parameter id="yStart"/>
<parameter id="yUnit"/>
</parameters>
</docu>
</procedure>
<procedure name="get_perpendicular_direction">
<interface>
<ic>
<par name="inputVectorX" base_type="ctrl" dimension="0"/>
<par name="inputVectorY" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outputVectorX" base_type="ctrl" dimension="0"/>
<par name="outputVectorY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* assume that a perticular vector perpendiclar to me is (xAssume, yAssume), let xAssume = 1</c>
<l>xAssume := 1</l>
<l>yAssume := -(inputVectorX/inputVectorY)</l>
<l>distAssume := sqrt(yAssume*yAssume + xAssume * xAssume)</l>
<c></c>
<c>* calculate unit length direction vector</c>
<l>outputVectorX := xAssume / distAssume</l>
<l>outputVectorY := yAssume / distAssume</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_perpendicular_direction">
<parameters>
<parameter id="inputVectorX"/>
<parameter id="inputVectorY"/>
<parameter id="outputVectorX"/>
<parameter id="outputVectorY"/>
</parameters>
</docu>
</procedure>
<procedure name="offset_line">
<interface>
<ic>
<par name="x1" base_type="ctrl" dimension="0"/>
<par name="y1" base_type="ctrl" dimension="0"/>
<par name="x2" base_type="ctrl" dimension="0"/>
<par name="y2" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="x1Output" base_type="ctrl" dimension="0"/>
<par name="y1Output" base_type="ctrl" dimension="0"/>
<par name="x2Output" base_type="ctrl" dimension="0"/>
<par name="y2Output" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* calculate m and b</c>
<l>xDiff := x2 - x1</l>
<l>yDiff := y2 - y1</l>
<l>m := yDiff / xDiff</l>
<l>b := y1 - m* x1</l>
<c></c>
<c>* calculate angle</c>
<l>radian := atan(m)</l>
<c>* calculate new b after offset</c>
<l>yIncre := offset / cos(radian)</l>
<l>newB := b + yIncre</l>
<c></c>
<c>* sample two points back to caller</c>
<l>x1Output := x1</l>
<l>x2Output := x2</l>
<l>y1Output := x1Output * m + newB</l>
<l>y2Output := x2Output * m + newB</l>
<c></c>
<l>return ()</l>
</body>
<docu id="offset_line">
<parameters>
<parameter id="offset"/>
<parameter id="x1"/>
<parameter id="x1Output"/>
<parameter id="x2"/>
<parameter id="x2Output"/>
<parameter id="y1"/>
<parameter id="y1Output"/>
<parameter id="y2"/>
<parameter id="y2Output"/>
</parameters>
</docu>
</procedure>
<procedure name="I40_FindOrigin">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="FindLineRegions" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VAxisX1" base_type="ctrl" dimension="0"/>
<par name="VAxisY1" base_type="ctrl" dimension="0"/>
<par name="VAxisX2" base_type="ctrl" dimension="0"/>
<par name="VAxisY2" base_type="ctrl" dimension="0"/>
<par name="HAxisX1" base_type="ctrl" dimension="0"/>
<par name="HAxisY1" base_type="ctrl" dimension="0"/>
<par name="HAxisX2" base_type="ctrl" dimension="0"/>
<par name="HAxisY2" base_type="ctrl" dimension="0"/>
<par name="CoorCenterY" base_type="ctrl" dimension="0"/>
<par name="CoorCenterX" base_type="ctrl" dimension="0"/>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Width := 2032</l>
<l>Height := 2500</l>
<c></c>
<l>xCoeff := 0.016</l>
<l>yCoeff := 0.02</l>
<c></c>
<c>* create xld features for fixturing</c>
<l>gen_rectangle1 (ROI_0, 99.0277, 161.153, 1198.89, 1388.46)</l>
<l>reduce_domain (Image, ROI_0, ImageReduced)</l>
<l>sobel_amp (ImageReduced, EdgeAmplitude, 'sum_abs', 3)</l>
<l>threshold (EdgeAmplitude, Region, 0.5, 255)</l>
<l>region_to_bin (Region, BinImage, 255, 0, Width, Height)</l>
<l>gen_contour_region_xld (Region, Contours, 'border')</l>
<c></c>
<l>find_shape_model (BinImage, ModelID, -0.39, 0.79, 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row5, Column5, Angle, Score)</l>
<l>vector_angle_to_rigid (0, 0, 0, Row5, Column5, Angle, HomMat2D)</l>
<c></c>
<c>* center of the model</c>
<l>area_center (Region, Area1, centerModelY, centerModelX)</l>
<c></c>
<c>* align all the measure rects with respect to the created shape model which is zero centered</c>
<l>set_system ('clip_region', 'false')</l>
<c>* upperleft find line</c>
<l>*gen_rectangle2 (Rectangle, 331.86700000, 510.16200000, rad(-90.00000000), 40, 90.95780000)</l>
<l>*move_region (Rectangle, RegionMoved, -centerModelY, -centerModelX)</l>
<c>* upper right find line</c>
<l>gen_rectangle2 (Rectangle1, 1676.14, 792.335, rad(90), 60, 220)</l>
<l>move_region (Rectangle1, RegionMoved1, -centerModelY, -centerModelX)</l>
<c>* left upper find line</c>
<l>gen_rectangle2 (Rectangle2, 477.38200000, 370.80400000, rad(0.00000000), 60, 75.89940000)</l>
<l>move_region (Rectangle2, RegionMoved2, -centerModelY, -centerModelX)</l>
<c>* left lower find line</c>
<l>gen_rectangle2 (Rectangle3, 897.15300000, 368.12700000, rad(0.00000000), 60, 48.35380000)</l>
<l>move_region (Rectangle3, RegionMoved3, -centerModelY, -centerModelX)</l>
<l>set_system ('clip_region', 'true')</l>
<c></c>
<c></c>
<c>* fix all the measure rects to track individual parts to be measured</c>
<l>*affine_trans_region (RegionMoved, FindLineRegions, HomMat2D, 'nearest_neighbor')</l>
<l>affine_trans_region (RegionMoved1, FindLineRegions, HomMat2D, 'nearest_neighbor')</l>
<l>affine_trans_region (RegionMoved2, FindLineRegions2, HomMat2D, 'nearest_neighbor')</l>
<l>affine_trans_region (RegionMoved3, FindLineRegions3, HomMat2D, 'nearest_neighbor')</l>
<c></c>
<c>* get the pose of measure rects that are fixed in place</c>
<l>*smallest_rectangle2 (FindLineRegions, Row1, Column1, Phi, Length1, Length2)</l>
<l>smallest_rectangle2 (FindLineRegions, Row2, Column2, Phi1, Length11, Length21)</l>
<l>smallest_rectangle2 (FindLineRegions2, Row3, Column3, Phi2, Length12, Length22)</l>
<l>smallest_rectangle2 (FindLineRegions3, Row4, Column4, Phi3, Length13, Length23)</l>
<c></c>
<c>* find all the points within the above rects</c>
<l>* VisionProStyleFindLine (Image, ROI_0, 'positive', Row1, Column1, rad(-90), Length2, Length1, 8, threshold, sigma, firstOrLast, usingPairs, whichEdge, minEdge, maxEdge, XsUpperLeft, YsUpperLeft)</l>
<l>VisionProStyleFindLine (Image, ROI_0, 'negative', Row2, Column2, rad(-90), Length21, Length11, 8, threshold1, sigma1, firstOrLast1, usingPairs1, whichEdge1, minEdge1, maxEdge1, XsUpperRight, YsUpperRight)</l>
<l>VisionProStyleFindLine (Image, ROI_0, 'positive', Row3, Column3, rad(0), Length22, Length12, 8, threshold2, sigma2, firstOrLast2, usingPairs2, whichEdge2, minEdge2, maxEdge2, XsLeftUpper, YsLeftUpper)</l>
<l>VisionProStyleFindLine (Image, ROI_0, 'positive', Row4, Column4, rad(0), Length13, Length23, 8, threshold3, sigma3, firstOrLast3, usingPairs3, whichEdge3, minEdge3, maxEdge3, XsLeftLower, YsLeftLower)</l>
<c></c>
<c>* fit left and upper base line</c>
<l>*tuple_concat (XsUpperLeft, XsUpperRight, XsUpper)</l>
<l>*tuple_concat (YsUpperLeft, YsUpperRight, YsUpper)</l>
<l>tuple_concat (XsLeftUpper, XsLeftLower, XsLeft)</l>
<l>tuple_concat (YsLeftUpper, YsLeftLower, YsLeft)</l>
<c></c>
<l>ignorePortion := 0.2</l>
<l>FitLine2D (XsUpperRight, YsUpperRight, ignorePortion, lineX1Horizontal, lineY1Horizontal, lineX2Horizontal, lineY2Horizontal, XsUsed1, YsUsed1, XsIgnored1, YsIgnored1)</l>
<l>FitLine2D (YsLeft, XsLeft, ignorePortion, lineY1Vertical, lineX1Vertical, lineY2Vertical, lineX2Vertical, YsUsed2, XsUsed2, YsIgnored2, XsIgnored2)</l>
<c></c>
<l>tuple_concat (XsUsed1, XsUsed2, XsUsed)</l>
<l>tuple_concat (YsUsed1, YsUsed2, YsUsed)</l>
<l>tuple_concat (XsIgnored1, XsIgnored2, XsIgnored)</l>
<l>tuple_concat (YsIgnored1,YsIgnored2, YsIgnored)</l>
<c></c>
<l>intersection_lines (lineY1Vertical, lineX1Vertical, lineY2Vertical, lineX2Vertical, lineY1Horizontal, lineX1Horizontal, lineY2Horizontal, lineX2Horizontal, Row, Column, IsOverlapping)</l>
<c></c>
<c>* move the intersection point from top left to top center</c>
<l>move_point_along_line (Column, Row, lineX1Horizontal, lineY1Horizontal, 6.74/xCoeff, VAxisX1, VAxisY1)</l>
<l>gen_cross_contour_xld (PointsFound4, VAxisY1, VAxisX1, 100, Angle)</l>
<c></c>
<c>* the perpendicular can be determined by the last four params</c>
<l>get_perpendicular_line_that_passes (lineX1Horizontal, lineY1Horizontal, VAxisX1, VAxisY1, VAxisX1, VAxisY1, VAxisX2, VAxisY2)</l>
<c></c>
<c>* offset the horizontal line</c>
<l>offset_line(lineX1Horizontal, lineY1Horizontal, lineX2Horizontal, lineY2Horizontal, -19.47/yCoeff, HAxisX1, HAxisY1, HAxisX2, HAxisY2)</l>
<c></c>
<c>* draw new coordinate center</c>
<l>intersection_lines (VAxisY1, VAxisX1, VAxisY2, VAxisX2, HAxisY1, HAxisX1, HAxisY2, HAxisX2, CoorCenterY, CoorCenterX, IsOverlapping1)</l>
<l>gen_cross_contour_xld (PointsFound5, CoorCenterY, CoorCenterX, 100, Angle)</l>
<c></c>
<c></c>
<c>* concat objects necessary for displaying</c>
<l>concat_obj (FindLineRegions, FindLineRegions2, FindLineRegions)</l>
<l>concat_obj (FindLineRegions, FindLineRegions3, FindLineRegions)</l>
<l>return ()</l>
</body>
<docu id="I40_FindOrigin">
<parameters>
<parameter id="CoorCenterX"/>
<parameter id="CoorCenterY"/>
<parameter id="FindLineRegions"/>
<parameter id="HAxisX1"/>
<parameter id="HAxisX2"/>
<parameter id="HAxisY1"/>
<parameter id="HAxisY2"/>
<parameter id="Image"/>
<parameter id="ModelID"/>
<parameter id="VAxisX1"/>
<parameter id="VAxisX2"/>
<parameter id="VAxisY1"/>
<parameter id="VAxisY2"/>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
</parameters>
</docu>
</procedure>
<procedure name="fit_line2D_rough">
<interface>
<ic>
<par name="Xs" base_type="ctrl" dimension="0"/>
<par name="Ys" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>if(|Xs| == 0)</l>
<l>    throw ('No points being passed in')</l>
<l>endif</l>
<l>tuple_sum (Xs, SumX)</l>
<l>AverageX := SumX / |Xs|</l>
<c></c>
<l>tuple_sum (Ys, SumY)</l>
<l>AverageY := SumY / |Ys|</l>
<c></c>
<l>SumUpper := 0</l>
<l>SumLower := 0</l>
<l>for i := 0 to |Xs|-1 by 1</l>
<l>    incrementUpper := (Xs[i]-AverageX) * (Ys[i]-AverageY)</l>
<l>    incrementLower := (AverageX-Xs[i]) * (AverageX-Xs[i])</l>
<l>    SumUpper := SumUpper + incrementUpper</l>
<l>    SumLower := SumLower + incrementLower</l>
<l>endfor</l>
<c></c>
<l>m := SumUpper / SumLower</l>
<l>b := AverageY - m*AverageX </l>
<c></c>
<c></c>
<c></c>
<c>* sample two point</c>
<l>tuple_max (Xs, lineX1)</l>
<l>tuple_min (Xs, lineX2)</l>
<c></c>
<l>lineY1 := m * lineX1 + b</l>
<l>lineY2 := m * lineX2 + b</l>
<l>return ()</l>
</body>
<docu id="fit_line2D_rough">
<parameters>
<parameter id="Xs"/>
<parameter id="Ys"/>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
</parameters>
</docu>
</procedure>
<procedure name="VisionProStyleFindLineOneStep">
<interface>
<io>
<par name="inputImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="findLineRegion" base_type="iconic" dimension="0"/>
<par name="lineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="transition" base_type="ctrl" dimension="0"/>
<par name="row" base_type="ctrl" dimension="0"/>
<par name="col" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="len1" base_type="ctrl" dimension="0"/>
<par name="len2" base_type="ctrl" dimension="0"/>
<par name="numSubRects" base_type="ctrl" dimension="0"/>
<par name="threshold" base_type="ctrl" dimension="0"/>
<par name="firstOrLast" base_type="ctrl" dimension="0"/>
<par name="ignoreFraction" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
<par name="sigma1" base_type="ctrl" dimension="0"/>
<par name="sigma2" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
<par name="newWidth" base_type="ctrl" dimension="0"/>
<par name="cannyHigh" base_type="ctrl" dimension="0"/>
<par name="cannyLow" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>MultipleLines := 'false'</l>
<l>if (|row| &gt; 1)</l>
<l>    MultipleLines := 'true'</l>
<l>endif</l>
<c></c>
<l>EdgesX := []</l>
<l>EdgesY := []</l>
<l>AllXsUsed := []</l>
<l>AllYsUsed := []</l>
<l>AllXsIgnored := []</l>
<l>AllYsIgnored := []</l>
<c></c>
<l>gen_empty_obj (findLineRegions)</l>
<l>gen_empty_obj (lineRegions)</l>
<c></c>
<l>for i:= 0 to |row|-1 by 1</l>
<l>    VisionProStyleFindLine (inputImage, findLineRegion, transition, row[i], col[i], radian[i], len1[i], len2[i], numSubRects, threshold[i], sigma1, firstOrLast, 'false', 'first', 0, 100, Xs, Ys)</l>
<c></c>
<l>    if(isVertical == 'true')</l>
<l>        FitLine2D (Ys, Xs, ignoreFraction, lineY1, lineX1, lineY2, lineX2, YsUsed, XsUsed, YsIgnored, XsIgnored)</l>
<l>    else</l>
<l>        FitLine2D (Xs, Ys, ignoreFraction, lineX1, lineY1, lineX2, lineY2, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>    endif</l>
<c></c>
<l>    _pinPointFindLine (inputImage, findLineRegion1, lineX1, lineX2, lineY1, lineY2, radian, newWidth, MultipleLines, cannyHigh, cannyLow, sigma2, RowBegin, ColBegin, RowEnd, ColEnd, EdgesXStep, EdgesYStep)</l>
<c></c>
<l>    if(MultipleLines == 'true')</l>
<l>        EdgesX := [EdgesX, EdgesXStep]</l>
<l>        EdgesY := [EdgesY, EdgesYStep]</l>
<l>        concat_obj (findLineRegions, findLineRegion, findLineRegions)</l>
<l>        AllXsUsed := [AllXsUsed, XsUsed]</l>
<l>        AllYsUsed := [AllYsUsed, YsUsed]</l>
<l>        AllXsIgnored := [AllXsIgnored, XsIgnored]</l>
<l>        AllYsIgnored := [AllYsIgnored, YsIgnored]</l>
<l>    endif</l>
<c>    </c>
<l>endfor</l>
<c></c>
<l>if(MultipleLines == 'true')</l>
<l>    FitLine2D (EdgesX, EdgesY, 0, ColBegin, RowBegin, ColEnd, RowEnd, _, _, _, _)</l>
<l>    findLineRegion := findLineRegions</l>
<l>    XsUsed := AllXsUsed</l>
<l>    YsUsed := AllYsUsed</l>
<l>    XsIgnored := AllXsIgnored</l>
<l>    YsIgnored := AllYsIgnored</l>
<l>endif</l>
<c></c>
<c></c>
<l>GenLineRegion (lineRegion, ColBegin, RowBegin, ColEnd, RowEnd, imageWidth, imageHeight)</l>
<l>lineX1 := ColBegin</l>
<l>lineY1 := RowBegin</l>
<l>lineX2 := ColEnd</l>
<l>lineY2 := RowEnd</l>
<l>return ()</l>
</body>
<docu id="VisionProStyleFindLineOneStep">
<parameters>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
<parameter id="cannyHigh">
<default_value>60</default_value>
<sem_type>real</sem_type>
</parameter>
<parameter id="cannyLow">
<default_value>30</default_value>
</parameter>
<parameter id="col"/>
<parameter id="findLineRegion">
<description lang="zh_CN">The region where the line was searched</description>
</parameter>
<parameter id="firstOrLast"/>
<parameter id="ignoreFraction"/>
<parameter id="imageHeight">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="imageWidth">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="inputImage"/>
<parameter id="isVertical"/>
<parameter id="len1"/>
<parameter id="len2"/>
<parameter id="lineRegion">
<description lang="zh_CN">The found line</description>
</parameter>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
<parameter id="newWidth">
<default_type>integer</default_type>
<default_value>5</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="numSubRects"/>
<parameter id="radian"/>
<parameter id="row"/>
<parameter id="sigma1">
<default_type>real</default_type>
<default_value>1</default_value>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="sigma2"/>
<parameter id="threshold"/>
<parameter id="transition"/>
</parameters>
</docu>
</procedure>
<procedure name="GetWorldImageMap">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="camParamFile" base_type="ctrl" dimension="0"/>
<par name="camPoseFile" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="mapToImage" base_type="ctrl" dimension="0"/>
<par name="mapToWorld" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="CameraParam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_pose (camPoseFile, Pose)</l>
<l>read_cam_par (camParamFile, CameraParam)</l>
<l>get_image_size (Image, Width, Height)</l>
<c></c>
<c>* generate 9 image-to-world coordinate pairs</c>
<l>XsImage := []</l>
<l>YsImage := []</l>
<l>XsWorld := []</l>
<l>YsWorld := []</l>
<c></c>
<l>for row := -1 to 1 by 1</l>
<l>    for column := -1 to 1 by 1</l>
<l>        xImage := Width/2 + 100* column</l>
<l>        XsImage := [XsImage, xImage]</l>
<l>        yImage := Height/2 + 100 * row</l>
<l>        YsImage := [YsImage, yImage]</l>
<c>        </c>
<l>        image_points_to_world_plane (CameraParam, Pose, yImage, xImage, 'mm', xWorld, yWorld)</l>
<l>        XsWorld := [XsWorld, xWorld]</l>
<l>        YsWorld := [YsWorld, yWorld]</l>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>vector_to_similarity (XsWorld, YsWorld, XsImage, YsImage, mapToImage)</l>
<l>vector_to_similarity (XsImage, YsImage, XsWorld, YsWorld, mapToWorld)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="GetWorldImageMap">
<parameters>
<parameter id="CameraParam"/>
<parameter id="Image">
<description lang="zh_CN">Getting maps that convert image coordintates to and from world</description>
</parameter>
<parameter id="Pose"/>
<parameter id="camParamFile">
<sem_type>string</sem_type>
</parameter>
<parameter id="camPoseFile">
<sem_type>string</sem_type>
</parameter>
<parameter id="mapToImage"/>
<parameter id="mapToWorld"/>
</parameters>
</docu>
</procedure>
<procedure name="GetImageToWorldMap">
<interface>
<io>
<par name="image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="camParamFile" base_type="ctrl" dimension="0"/>
<par name="camPoseFile" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="map" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_pose (camPoseFile, Pose)</l>
<l>read_cam_par (camParamFile, CameraParam)</l>
<l>get_image_size (image, Width, Height)</l>
<c></c>
<c>* generate 9 image-to-world coordinate pairs</c>
<l>XsImage := []</l>
<l>YsImage := []</l>
<l>XsWorld := []</l>
<l>YsWorld := []</l>
<c></c>
<l>for row := -1 to 1 by 1</l>
<l>    for column := -1 to 1 by 1</l>
<l>        xImage := Width/2 + 100* column</l>
<l>        XsImage := [XsImage, xImage]</l>
<l>        yImage := Height/2 + 100 * row</l>
<l>        YsImage := [YsImage, yImage]</l>
<c>        </c>
<l>        image_points_to_world_plane (CameraParam, Pose, yImage, xImage, 'mm', xWorld, yWorld)</l>
<l>        XsWorld := [XsWorld, xWorld]</l>
<l>        YsWorld := [YsWorld, yWorld]</l>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>vector_to_similarity (XsImage, YsImage, XsWorld, YsWorld, map)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GetImageToWorldMap">
<parameters>
<parameter id="camParamFile"/>
<parameter id="camPoseFile"/>
<parameter id="image"/>
<parameter id="map"/>
</parameters>
</docu>
</procedure>
<procedure name="TranslateLineInWorldCoordinateAndConvertBack">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="distance" base_type="ctrl" dimension="0"/>
<par name="mapToWorld" base_type="ctrl" dimension="0"/>
<par name="mapToImage" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outLineStartX" base_type="ctrl" dimension="0"/>
<par name="outLineStartY" base_type="ctrl" dimension="0"/>
<par name="outLineEndX" base_type="ctrl" dimension="0"/>
<par name="outLineEndY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c>* translate world line</c>
<l>MakeParallelLine (lineStartX, lineStartY, lineEndX, lineEndY, distance, isVertical, outLineStartX, outLineStartY, outLineEndX, outLineEndY)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="TranslateLineInWorldCoordinateAndConvertBack">
<parameters>
<parameter id="distance"/>
<parameter id="isVertical">
<sem_type>string</sem_type>
</parameter>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="mapToImage"/>
<parameter id="mapToWorld"/>
<parameter id="outLineEndX"/>
<parameter id="outLineEndY"/>
<parameter id="outLineStartX"/>
<parameter id="outLineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="MakeParallelLine">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outLineStartX" base_type="ctrl" dimension="0"/>
<par name="outLineStartY" base_type="ctrl" dimension="0"/>
<par name="outLineEndX" base_type="ctrl" dimension="0"/>
<par name="outLineEndY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>if(isVertical == 'true')</l>
<l>    OffsetLineLeftRight (lineStartX, lineStartY, lineEndX, lineEndY, offset, outLineStartX, outLineStartY, outLineEndX, outLineEndY)</l>
<l>else</l>
<l>    OffsetLineUpDown (lineStartX, lineStartY, lineEndX, lineEndY, offset, outLineStartX, outLineStartY, outLineEndX, outLineEndY)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="MakeParallelLine">
<parameters>
<parameter id="isVertical">
<description lang="zh_CN">Whether the line is near or actually vertical</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="offset">
<description lang="zh_CN">Positive direction points outward from (0,0)</description>
<sem_type>real</sem_type>
</parameter>
<parameter id="outLineEndX"/>
<parameter id="outLineEndY"/>
<parameter id="outLineStartX"/>
<parameter id="outLineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="TranslateLineNotVertical">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outLineStartX" base_type="ctrl" dimension="0"/>
<par name="outLineStartY" base_type="ctrl" dimension="0"/>
<par name="outLineEndX" base_type="ctrl" dimension="0"/>
<par name="outLineEndY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>line_orientation (lineStartY, lineStartX, lineEndY, lineEndX, Phi)</l>
<c></c>
<c></c>
<l>absPhi := abs(Phi)</l>
<l>bIncre := offset / cos(absPhi)</l>
<l>m := atan(Phi)</l>
<c></c>
<l>b := lineStartY - m*lineStartX</l>
<l>newB := b + bIncre</l>
<c></c>
<c>* sample output points</c>
<l>outLineStartX := lineStartX</l>
<l>outLineStartY := m * outLineStartX + newB</l>
<l>outLineEndX := lineEndX</l>
<l>outLineEndY := m * outLineEndX + newB</l>
<c></c>
<l>return ()</l>
</body>
<docu id="TranslateLineNotVertical">
<parameters>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="offset"/>
<parameter id="outLineEndX"/>
<parameter id="outLineEndY"/>
<parameter id="outLineStartX"/>
<parameter id="outLineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="DistancePLInWorld">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="ptX" base_type="ctrl" dimension="0"/>
<par name="ptY" base_type="ctrl" dimension="0"/>
<par name="mapToWorld" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="distanceWorld" base_type="ctrl" dimension="0"/>
<par name="distancePixel" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* transform image points to world points</c>
<l>*affine_trans_point_2d (mapToWorld, lineStartX, lineStartY, lineStartX_World, lineStartY_World)</l>
<l>*affine_trans_point_2d (mapToWorld, ptX, ptY, ptX_World, ptY_World)</l>
<l>*affine_trans_point_2d (mapToWorld, lineEndX, lineEndY, lineEndX_World, lineEndY_World)</l>
<c></c>
<c>* cal world distance</c>
<c></c>
<l>distance_pl (ptY, ptX, lineStartY, lineStartX, lineEndY, lineEndX, distancePixel)</l>
<c></c>
<l>distance_pl (ptY, ptX, lineStartY, lineStartX, lineEndY, lineEndX, distanceWorld)</l>
<l>return ()</l>
</body>
<docu id="DistancePLInWorld">
<parameters>
<parameter id="distancePixel"/>
<parameter id="distanceWorld"/>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="mapToWorld"/>
<parameter id="ptX"/>
<parameter id="ptY"/>
</parameters>
</docu>
</procedure>
<procedure name="VisionProStyleFindLineOneStep_Pairs">
<interface>
<io>
<par name="inputImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="findLineRegion" base_type="iconic" dimension="0"/>
<par name="lineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="row" base_type="ctrl" dimension="0"/>
<par name="col" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="len1" base_type="ctrl" dimension="0"/>
<par name="len2" base_type="ctrl" dimension="0"/>
<par name="transition" base_type="ctrl" dimension="0"/>
<par name="numSubRects" base_type="ctrl" dimension="0"/>
<par name="threshold" base_type="ctrl" dimension="0"/>
<par name="sigma1" base_type="ctrl" dimension="0"/>
<par name="sigma2" base_type="ctrl" dimension="0"/>
<par name="firstOrLast" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
<par name="ignoreFraction" base_type="ctrl" dimension="0"/>
<par name="whichEdgePair" base_type="ctrl" dimension="0"/>
<par name="minEdge" base_type="ctrl" dimension="0"/>
<par name="maxEdge" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
<par name="cannyHigh" base_type="ctrl" dimension="0"/>
<par name="cannyLow" base_type="ctrl" dimension="0"/>
<par name="useXLD" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>MultipleLines := 'false'</l>
<l>if (|row| &gt; 1)</l>
<l>    MultipleLines := 'true'</l>
<l>endif</l>
<c></c>
<l>EdgesX := []</l>
<l>EdgesY := []</l>
<l>AllXsUsed := []</l>
<l>AllYsUsed := []</l>
<l>AllXsIgnored := []</l>
<l>AllYsIgnored := []</l>
<c></c>
<l>gen_empty_obj (findLineRegions)</l>
<l>gen_empty_obj (lineRegions)</l>
<c></c>
<l>for i:= 0 to |row|-1 by 1</l>
<l>    VisionProStyleFindLine (inputImage, findLineRegion, transition, row[i], col[i], radian[i], len1[i], len2[i], numSubRects, threshold[i], sigma1, firstOrLast, 'true', whichEdgePair, minEdge, maxEdge, XsUsed, YsUsed)</l>
<c></c>
<l>    if(isVertical == 'true')</l>
<l>        FitLine2D (XsUsed, YsUsed, ignoreFraction, lineY1, lineX1, lineY2, lineX2, YsUsed, XsUsed, YsIgnored, XsIgnored)</l>
<l>    else</l>
<l>        FitLine2D (XsUsed, YsUsed, ignoreFraction, lineX1, lineY1, lineX2, lineY2, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>    endif</l>
<c></c>
<l>    _pinPointFindLine (inputImage, findLineRegion, lineX1, lineX2, lineY1, lineY2, radian, 5, MultipleLines, cannyHigh, cannyLow, sigma2, RowBegin, ColBegin, RowEnd, ColEnd, EdgesXStep, EdgesYStep)</l>
<c></c>
<l>    if(MultipleLines == 'true')</l>
<l>        EdgesX := [EdgesX, EdgesXStep]</l>
<l>        EdgesY := [EdgesY, EdgesYStep]</l>
<l>        concat_obj (findLineRegions, findLineRegion, findLineRegions)</l>
<l>        AllXsUsed := [AllXsUsed, XsUsed]</l>
<l>        AllYsUsed := [AllYsUsed, YsUsed]</l>
<l>        AllXsIgnored := [AllXsIgnored, XsIgnored]</l>
<l>        AllYsIgnored := [AllYsIgnored, YsIgnored]</l>
<l>    endif</l>
<c>    </c>
<l>endfor</l>
<c></c>
<l>if(MultipleLines == 'true')</l>
<l>    if(useXLD == 'false')</l>
<l>        EdgesX := XsUsed</l>
<l>        EdgesY := YsUsed</l>
<l>    endif</l>
<l>    FitLine2D (EdgesX, EdgesY, 0, ColBegin, RowBegin, ColEnd, RowEnd, _, _, _, _)</l>
<l>    findLineRegion := findLineRegions</l>
<l>    XsUsed := AllXsUsed</l>
<l>    YsUsed := AllYsUsed</l>
<l>    XsIgnored := AllXsIgnored</l>
<l>    YsIgnored := AllYsIgnored</l>
<l>endif</l>
<c></c>
<c></c>
<l>GenLineRegion (lineRegion, ColBegin, RowBegin, ColEnd, RowEnd, imageWidth, imageHeight)</l>
<l>lineX1 := ColBegin</l>
<l>lineY1 := RowBegin</l>
<l>lineX2 := ColEnd</l>
<l>lineY2 := RowEnd</l>
<l>return ()</l>
</body>
<docu id="VisionProStyleFindLineOneStep_Pairs">
<parameters>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
<parameter id="cannyHigh"/>
<parameter id="cannyLow"/>
<parameter id="col">
<default_type>integer</default_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="findLineRegion">
<description lang="zh_CN">The region where the line was searched</description>
</parameter>
<parameter id="firstOrLast">
<default_value>'first'</default_value>
<sem_type>string</sem_type>
</parameter>
<parameter id="ignoreFraction">
<sem_type>real</sem_type>
</parameter>
<parameter id="imageHeight">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="imageWidth">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="inputImage"/>
<parameter id="isVertical">
<default_value>'false'</default_value>
<sem_type>string</sem_type>
</parameter>
<parameter id="len1">
<default_type>real</default_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="len2">
<default_type>real</default_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="lineRegion">
<description lang="zh_CN">The found line</description>
</parameter>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
<parameter id="maxEdge">
<sem_type>real</sem_type>
</parameter>
<parameter id="minEdge">
<sem_type>real</sem_type>
</parameter>
<parameter id="numSubRects">
<default_type>integer</default_type>
<default_value>10</default_value>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="radian">
<default_type>real</default_type>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="row">
<default_type>integer</default_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="sigma1">
<sem_type>real</sem_type>
</parameter>
<parameter id="sigma2"/>
<parameter id="threshold">
<sem_type>number</sem_type>
</parameter>
<parameter id="transition">
<default_value>'positive'</default_value>
<sem_type>string</sem_type>
</parameter>
<parameter id="useXLD">
<default_value>'false'</default_value>
<sem_type>string</sem_type>
</parameter>
<parameter id="whichEdgePair">
<default_value>'first'</default_value>
<sem_type>string</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="_affineTransRect2Single">
<interface>
<ic>
<par name="row" base_type="ctrl" dimension="0"/>
<par name="col" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="len1" base_type="ctrl" dimension="0"/>
<par name="len2" base_type="ctrl" dimension="0"/>
<par name="map" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="rowOut" base_type="ctrl" dimension="0"/>
<par name="colOut" base_type="ctrl" dimension="0"/>
<par name="radianOut" base_type="ctrl" dimension="0"/>
<par name="len1Out" base_type="ctrl" dimension="0"/>
<par name="len2Out" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>affine_trans_point_2d (map, row, col, rowOut, colOut)</l>
<l>len1Out := len1</l>
<l>len2Out := len2</l>
<c></c>
<l>topCenterCol := col + cos(radian) * len1</l>
<l>topCenterRow := row - sin(radian) * len2</l>
<c></c>
<l>affine_trans_point_2d (map, topCenterRow, topCenterCol, topCenterRowTrans, topCenterColTrans)</l>
<c></c>
<c></c>
<c></c>
<l>vecCol := topCenterColTrans - colOut</l>
<l>vecRow := topCenterRowTrans - rowOut</l>
<l>epslon := 0.0000000001</l>
<l>if(abs(vecRow) &lt; epslon)</l>
<l>    vecRow := epslon</l>
<l>endif</l>
<c></c>
<l>if(vecCol &gt;=0 and vecRow &gt;=0)</l>
<c>    * 右下</c>
<l>    radianOut := -atan(vecRow / vecCol)</l>
<l>elseif (vecCol &gt;= 0 and vecRow &lt; 0)</l>
<c>    * 右上</c>
<l>    radianOut := -atan(vecRow / vecCol)</l>
<l>elseif (vecCol &lt; 0 and vecRow &gt;=0)</l>
<c>    * 左下</c>
<l>     radianOut := rad(-180) - atan(vecRow / vecCol)</l>
<l>else</l>
<c>    * 左上</c>
<l>     radianOut := rad(180) - atan(vecRow / vecCol)</l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="_affineTransRect2Single">
<parameters>
<parameter id="col"/>
<parameter id="colOut"/>
<parameter id="len1"/>
<parameter id="len1Out"/>
<parameter id="len2"/>
<parameter id="len2Out"/>
<parameter id="map"/>
<parameter id="radian"/>
<parameter id="radianOut"/>
<parameter id="row"/>
<parameter id="rowOut"/>
</parameters>
</docu>
</procedure>
<procedure name="GenLineRegion">
<interface>
<oo>
<par name="lineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="lineXStart" base_type="ctrl" dimension="0"/>
<par name="lineYStart" base_type="ctrl" dimension="0"/>
<par name="lineXEnd" base_type="ctrl" dimension="0"/>
<par name="lineYEnd" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>if(|lineXStart| == 0)</l>
<l>    throw ('No points passed in')</l>
<l>endif</l>
<l>xDiff := lineXEnd - lineXStart</l>
<l>yDiff := lineYEnd - lineYStart</l>
<c></c>
<l>epslon := 0.0000000001</l>
<l>if(abs(xDiff) &lt; epslon)</l>
<l>    xDiff := epslon</l>
<l>endif</l>
<c></c>
<l>m := yDiff/xDiff</l>
<l>b := lineYStart - m* lineXStart</l>
<c></c>
<l>_search_boundary ('null', m, b, imageWidth, imageHeight, result, xStart, yStart)</l>
<l>allBoundaries := ['left','right','up','down']</l>
<l>for Index := 0 to |allBoundaries|-1 by 1</l>
<l>    if(allBoundaries[Index] == result)</l>
<l>        tuple_remove (allBoundaries, Index, boundariesLeft)</l>
<l>    endif</l>
<l>endfor</l>
<l>_search_boundary (boundariesLeft, m, b, imageWidth, imageHeight, result, xEnd, yEnd)</l>
<c></c>
<l>gen_contour_polygon_xld(lineRegion,[yStart,yEnd],[xStart,xEnd])</l>
<l>return ()</l>
</body>
<docu id="GenLineRegion">
<parameters>
<parameter id="imageHeight">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="imageWidth">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="lineRegion"/>
<parameter id="lineXEnd"/>
<parameter id="lineXStart"/>
<parameter id="lineYEnd"/>
<parameter id="lineYStart"/>
</parameters>
</docu>
</procedure>
<procedure name="I94TopFaceMeasurement">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="lineRegions" base_type="iconic" dimension="0"/>
<par name="FindLineRects" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
<par name="xCoeff" base_type="ctrl" dimension="0"/>
<par name="yCoeff" base_type="ctrl" dimension="0"/>
<par name="Biases" base_type="ctrl" dimension="0"/>
<par name="thresholds" base_type="ctrl" dimension="0"/>
<par name="FAINames" base_type="ctrl" dimension="0"/>
<par name="FAIWeights" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outputs" base_type="ctrl" dimension="0"/>
<par name="crossesXused" base_type="ctrl" dimension="0"/>
<par name="crossesYused" base_type="ctrl" dimension="0"/>
<par name="crossesXIgnored" base_type="ctrl" dimension="0"/>
<par name="crossesYIgnored" base_type="ctrl" dimension="0"/>
<par name="intersectXs" base_type="ctrl" dimension="0"/>
<par name="intersectYs" base_type="ctrl" dimension="0"/>
<par name="outputsPixel" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>get_image_size (Image, Width, Height)</l>
<l>mapToImage := 0</l>
<l>mapToWorld := 0</l>
<c></c>
<l>dev_set_draw ('margin')</l>
<c></c>
<l>crossSize := 100</l>
<l>numSubRects := 10</l>
<l>ignorePortion := 0.2</l>
<l>sigma2 :=5</l>
<c></c>
<c>* init thresholds</c>
<l>ModelThreshold := thresholds[0]</l>
<l>TopThreshold := thresholds[1]</l>
<l>RightThreshold := thresholds[2]</l>
<l>FAI2Threshold := thresholds[3]</l>
<l>FAI3Threshold := thresholds[4]</l>
<l>FAI4Threshold := thresholds[5]</l>
<l>FAI5Threshold := thresholds[6]</l>
<l>FAI6Threshold := thresholds[7]</l>
<l>FAI9Threshold := thresholds[8]</l>
<l>FAI12Threshold := thresholds[9]</l>
<l>FAI16Threshold := thresholds[10]</l>
<l>FAI17Threshold := thresholds[11]</l>
<l>FAI19Threshold := thresholds[12]</l>
<l>FAI20Threshold_up := thresholds[13]</l>
<l>FAI20Threshold_down := thresholds[14]</l>
<c></c>
<l>newWidth := 5</l>
<c></c>
<c></c>
<c>* record find line points</c>
<l>crossesXused := []</l>
<l>crossesYused := []</l>
<l>crossesXIgnored := []</l>
<l>crossesYIgnored := []</l>
<c></c>
<c>* record line-line intersections</c>
<l>intersectXs := []</l>
<l>intersectYs := []</l>
<c></c>
<c>* outputs</c>
<l>outputs := []</l>
<l>outputsPixel := []</l>
<c></c>
<c>* set units and positions</c>
<c></c>
<c></c>
<l>FAI2_LEN_P1 := -4.583 / xCoeff</l>
<l>FAI2_LEN_P2 := -9.583 / xCoeff</l>
<l>FAI2_LEN_P3 := -14.583 / xCoeff</l>
<c></c>
<l>FAI3_LEN_P1 := -5.299 / xCoeff</l>
<l>FAI3_LEN_P2 := -9.299 / xCoeff</l>
<l>FAI3_LEN_P3 := -13.299 / xCoeff</l>
<c></c>
<l>FAI4_LEN_P1 := -5.299 / xCoeff</l>
<l>FAI4_LEN_P2 := -9.299 / xCoeff</l>
<l>FAI4_LEN_P3 := -13.299 / xCoeff</l>
<c></c>
<l>FAI5_LEN_P1 := -5.299 / xCoeff</l>
<l>FAI5_LEN_P2 := -9.299 / xCoeff</l>
<l>FAI5_LEN_P3 := -13.299 / xCoeff</l>
<c></c>
<l>FAI6_LEN_P1 := -22.024 / xCoeff</l>
<l>FAI6_LEN_P2 := -24.024 / xCoeff</l>
<l>FAI6_LEN_P3 := -26.024 / xCoeff</l>
<c></c>
<l>FAI9_LEN_P1 := -21.753 / xCoeff</l>
<l>FAI9_LEN_P2 := -23.753 / xCoeff</l>
<l>FAI9_LEN_P3 := -25.753 / xCoeff</l>
<c></c>
<c></c>
<l>FAI12_LEN_P1 := 23.213 / yCoeff</l>
<l>FAI12_LEN_P2 := 34.97 / yCoeff</l>
<c></c>
<l>FAI16_LEN_P1 := 13.071 / yCoeff</l>
<l>FAI16_LEN_P2 := 20.213 / yCoeff</l>
<c></c>
<l>FAI17_LEN_P1 := 1.53 / yCoeff</l>
<l>FAI17_LEN_P2 := 9.827 / yCoeff</l>
<c></c>
<l>FAI19_LEN_P1 := 2.157 / yCoeff</l>
<l>FAI19_LEN_P2 := 13.791 / yCoeff</l>
<c></c>
<l>FAI20_LEN_X := -9.299 / xCoeff</l>
<l>FAI20_LEN_Y := 7.886 / yCoeff</l>
<c></c>
<l>gen_empty_obj (FindLineRects)</l>
<l>gen_empty_obj (lineRegions)</l>
<c></c>
<c></c>
<c>* find model</c>
<l>Threshold := 128</l>
<l>rowModel := 1171.5</l>
<l>colModel := 3678.5</l>
<l>gen_rectangle1 (ROI_0, 53.9, 1940.83, 3017.1, 4961.63)</l>
<l>reduce_domain (Image, ROI_0, ImageReduced)</l>
<l>threshold_sub_pix (ImageReduced, Border, ModelThreshold)</l>
<l>find_shape_model (ImageReduced, ModelID, -0.39, 0.79, 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row, Column, Angle, Score)</l>
<l>vector_angle_to_rigid (0, 0, 0, Row, Column, Angle, MovementImageToImage)</l>
<c></c>
<c></c>
<l>baseRightRow := 3614.64000000 - rowModel</l>
<l>baseRightColum := 4804.56000000 - colModel</l>
<l>baseRightRadian := rad(180)</l>
<l>baseRightLen1 := 287.58000000</l>
<l>baseRightLen2 := 1070.83000000</l>
<c></c>
<c></c>
<l>AffineTransRect2 (baseRightRow, baseRightColum, baseRightRadian, baseRightLen1, baseRightLen2, MovementImageToImage, baseRightRow, baseRightColum, baseRightRadian, baseRightLen1, baseRightLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', baseRightRow, baseRightColum, baseRightRadian, baseRightLen1, baseRightLen2, numSubRects, TopThreshold, 'first', ignorePortion, 'true', 1, 2, Width, Height, newWidth, 40, 20, lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<c></c>
<c>* find top base line</c>
<l>baseTopRow := 162.42300000 - rowModel</l>
<l>baseTopColumn := 3614.30000000 - colModel</l>
<l>baseTopRadian := rad(-90.00000000)</l>
<l>baseTopLen1 := 279.69400000</l>
<l>baseTopLen2 := 627.82500000</l>
<c></c>
<c></c>
<c></c>
<l>AffineTransRect2 (baseTopRow, baseTopColumn, baseTopRadian, baseTopLen1, baseTopLen2, MovementImageToImage, baseTopRow, baseTopColumn, baseTopRadian, baseTopLen1, baseTopLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', baseTopRow, baseTopColumn, baseTopRadian, baseTopLen1, baseTopLen2, numSubRects, RightThreshold, 'first', ignorePortion, 'false', 1, sigma2, Width, Height, newWidth, 60, 30, lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c></c>
<c></c>
<c>* make origin</c>
<l>intersection_lines (lineY1RightBase, lineX1RightBase, lineY2RightBase, lineX2RightBase, lineY1TopBase, lineX1TopBase, lineY2TopBase, lineX2TopBase, rowOrigin, colOrigin, IsOverlapping)</l>
<l>intersectXs := [intersectXs, colOrigin]</l>
<l>intersectYs := [intersectYs, rowOrigin]</l>
<c></c>
<c>*rectify bases</c>
<l>get_perpendicular_line_that_passes (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colOrigin, rowOrigin, ptXOnPerpenducularDir, ptYOnPerpenducularDir)</l>
<l>lineX1RightBase := colOrigin</l>
<l>lineY1RightBase := rowOrigin</l>
<l>lineX2RightBase := ptXOnPerpenducularDir</l>
<l>lineY2RightBase := ptYOnPerpenducularDir</l>
<c></c>
<c></c>
<c>****************************************************FAI2***********************************</c>
<c>* make vertical grids</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI2_LEN_P1, mapToWorld, mapToImage, 'true', FAI2_P1_LineStartX, FAI2_P1_LineStartY, FAI2_P1_LineEndX, FAI2_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI2_LEN_P2, mapToWorld, mapToImage, 'true', FAI2_P2_LineStartX, FAI2_P2_LineStartY, FAI2_P2_LineEndX, FAI2_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI2_LEN_P3, mapToWorld, mapToImage, 'true', FAI2_P3_LineStartX, FAI2_P3_LineStartY, FAI2_P3_LineEndX, FAI2_P3_LineEndY)</l>
<c></c>
<c>* make H line for FAI2</c>
<c></c>
<l>rectFAI2Row :=2173.39000000 - rowModel</l>
<l>rectFAI2Col :=3168.38000000 - colModel</l>
<l>rectFAI2Radian := rad(-91)</l>
<l>rectFAI2Len1 :=200.89500000</l>
<l>rectFAI2Len2 := 200.18000000</l>
<c></c>
<l>rectFAI2Row_RIGHT :=2173.39000000 - rowModel</l>
<l>rectFAI2Col_RIGHT :=4168.38000000 - colModel</l>
<l>rectFAI2Radian_RIGHT := rad(-91)</l>
<l>rectFAI2Len1_RIGHT :=200.89500000</l>
<l>rectFAI2Len2_RIGHT := 200.18000000</l>
<l>AffineTransRect2 ([rectFAI2Row, rectFAI2Row_RIGHT], [rectFAI2Col,rectFAI2Col_RIGHT], [rectFAI2Radian, rectFAI2Radian_RIGHT], [rectFAI2Len1, rectFAI2Len1_RIGHT], [rectFAI2Len2, rectFAI2Len2_RIGHT], MovementImageToImage, rectFAI2Row, rectFAI2Col, rectFAI2Radian, rectFAI2Len1, rectFAI2Len2)</l>
<l>VisionProStyleFindLineOneStep_Pairs (Image, rectFAI2, lineRegion, rectFAI2Row, rectFAI2Col, rectFAI2Radian, rectFAI2Len1, rectFAI2Len2, 'positive', 10, [FAI2Threshold,FAI2Threshold], 1, sigma2, 'first', 'false', 0.2, 'first', 25, 60, 5120, 5120, 60, 30, 'true', XsUsed, YsUsed, XsIgnored, YsIgnored, lineStartX_FAI2H, lineStartY_FAI2H, lineEndX_FAI2H, lineEndY_FAI2H)</l>
<l>concat_obj (FindLineRects, rectFAI2, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* FAI2-P1</c>
<l>intersection_lines (lineStartY_FAI2H, lineStartX_FAI2H, lineEndY_FAI2H, lineEndX_FAI2H, FAI2_P1_LineStartY, FAI2_P1_LineStartX, FAI2_P1_LineEndY, FAI2_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping1)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_P1, distancePixel)</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI2-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>* FAI2-P2</c>
<l>intersection_lines (lineStartY_FAI2H, lineStartX_FAI2H, lineEndY_FAI2H, lineEndX_FAI2H, FAI2_P2_LineStartY, FAI2_P2_LineStartX, FAI2_P2_LineEndY, FAI2_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping1)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI2-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* FAI2-P3</c>
<l>intersection_lines (lineStartY_FAI2H, lineStartX_FAI2H, lineEndY_FAI2H, lineEndX_FAI2H, FAI2_P3_LineStartY, FAI2_P3_LineStartX, FAI2_P3_LineEndY, FAI2_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping1)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_P3, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI2-P3', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c>**********************************************FAI3************************************</c>
<c></c>
<c></c>
<l>rectFAI3Row :=2173.39000000 - rowModel</l>
<l>rectFAI3Col :=3168.38000000 - colModel</l>
<l>rectFAI3Radian := rad(-91)</l>
<l>rectFAI3Len1 :=200.89500000</l>
<l>rectFAI3Len2 := 200.18000000</l>
<c></c>
<l>rectFAI3Row_RIGHT :=2173.39000000 - rowModel</l>
<l>rectFAI3Col_RIGHT :=4168.38000000 - colModel</l>
<l>rectFAI3Radian_RIGHT := rad(-91)</l>
<l>rectFAI3Len1_RIGHT :=200.89500000</l>
<l>rectFAI3Len2_RIGHT := 200.18000000</l>
<l>AffineTransRect2 ([rectFAI3Row, rectFAI3Row_RIGHT], [rectFAI3Col,rectFAI3Col_RIGHT], [rectFAI3Radian, rectFAI3Radian_RIGHT], [rectFAI3Len1, rectFAI3Len1_RIGHT], [rectFAI3Len2, rectFAI3Len2_RIGHT], MovementImageToImage, rectFAI3Row, rectFAI3Col, rectFAI3Radian, rectFAI3Len1, rectFAI3Len2)</l>
<c></c>
<l>gen_rectangle2 (Rectangle2, rowIntersect, colIntersect, Angle, 100, 20)</l>
<l>VisionProStyleFindLineOneStep_Pairs (Image, rectFAI3, lineRegion, rectFAI3Row, rectFAI3Col, rectFAI3Radian, rectFAI3Len1, rectFAI3Len2, 'positive', 10, [FAI3Threshold,FAI3Threshold], 1, sigma2, 'last', 'false', 0.2, 'first', 25, 60, 5120, 5120, 60, 30, 'true', XsUsed, YsUsed, XsIgnored, YsIgnored, lineX1FAI3, lineY1FAI3, lineX2FAI3, lineY2FAI3)</l>
<l>concat_obj (FindLineRects, rectFAI3, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI3_LEN_P1, mapToWorld, mapToImage, 'true', FAI3_P1_LineStartX, FAI3_P1_LineStartY, FAI3_P1_LineEndX, FAI3_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI3_LEN_P2, mapToWorld, mapToImage, 'true', FAI3_P2_LineStartX, FAI3_P2_LineStartY, FAI3_P2_LineEndX, FAI3_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI3_LEN_P3, mapToWorld, mapToImage, 'true', FAI3_P3_LineStartX, FAI3_P3_LineStartY, FAI3_P3_LineEndX, FAI3_P3_LineEndY)</l>
<c>* P1</c>
<l>intersection_lines (lineY1FAI3, lineX1FAI3, lineY2FAI3, lineX2FAI3, FAI3_P1_LineStartY, FAI3_P1_LineStartX, FAI3_P1_LineEndY, FAI3_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI3_P1, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI3-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI3, lineX1FAI3, lineY2FAI3, lineX2FAI3, FAI3_P2_LineStartY, FAI3_P2_LineStartX, FAI3_P2_LineEndY, FAI3_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI3_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI3-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P3</c>
<l>intersection_lines (lineY1FAI3, lineX1FAI3, lineY2FAI3, lineX2FAI3, FAI3_P3_LineStartY, FAI3_P3_LineStartX, FAI3_P3_LineEndY, FAI3_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI3_P3, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI3-P3', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>***********************************************FAI4*******************************</c>
<l>rectFAI4Row := 4712.30000000 - rowModel</l>
<l>rectFAI4Col := 3567.21000000 - colModel</l>
<l>rectFAI4Radian := rad(90)</l>
<l>rectFAI4Len1 := 107.89900000</l>
<l>rectFAI4Len2 := 559.30000000</l>
<l>AffineTransRect2 (rectFAI4Row, rectFAI4Col, rectFAI4Radian, rectFAI4Len1, rectFAI4Len2, MovementImageToImage, rectFAI4Row, rectFAI4Col, rectFAI4Radian, rectFAI4Len1, rectFAI4Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rectFAI4, lineRegion, 'negative', rectFAI4Row, rectFAI4Col, rectFAI4Radian, rectFAI4Len1, rectFAI4Len2, numSubRects, FAI4Threshold, 'first', ignorePortion, 'false', 1, sigma2, Width, Height, newWidth, 40, 20, lineX1FAI4, lineY1FAI4, lineX2FAI4, lineY2FAI4, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rectFAI4, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI4, lineX1FAI4, lineY2FAI4, lineX2FAI4, FAI3_P1_LineStartY, FAI3_P1_LineStartX, FAI3_P1_LineEndY, FAI3_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI4_P1, distancePixel)</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI4-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI4, lineX1FAI4, lineY2FAI4, lineX2FAI4, FAI3_P2_LineStartY, FAI3_P2_LineStartX, FAI3_P2_LineEndY, FAI3_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI4_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI4-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P3</c>
<l>intersection_lines (lineY1FAI4, lineX1FAI4, lineY2FAI4, lineX2FAI4, FAI3_P3_LineStartY, FAI3_P3_LineStartX, FAI3_P3_LineEndY, FAI3_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI4_P3, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI4-P3', weight)</l>
<l>outputs := [outputs, distancePixel*weight]</l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c>*************************************FAI 5***************************************</c>
<l>rectFAI5Row := 4890.45000000 - rowModel</l>
<l>rectFAI5Col := 3599.13000000 - colModel</l>
<l>rectFAI5Radian := rad(89)</l>
<l>rectFAI5Len1 := 156.70400000</l>
<l>rectFAI5Len2 := 970.77200000</l>
<l>AffineTransRect2 (rectFAI5Row, rectFAI5Col, rectFAI5Radian, rectFAI5Len1, rectFAI5Len2, MovementImageToImage, rectFAI5Row, rectFAI5Col, rectFAI5Radian, rectFAI5Len1, rectFAI5Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI5Row, rectFAI5Col, rectFAI5Radian, rectFAI5Len1, rectFAI5Len2, 6, FAI5Threshold, 'first', ignorePortion, 'false', 1, 2, Width, Height, newWidth, 40, 20, lineX1FAI5, lineY1FAI5, lineX2FAI5, lineY2FAI5, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI5, lineX1FAI5, lineY2FAI5, lineX2FAI5, FAI3_P1_LineStartY, FAI3_P1_LineStartX, FAI3_P1_LineEndY, FAI3_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI5_P1, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI5-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI5, lineX1FAI5, lineY2FAI5, lineX2FAI5, FAI3_P2_LineStartY, FAI3_P2_LineStartX, FAI3_P2_LineEndY, FAI3_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI5_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI5-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P3</c>
<l>intersection_lines (lineY1FAI5, lineX1FAI5, lineY2FAI5, lineX2FAI5, FAI3_P3_LineStartY, FAI3_P3_LineStartX, FAI3_P3_LineEndY, FAI3_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI5_P3, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI5-P3', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c></c>
<c>*************************************FAI 6******************************************</c>
<l>rectFAI6Row := 3017.82000000 - rowModel</l>
<l>rectFAI6Col := 1710.50000000 - colModel</l>
<l>rectFAI6Radian := rad(88)</l>
<l>rectFAI6Len1 := 101.93600000</l>
<l>rectFAI6Len2 := 370.58900000</l>
<l>AffineTransRect2 (rectFAI6Row, rectFAI6Col, rectFAI6Radian, rectFAI6Len1, rectFAI6Len2, MovementImageToImage, rectFAI6Row, rectFAI6Col, rectFAI6Radian, rectFAI6Len1, rectFAI6Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI6Row, rectFAI6Col, rectFAI6Radian, rectFAI6Len1, rectFAI6Len2, numSubRects, FAI6Threshold, 'first', ignorePortion, 'false', 1, sigma2, Width, Height, newWidth, 60, 30, lineX1FAI6, lineY1FAI6, lineX2FAI6, lineY2FAI6, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI6_LEN_P1, mapToWorld, mapToImage, 'true', FAI6_P1_LineStartX, FAI6_P1_LineStartY, FAI6_P1_LineEndX, FAI6_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI6_LEN_P2, mapToWorld, mapToImage, 'true', FAI6_P2_LineStartX, FAI6_P2_LineStartY, FAI6_P2_LineEndX, FAI6_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI6_LEN_P3, mapToWorld, mapToImage, 'true', FAI6_P3_LineStartX, FAI6_P3_LineStartY, FAI6_P3_LineEndX, FAI6_P3_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI6, lineX1FAI6, lineY2FAI6, lineX2FAI6, FAI6_P1_LineStartY, FAI6_P1_LineStartX, FAI6_P1_LineEndY, FAI6_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI6_P1, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI6-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI6, lineX1FAI6, lineY2FAI6, lineX2FAI6, FAI6_P2_LineStartY, FAI6_P2_LineStartX, FAI6_P2_LineEndY, FAI6_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI6_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI6-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P3</c>
<l>intersection_lines (lineY1FAI6, lineX1FAI6, lineY2FAI6, lineX2FAI6, FAI6_P3_LineStartY, FAI6_P3_LineStartX, FAI6_P3_LineEndY, FAI6_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI6_P3, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI6-P3', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c>*************************************FAI9********************************************</c>
<l>rectFAI9Row := 1584.57000000 - rowModel</l>
<l>rectFAI9Col := 1744.61000000 - colModel</l>
<l>rectFAI9Radian := rad(-90)</l>
<l>rectFAI9Len1 := 97.95910000</l>
<l>rectFAI9Len2 := 275.13700000</l>
<l>AffineTransRect2 (rectFAI9Row, rectFAI9Col, rectFAI9Radian, rectFAI9Len1, rectFAI9Len2, MovementImageToImage, rectFAI9Row, rectFAI9Col, rectFAI9Radian, rectFAI9Len1, rectFAI9Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI9Row, rectFAI9Col, rectFAI9Radian, rectFAI9Len1, rectFAI9Len2, numSubRects, FAI9Threshold, 'first', ignorePortion, 'false', 1, sigma2, Width, Height, newWidth, 60, 30, lineX1FAI9, lineY1FAI9, lineX2FAI9, lineY2FAI9, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI9_LEN_P1, mapToWorld, mapToImage, 'true', FAI9_P1_LineStartX, FAI9_P1_LineStartY, FAI9_P1_LineEndX, FAI9_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI9_LEN_P2, mapToWorld, mapToImage, 'true', FAI9_P2_LineStartX, FAI9_P2_LineStartY, FAI9_P2_LineEndX, FAI9_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI9_LEN_P3, mapToWorld, mapToImage, 'true', FAI9_P3_LineStartX, FAI9_P3_LineStartY, FAI9_P3_LineEndX, FAI9_P3_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI9, lineX1FAI9, lineY2FAI9, lineX2FAI9, FAI9_P1_LineStartY, FAI9_P1_LineStartX, FAI9_P1_LineEndY, FAI9_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI9_P1, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI9-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI9, lineX1FAI9, lineY2FAI9, lineX2FAI9, FAI9_P2_LineStartY, FAI9_P2_LineStartX, FAI9_P2_LineEndY, FAI9_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI9_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI9-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P3</c>
<l>intersection_lines (lineY1FAI9, lineX1FAI9, lineY2FAI9, lineX2FAI9, FAI9_P3_LineStartY, FAI9_P3_LineStartX, FAI9_P3_LineEndY, FAI9_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI9_P3, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI9-P3', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c>******************************FAI12**************************</c>
<l>rectFAI12Row := 3817.80000000 - rowModel</l>
<l>rectFAI12Col := 2372.51000000 - colModel</l>
<l>rectFAI12Radian := rad(0)</l>
<l>rectFAI12Len1 := 209.09700000</l>
<l>rectFAI12Len2 := 477.84200000</l>
<l>AffineTransRect2 (rectFAI12Row, rectFAI12Col, rectFAI12Radian, rectFAI12Len1, rectFAI12Len2, MovementImageToImage, rectFAI12Row, rectFAI12Col, rectFAI12Radian, rectFAI12Len1, rectFAI12Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI12Row, rectFAI12Col, rectFAI12Radian, rectFAI12Len1, rectFAI12Len2, numSubRects, FAI12Threshold, 'first', ignorePortion, 'true', 1, 2, Width, Height, newWidth, 60, 30, lineX1FAI12, lineY1FAI12, lineX2FAI12, lineY2FAI12, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate TOP right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI12_LEN_P1, mapToWorld, mapToImage, 'false', FAI12_P1_LineStartX, FAI12_P1_LineStartY, FAI12_P1_LineEndX, FAI12_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI12_LEN_P2, mapToWorld, mapToImage, 'false', FAI12_P2_LineStartX, FAI12_P2_LineStartY, FAI12_P2_LineEndX, FAI12_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI12, lineX1FAI12, lineY2FAI12, lineX2FAI12, FAI12_P1_LineStartY, FAI12_P1_LineStartX, FAI12_P1_LineEndY, FAI12_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI12_P1, distancePixel)</l>
<c>****************</c>
<l>GenLineRegion (lineRegion1, lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, 5120, 5120)</l>
<l>gen_cross_contour_xld (Cross, rowIntersect, colIntersect, 300, Angle)</l>
<c>***************</c>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI12-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI12, lineX1FAI12, lineY2FAI12, lineX2FAI12, FAI12_P2_LineStartY, FAI12_P2_LineStartX, FAI12_P2_LineEndY, FAI12_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI12_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI12-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c>*********************************FAI16*************************</c>
<l>rectFAI16Row := 2276.47000000 - rowModel</l>
<l>rectFAI16Col := 992.65500000 - colModel</l>
<l>rectFAI16Radian := rad(-1)</l>
<l>rectFAI16Len1 := 175.95600000</l>
<l>rectFAI16Len2 := 391.84500000</l>
<c></c>
<l>AffineTransRect2 (rectFAI16Row, rectFAI16Col, rectFAI16Radian, rectFAI16Len1, rectFAI16Len2, MovementImageToImage, rectFAI16Row, rectFAI16Col, rectFAI16Radian, rectFAI16Len1, rectFAI16Len2)</l>
<l>gen_rectangle2 (Rectangle, rectFAI16Row, rectFAI16Col, rectFAI16Radian, rectFAI16Len1, rectFAI16Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI16Row, rectFAI16Col, rectFAI16Radian, rectFAI16Len1, rectFAI16Len2, numSubRects, FAI16Threshold, 'first', ignorePortion, 'true', 1, sigma2, Width, Height, newWidth, 60, 30, lineX1FAI16, lineY1FAI16, lineX2FAI16, lineY2FAI16, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base top</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI16_LEN_P1, mapToWorld, mapToImage, 'false', FAI16_P1_LineStartX, FAI16_P1_LineStartY, FAI16_P1_LineEndX, FAI16_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI16_LEN_P2, mapToWorld, mapToImage, 'false', FAI16_P2_LineStartX, FAI16_P2_LineStartY, FAI16_P2_LineEndX, FAI16_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI16, lineX1FAI16, lineY2FAI16, lineX2FAI16, FAI16_P1_LineStartY, FAI16_P1_LineStartX, FAI16_P1_LineEndY, FAI16_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI16_P1, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI16-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI16, lineX1FAI16, lineY2FAI16, lineX2FAI16, FAI16_P2_LineStartY, FAI16_P2_LineStartX, FAI16_P2_LineEndY, FAI16_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI16_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI16-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c>**************************FAI17*******************************</c>
<l>rectFAI17Row := 1109.27300000 - rowModel</l>
<l>rectFAI17Col := 2644.21000000 - colModel</l>
<l>rectFAI17Radian := rad(0.5)</l>
<l>rectFAI17Len1 := 191.07100000</l>
<l>rectFAI17Len2 := 356.53500000</l>
<l>AffineTransRect2 (rectFAI17Row, rectFAI17Col, rectFAI17Radian, rectFAI17Len1, rectFAI17Len2, MovementImageToImage, rectFAI17Row, rectFAI17Col, rectFAI17Radian, rectFAI17Len1, rectFAI17Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI17Row, rectFAI17Col, rectFAI17Radian, rectFAI17Len1, rectFAI17Len2, numSubRects, FAI17Threshold, 'first', ignorePortion, 'true', 1, sigma2, Width, Height, newWidth, 60, 30, lineX1FAI17, lineY1FAI17, lineX2FAI17, lineY2FAI17, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate top base</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI17_LEN_P1, mapToWorld, mapToImage, 'false', FAI17_P1_LineStartX, FAI17_P1_LineStartY, FAI17_P1_LineEndX, FAI17_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI17_LEN_P2, mapToWorld, mapToImage, 'false', FAI17_P2_LineStartX, FAI17_P2_LineStartY, FAI17_P2_LineEndX, FAI17_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI17, lineX1FAI17, lineY2FAI17, lineX2FAI17, FAI17_P1_LineStartY, FAI17_P1_LineStartX, FAI17_P1_LineEndY, FAI17_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI17_P1, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI17-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI17, lineX1FAI17, lineY2FAI17, lineX2FAI17, FAI17_P2_LineStartY, FAI17_P2_LineStartX, FAI17_P2_LineEndY, FAI17_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI17_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI17-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>********************************FAI19**************************</c>
<l>rectFAI19Row := 1278.78000000 - rowModel</l>
<l>rectFAI19Col := 4665.06000000 - colModel</l>
<l>rectFAI19Radian := rad(180)</l>
<l>rectFAI19Len1 := 172.44100000</l>
<l>rectFAI19Len2 := 573.70700000</l>
<l>AffineTransRect2 (rectFAI19Row, rectFAI19Col, rectFAI19Radian, rectFAI19Len1, rectFAI19Len2, MovementImageToImage, rectFAI19Row, rectFAI19Col, rectFAI19Radian, rectFAI19Len1, rectFAI19Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI19Row, rectFAI19Col, rectFAI19Radian, rectFAI19Len1, rectFAI19Len2, numSubRects, FAI19Threshold, 'first', 0.3, 'true', 1, sigma2, Width, Height, newWidth, 60, 30, lineX1FAI19, lineY1FAI19, lineX2FAI19, lineY2FAI19, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate top base</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI19_LEN_P1, mapToWorld, mapToImage, 'false', FAI19_P1_LineStartX, FAI19_P1_LineStartY, FAI19_P1_LineEndX, FAI19_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI19_LEN_P2, mapToWorld, mapToImage, 'false', FAI19_P2_LineStartX, FAI19_P2_LineStartY, FAI19_P2_LineEndX, FAI19_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI19, lineX1FAI19, lineY2FAI19, lineX2FAI19, FAI19_P1_LineStartY, FAI19_P1_LineStartX, FAI19_P1_LineEndY, FAI19_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI19_P1, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI19-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight]</l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* P2</c>
<l>intersection_lines (lineY1FAI19, lineX1FAI19, lineY2FAI19, lineX2FAI19, FAI19_P2_LineStartY, FAI19_P2_LineStartX, FAI19_P2_LineEndY, FAI19_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI19_P2, distancePixel)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI19-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight]</l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*****************************FAI20********************************</c>
<c>* 定圆心</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI20_LEN_Y, mapToWorld, mapToImage, 'false', FAI20_P2_LineStartX, FAI20_P2_LineStartY, FAI20_P2_LineEndX, FAI20_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI20_LEN_X, mapToWorld, mapToImage, 'true', FAI20V_P1_LineStartX, FAI20V_P1_LineStartY, FAI20V_P1_LineEndX, FAI20V_P1_LineEndY)</l>
<l>intersection_lines (FAI20_P2_LineStartY, FAI20_P2_LineStartX, FAI20_P2_LineEndY, FAI20_P2_LineEndX, FAI20V_P1_LineStartY, FAI20V_P1_LineStartX, FAI20V_P1_LineEndY, FAI20V_P1_LineEndX, rowCenterTop, colCenterTop, IsOverlapping2)</l>
<l>intersectXs := [intersectXs, colCenterTop]</l>
<l>intersectYs := [intersectYs, rowCenterTop]</l>
<c></c>
<l>rectFAI20TRRow := 268.18300000 -rowModel</l>
<l>rectFAI20TRCol := 4567.96000000 - colModel</l>
<l>rectFAI20TRRadian := rad(-125.84800000)</l>
<l>rectFAI20TRLen1 := 84.64630000</l>
<l>rectFAI20TRLen2 := 65.46210000</l>
<c></c>
<l>AffineTransRect2 (rectFAI20TRRow, rectFAI20TRCol, rectFAI20TRRadian, rectFAI20TRLen1, rectFAI20TRLen2, MovementImageToImage, rectFAI20TRRow, rectFAI20TRCol, rectFAI20TRRadian, rectFAI20TRLen1, rectFAI20TRLen2)</l>
<l>VisionProStyleFindLineOneStep_Pairs (Image, rect, lineRegion, rectFAI20TRRow, rectFAI20TRCol, rectFAI20TRRadian, rectFAI20TRLen1, rectFAI20TRLen2, 'negative', 6, [FAI20Threshold_up,FAI20Threshold_up], 5, sigma2, 'first', 'false', 0.3, 'first', 5, 20, 5120, 5120, 15, 5, 'false', XsUsed, YsUsed, XsIgnored, YsIgnored, lineX1FAI20TR, lineY1FAI20TR, lineX2FAI20TR, lineY2FAI20TR)</l>
<c></c>
<l>* VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'negative', rectFAI20TRRow, rectFAI20TRCol, rectFAI20TRRadian, rectFAI20TRLen1, rectFAI20TRLen2, 5, FAI20Threshold_up, 'first', 0.3, 'false', 3, sigma2, Width, Height, newWidth, 30, 15, lineX1FAI20TR, lineY1FAI20TR, lineX2FAI20TR, lineY2FAI20TR, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<l>rectFAI20BLRow := 2058.83000000 - rowModel</l>
<l>rectFAI20BLCol := 2763.07000000 - colModel</l>
<l>rectFAI20BLRadian := rad(48.47500000)</l>
<l>rectFAI20BLLen1 := 80.07090000</l>
<l>rectFAI20BLLen2 := 65.95030000</l>
<l>AffineTransRect2 (rectFAI20BLRow, rectFAI20BLCol, rectFAI20BLRadian, rectFAI20BLLen1, rectFAI20BLLen2, MovementImageToImage, rectFAI20BLRow, rectFAI20BLCol, rectFAI20BLRadian, rectFAI20BLLen1, rectFAI20BLLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'negative', rectFAI20BLRow, rectFAI20BLCol, rectFAI20BLRadian, rectFAI20BLLen1, rectFAI20BLLen2, 10, FAI20Threshold_down, 'first', 0, 'false', 1, sigma2, Width, Height, newWidth, 60, 30, lineX1FAI20BL, lineY1FAI20BL, lineX2FAI20BL, lineY2FAI20BL, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXused := [crossesXused, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* FAI20-1</c>
<l>ptX_TR :=(lineX1FAI20TR + lineX2FAI20TR) / 2.0</l>
<l>ptY_TR := (lineY1FAI20TR + lineY2FAI20TR) / 2.0</l>
<l>intersectXs := [intersectXs, ptX_TR]</l>
<l>intersectYs := [intersectYs, ptY_TR]</l>
<c></c>
<l>DistancePLInWorld (lineX1FAI20BL, lineY1FAI20BL, lineX2FAI20BL, lineY2FAI20BL, ptX_TR, ptY_TR, mapToWorld, distanceWorld, distancePixel)</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI20-P1', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<c>* FAI20-2</c>
<l>ptX_BL :=(lineX1FAI20BL + lineX2FAI20BL) / 2.0</l>
<l>ptY_BL := (lineY1FAI20BL + lineY2FAI20BL) / 2.0</l>
<l>intersectXs := [intersectXs, ptX_BL]</l>
<l>intersectYs := [intersectYs, ptY_BL]</l>
<c></c>
<l>ptX := (ptX_TR + ptX_BL) / 2.0</l>
<l>ptY := (ptY_TR + ptY_BL) / 2.0</l>
<c></c>
<l>PivotLineAroundPoint(lineRegion, lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colOrigin, rowOrigin, rad(45), 'right', 5120, 5120, outLineX1, outLineY1, outLineX2, outLineY2)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<l>DistancePLInWorld (outLineX1, outLineY1, outLineX2, outLineY2, ptX, ptY, mapToWorld, distanceWorld, distancePixel)</l>
<l>GetWeightByNamme (FAINames, FAIWeights, 'FAI20-P2', weight)</l>
<l>outputs := [outputs, distancePixel*weight] </l>
<l>outputsPixel := [outputsPixel, distancePixel]</l>
<c></c>
<l>numOutputs := |outputs|</l>
<l>numOutputPixels := |outputsPixel|</l>
<l>return ()</l>
</body>
<docu id="I94TopFaceMeasurement">
<parameters>
<parameter id="Biases"/>
<parameter id="FAINames"/>
<parameter id="FAIWeights"/>
<parameter id="FindLineRects"/>
<parameter id="Image"/>
<parameter id="ModelID"/>
<parameter id="crossesXIgnored"/>
<parameter id="crossesXused"/>
<parameter id="crossesYIgnored"/>
<parameter id="crossesYused"/>
<parameter id="intersectXs"/>
<parameter id="intersectYs"/>
<parameter id="lineRegions"/>
<parameter id="outputs"/>
<parameter id="outputsPixel"/>
<parameter id="thresholds"/>
<parameter id="xCoeff"/>
<parameter id="yCoeff"/>
</parameters>
</docu>
</procedure>
<procedure name="OffsetLineLeftRight">
<interface>
<ic>
<par name="x1" base_type="ctrl" dimension="0"/>
<par name="y1" base_type="ctrl" dimension="0"/>
<par name="x2" base_type="ctrl" dimension="0"/>
<par name="y2" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outX1" base_type="ctrl" dimension="0"/>
<par name="outY1" base_type="ctrl" dimension="0"/>
<par name="outX2" base_type="ctrl" dimension="0"/>
<par name="outY2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>xDiff := x2 - x1</l>
<l>yDiff := y2 - y1</l>
<c></c>
<l>m := xDiff / yDiff</l>
<c></c>
<l>b := x1 - m*y1</l>
<c></c>
<l>alpha := atan(m)</l>
<c></c>
<l>bIncre := offset / cos(alpha)</l>
<c></c>
<l>newB := b + bIncre</l>
<c></c>
<c>* outX = m * outY + newB</c>
<l>outY1 := y1</l>
<l>outY2 := y2</l>
<l>outX1 := m* outY1 + newB</l>
<l>outX2 := m* outY2 + newB</l>
<c></c>
<l>return ()</l>
</body>
<docu id="OffsetLineLeftRight">
<parameters>
<parameter id="offset"/>
<parameter id="outX1"/>
<parameter id="outX2"/>
<parameter id="outY1"/>
<parameter id="outY2"/>
<parameter id="x1"/>
<parameter id="x2"/>
<parameter id="y1"/>
<parameter id="y2"/>
</parameters>
</docu>
</procedure>
<procedure name="OffsetLineUpDown">
<interface>
<ic>
<par name="x1" base_type="ctrl" dimension="0"/>
<par name="y1" base_type="ctrl" dimension="0"/>
<par name="x2" base_type="ctrl" dimension="0"/>
<par name="y2" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outX1" base_type="ctrl" dimension="0"/>
<par name="outY1" base_type="ctrl" dimension="0"/>
<par name="outX2" base_type="ctrl" dimension="0"/>
<par name="outY2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>xDiff := x2 - x1</l>
<l>yDiff := y2 - y1</l>
<c></c>
<l>m := yDiff / xDiff</l>
<l>b := y2 - x2 * m</l>
<c></c>
<l>alpha := atan(m)</l>
<c></c>
<l>bIncre := offset / cos(alpha)</l>
<l>newB := b + bIncre</l>
<c></c>
<c>* sample output points</c>
<l>outX1 := x1</l>
<l>outY1 := m * outX1 + newB</l>
<l>outX2 := x2</l>
<l>outY2 := m * outX2 + newB</l>
<c></c>
<l>return ()</l>
</body>
<docu id="OffsetLineUpDown">
<parameters>
<parameter id="offset"/>
<parameter id="outX1"/>
<parameter id="outX2"/>
<parameter id="outY1"/>
<parameter id="outY2"/>
<parameter id="x1"/>
<parameter id="x2"/>
<parameter id="y1"/>
<parameter id="y2"/>
</parameters>
</docu>
</procedure>
<procedure name="_pinPointFindLine">
<interface>
<io>
<par name="inputImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="findLineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="newWidth" base_type="ctrl" dimension="0"/>
<par name="EdgesOnly" base_type="ctrl" dimension="0"/>
<par name="cannyHigh" base_type="ctrl" dimension="0"/>
<par name="cannyLow" base_type="ctrl" dimension="0"/>
<par name="sigma" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="RowBegin" base_type="ctrl" dimension="0"/>
<par name="ColBegin" base_type="ctrl" dimension="0"/>
<par name="RowEnd" base_type="ctrl" dimension="0"/>
<par name="ColEnd" base_type="ctrl" dimension="0"/>
<par name="EdgesX" base_type="ctrl" dimension="0"/>
<par name="EdgesY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>lineCenterX := (lineX1 + lineX2) / 2.0</l>
<l>lineCenterY := (lineY1 + lineY2) / 2.0</l>
<l>line_orientation (lineY1, lineX1, lineY2, lineX2, Phi)</l>
<l>xDirOld := cos(radian)</l>
<l>yDirOld := sin(radian)</l>
<c></c>
<l>xDirNew := cos(Phi + rad(90))</l>
<l>yDirNew := sin(Phi + rad(90))</l>
<c></c>
<l>if((xDirOld * xDirNew + yDirOld * yDirNew)&lt;0)</l>
<l>    yDirNew := -yDirNew</l>
<l>    xDirNew := -xDirNew</l>
<l>endif</l>
<c></c>
<l>newRadian := atan2(yDirNew, xDirNew)</l>
<c></c>
<l>distance_pp (lineY1, lineX1, lineY2, lineX2, newHeight)</l>
<c></c>
<l>gen_rectangle2 (findLineRegion, lineCenterY, lineCenterX, newRadian, newWidth, newHeight/2)</l>
<l>reduce_domain (inputImage, findLineRegion, ImageReduced)</l>
<l>edges_sub_pix(ImageReduced, Edges, 'canny', sigma, cannyLow, cannyHigh)</l>
<c></c>
<c></c>
<l>maxLength := 0</l>
<l>selectedIndex := 0</l>
<l>count_obj (Edges, numEdges)</l>
<l>if (numEdges &gt; 1)</l>
<l>    for Index := 1 to numEdges by 1</l>
<l>    select_obj (Edges, Edge, Index)</l>
<l>    length_xld (Edge,Length)</l>
<l>    if(Length &gt; maxLength)</l>
<l>        maxLength := Length</l>
<l>        selectedIndex := Index</l>
<l>    endif</l>
<l>endfor</l>
<l>select_obj (Edges, Edges, selectedIndex)</l>
<c></c>
<l>endif</l>
<c></c>
<c></c>
<l>if(EdgesOnly == 'true')</l>
<l>    get_contour_xld (Edges, EdgesY, EdgesX)</l>
<l>    return ()</l>
<l>endif</l>
<c></c>
<l>fit_line_contour_xld (Edges, 'tukey', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<c></c>
<l>if(|Dist| &gt; 1)</l>
<l>    tuple_sort_index (Dist, Indices)</l>
<l>    RowBegin := RowBegin[1]</l>
<l>    ColBegin := ColBegin[1]</l>
<l>    RowEnd := RowEnd[1]</l>
<l>    ColEnd := ColEnd[1]</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="_pinPointFindLine">
<parameters>
<parameter id="ColBegin"/>
<parameter id="ColEnd"/>
<parameter id="EdgesOnly">
<default_value>'false'</default_value>
<description lang="zh_CN">If true return edges only instead of end points</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="EdgesX"/>
<parameter id="EdgesY"/>
<parameter id="RowBegin"/>
<parameter id="RowEnd"/>
<parameter id="cannyHigh">
<sem_type>number</sem_type>
<values>
<item>60</item>
</values>
</parameter>
<parameter id="cannyLow">
<default_value>30</default_value>
<sem_type>real</sem_type>
</parameter>
<parameter id="findLineRegion"/>
<parameter id="inputImage"/>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
<parameter id="newWidth"/>
<parameter id="radian"/>
<parameter id="sigma"/>
</parameters>
</docu>
</procedure>
<procedure name="AngledLineThatPasses">
<interface>
<ic>
<par name="centerX" base_type="ctrl" dimension="0"/>
<par name="centerY" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="x1" base_type="ctrl" dimension="0"/>
<par name="y1" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>m := tan(radian)</l>
<l>b := centerY - m * centerX</l>
<c></c>
<l>x1 := centerX + 100</l>
<l>y1 := m * x1 + b</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="AngledLineThatPasses">
<parameters>
<parameter id="centerX"/>
<parameter id="centerY"/>
<parameter id="radian"/>
<parameter id="x1"/>
<parameter id="y1"/>
</parameters>
</docu>
</procedure>
<procedure name="_getUnmarkedBoundary">
<interface>
<ic>
<par name="boundarySearched" base_type="ctrl" dimension="0"/>
<par name="m" base_type="ctrl" dimension="0"/>
<par name="b" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="x" base_type="ctrl" dimension="0"/>
<par name="y" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="_getUnmarkedBoundary">
<parameters>
<parameter id="b"/>
<parameter id="boundarySearched"/>
<parameter id="imageHeight"/>
<parameter id="imageWidth"/>
<parameter id="m"/>
<parameter id="x"/>
<parameter id="y"/>
</parameters>
</docu>
</procedure>
<procedure name="_search_boundary">
<interface>
<ic>
<par name="boundariesToSearch" base_type="ctrl" dimension="0"/>
<par name="m" base_type="ctrl" dimension="0"/>
<par name="b" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="result" base_type="ctrl" dimension="0"/>
<par name="x" base_type="ctrl" dimension="0"/>
<par name="y" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* down</c>
<l>StringTupleContains(boundariesToSearch, 'down', hasElement)</l>
<l>StringTupleContains(boundariesToSearch, 'null', hasNull)</l>
<c></c>
<l>if(hasElement == 'true' or hasNull == 'true')</l>
<l>    y := imageHeight -1</l>
<l>    x := (y - b) / m</l>
<c></c>
<l>if(x&gt;=0 and x&lt; imageWidth)</l>
<l>    result := 'down'</l>
<l>    return ()</l>
<l>endif</l>
<l>endif</l>
<c></c>
<c>* up</c>
<l>StringTupleContains(boundariesToSearch, 'up', hasElement)</l>
<l>StringTupleContains(boundariesToSearch, 'null', hasNull)</l>
<c></c>
<l>if(hasElement == 'true' or hasNull == 'true')</l>
<l>    y := 0</l>
<l>    x := (y - b) / m</l>
<c></c>
<l>if(x&gt;=0 and x&lt; imageWidth)</l>
<l>    result := 'up'</l>
<l>    return ()</l>
<l>endif</l>
<l>endif</l>
<c></c>
<c>* left</c>
<l>StringTupleContains(boundariesToSearch, 'left', hasElement)</l>
<l>StringTupleContains(boundariesToSearch, 'null', hasNull)</l>
<c></c>
<l>if(hasElement == 'true' or hasNull == 'true')</l>
<l>    x := 0</l>
<l>    y := m*x + b</l>
<c></c>
<l>if(y&gt;=0 and y&lt; imageHeight)</l>
<l>    result := 'left'</l>
<l>    return ()</l>
<l>endif</l>
<l>endif</l>
<c></c>
<c></c>
<c>* right</c>
<l>StringTupleContains(boundariesToSearch, 'right', hasElement)</l>
<l>StringTupleContains(boundariesToSearch, 'null', hasNull)</l>
<c></c>
<l>if(hasElement == 'true' or hasNull == 'true')</l>
<l>    x := imageWidth - 1</l>
<l>    y := m*x + b</l>
<c></c>
<l>if(y&gt;=0 and y&lt; imageHeight)</l>
<l>    result := 'right'</l>
<l>    return ()</l>
<l>endif</l>
<l>endif</l>
<c></c>
<l>result := 'null'</l>
<c></c>
<l>return ()</l>
</body>
<docu id="_search_boundary">
<parameters>
<parameter id="b"/>
<parameter id="boundariesToSearch"/>
<parameter id="imageHeight"/>
<parameter id="imageWidth"/>
<parameter id="m"/>
<parameter id="result"/>
<parameter id="x"/>
<parameter id="y"/>
</parameters>
</docu>
</procedure>
<procedure name="StringTupleContains">
<interface>
<ic>
<par name="listOfString" base_type="ctrl" dimension="0"/>
<par name="targetString" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="hasElement" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>for i := 0 to |listOfString|-1 by 1</l>
<l>    if(listOfString[i] == targetString)</l>
<l>        hasElement := 'true'</l>
<l>        return ()</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>hasElement := 'false'</l>
<c></c>
<l>return ()</l>
</body>
<docu id="StringTupleContains">
<parameters>
<parameter id="hasElement">
<sem_type>string</sem_type>
</parameter>
<parameter id="listOfString"/>
<parameter id="targetString">
<sem_type>string</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="GetWeightByNamme">
<interface>
<ic>
<par name="nameList" base_type="ctrl" dimension="0"/>
<par name="weightList" base_type="ctrl" dimension="0"/>
<par name="name" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="weight" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>nameLen := |nameList|</l>
<l>weightLen := |weightList|</l>
<c></c>
<l>if(nameLen!= weightLen)</l>
<l>    throw ('nameLen != weightLen!!!!!!!!!')</l>
<l>endif</l>
<c></c>
<l>for i := 0 to nameLen-1 by 1</l>
<l>    if(nameList[i] == name)</l>
<l>        weight := weightList[i]</l>
<l>        return ()</l>
<l>    endif</l>
<c>    </c>
<l>endfor</l>
<c></c>
<l>throw ('Name does not exist')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GetWeightByNamme">
<parameters>
<parameter id="name"/>
<parameter id="nameList"/>
<parameter id="weight"/>
<parameter id="weightList"/>
</parameters>
</docu>
</procedure>
<procedure name="I94BottomViewMeasure">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="FindLineRegions" base_type="iconic" dimension="0"/>
<par name="LineRegions" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
<par name="XCoeff" base_type="ctrl" dimension="0"/>
<par name="YCoeff" base_type="ctrl" dimension="0"/>
<par name="FAINames" base_type="ctrl" dimension="0"/>
<par name="FAIWeights" base_type="ctrl" dimension="0"/>
<par name="FAIBiases" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="IntersectsX" base_type="ctrl" dimension="0"/>
<par name="IntersectsY" base_type="ctrl" dimension="0"/>
<par name="Outputs" base_type="ctrl" dimension="0"/>
<par name="OutputsPixel" base_type="ctrl" dimension="0"/>
<par name="PointsXUsed" base_type="ctrl" dimension="0"/>
<par name="PointsYUsed" base_type="ctrl" dimension="0"/>
<par name="PointsXIgnored" base_type="ctrl" dimension="0"/>
<par name="PointsYIgnored" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* TODO: make top axis as auxillary axis</c>
<c></c>
<l>modelRow := 1166.78</l>
<l>modelCol := 2205</l>
<c></c>
<l>find_shape_model (Image, ModelID, -0.39, 0.79, 0.2, 1, 0.5, 'least_squares', 0, 0.9, Row, Column, Angle, Score)</l>
<l>vector_angle_to_rigid (0, 0, 0, Row, Column, Angle, MovementOfItem)</l>
<l>dev_display (Image)</l>
<c></c>
<l>FAI21_P1_LEN := 20.362 / YCoeff</l>
<l>FAI21_P2_LEN := 25.362 / YCoeff</l>
<l>FAI21_P3_LEN := 30.362 / YCoeff</l>
<l>FAI21_MID_LEN := 9.299 / XCoeff</l>
<c></c>
<l>FAI23_P1_LEN := 5.299 / XCoeff</l>
<l>FAI23_P2_LEN := 9.299 / XCoeff</l>
<l>FAI23_P3_LEN := 13.299 / XCoeff</l>
<l>FAI23_MID_LEN := 25.362 / YCoeff</l>
<c></c>
<l>FAI24_P1_LEN := 6.705 / YCoeff</l>
<l>FAI24_P2_LEN := 7.885 / YCoeff</l>
<l>FAI24_P3_LEN := 9.065 / YCoeff</l>
<c></c>
<l>FAI26_LEN := 0.6 / XCoeff</l>
<c></c>
<l>FAI27_P1_LEN := 23.137 / XCoeff</l>
<l>FAI27_P2_LEN := 24.434 / XCoeff</l>
<l>FAI27_P3_LEN := 25.731 / XCoeff</l>
<c></c>
<c></c>
<l>FAI29_P1_LEN := 15.327 / YCoeff</l>
<l>FAI29_P2_LEN := 16.623 / YCoeff</l>
<l>FAI29_P3_LEN := 17.919 / YCoeff</l>
<c></c>
<c></c>
<l>FAI31_LEFT_LEN := 2.203 / XCoeff</l>
<l>FAI31_RIGHT_LEN := 16.395 / XCoeff</l>
<l>FAI31_CENTERY_LEN := 25.362 / YCoeff</l>
<l>FAI31_CENTERX_LEN := 9.299 / XCoeff</l>
<c></c>
<c></c>
<l>FAI32_X1_LEN := 5.5 / XCoeff</l>
<l>FAI32_X2_LEN := 13.2 / XCoeff</l>
<l>FAI32_Y1_LEN := 21.0 / YCoeff</l>
<l>FAI32_Y2_LEN := 30.1 / YCoeff</l>
<c></c>
<l>FAI33_V_LEN := 7.886 / YCoeff</l>
<l>FAI33_H_LEN := 9.299 / XCoeff</l>
<c></c>
<c></c>
<c></c>
<c></c>
<l>PointsXUsed := []</l>
<l>PointsYUsed := []</l>
<l>PointsXIgnored := []</l>
<l>PointsYIgnored := []</l>
<l>IntersectsX :=[]</l>
<l>IntersectsY := [] </l>
<c></c>
<l>Outputs := []</l>
<l>OutputsPixel := []</l>
<c></c>
<l>Threshold := 30</l>
<l>MapToWorld := 0</l>
<l>MapToImage := 0</l>
<l>sigma2 := 5</l>
<c></c>
<c>* Find top base line</c>
<l>row1TopBase := 137 - modelRow</l>
<l>col1TopBase := 2217 - modelCol</l>
<l>radianTopBase := rad(-91)</l>
<l>len1TopBase := 187</l>
<l>len2TopBase := 107</l>
<c></c>
<l>row1TopBase1 := 137 - modelRow</l>
<l>col1TopBase1 := 1628 - modelCol</l>
<l>radianTopBase1 := rad(-91)</l>
<l>len1TopBase1 := 187</l>
<l>len2TopBase1 := 107</l>
<c></c>
<l>row1TopBase2 := 137 - modelRow</l>
<l>col1TopBase2 := 2876 - modelCol</l>
<l>radianTopBase2 := rad(-91)</l>
<l>len1TopBase2 := 187</l>
<l>len2TopBase2 := 160</l>
<c></c>
<l>row1TopBase := [row1TopBase, row1TopBase1, row1TopBase2]</l>
<l>col1TopBase := [col1TopBase, col1TopBase1, col1TopBase2]</l>
<l>radianTopBase := [radianTopBase, radianTopBase1, radianTopBase2]</l>
<l>len1TopBase := [len1TopBase, len1TopBase1, len1TopBase2]</l>
<l>len2TopBase := [len2TopBase, len2TopBase1,len2TopBase2]</l>
<c></c>
<l>AffineTransRect2 (row1TopBase, col1TopBase, radianTopBase, len1TopBase, len2TopBase, MovementOfItem, row1TopBase, col1TopBase, radianTopBase, len1TopBase, len2TopBase)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegionTop, lineRegionTop, 'negative', row1TopBase, col1TopBase, radianTopBase, len1TopBase, len2TopBase, 10, [Threshold-10,Threshold-10,Threshold-10], 'first', 0.3, 'false', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c></c>
<c>* Find left base line</c>
<l>row1LeftBase := 2607 - modelRow</l>
<l>col1LeftBase := 995 - modelCol</l>
<l>radianLeftBase := rad(-1)</l>
<l>len1LeftBase := 441</l>
<l>len2LeftBase := 281</l>
<c></c>
<l>row1LeftBase1 := 4216 - modelRow</l>
<l>col1LeftBase1 := 995 - modelCol</l>
<l>radianLeftBase1 := rad(-1)</l>
<l>len1LeftBase1 := 441</l>
<l>len2LeftBase1 := 281</l>
<c></c>
<l>row1LeftBase := [row1LeftBase, row1LeftBase1]</l>
<l>col1LeftBase := [col1LeftBase, col1LeftBase1]</l>
<l>radianLeftBase := [radianLeftBase, radianLeftBase1]</l>
<l>len1LeftBase := [len1LeftBase, len1LeftBase1]</l>
<l>len2LeftBase := [len2LeftBase, len2LeftBase1]</l>
<c></c>
<l>AffineTransRect2 (row1LeftBase, col1LeftBase, radianLeftBase, len1LeftBase, len2LeftBase, MovementOfItem, row1LeftBase, col1LeftBase, radianLeftBase, len1LeftBase, len2LeftBase)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegionLeft, lineRegionLeft, 'negative', row1LeftBase, col1LeftBase, radianLeftBase, len1LeftBase, len2LeftBase, 10, [Threshold, Threshold], 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (findLineRegionTop, findLineRegionLeft, FindLineRegions)</l>
<l>concat_obj (lineRegionTop, lineRegionLeft, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c></c>
<c>*******************************FAI21*******************************</c>
<c>* left</c>
<l>row1FAI21LeftUpper := 2825 - modelRow</l>
<l>col1FAI21LeftUpper := 1033 - modelCol</l>
<l>radianFAI21LeftUpper := rad(178.5)</l>
<l>len1FAI21LeftUpper := 210</l>
<l>len2FAI21LeftUpper := 140</l>
<c></c>
<l>row1FAI21LeftLower := 4009 - modelRow</l>
<l>col1FAI21LeftLower := 1052 - modelCol</l>
<l>radianFAI21LeftLower := rad(178)</l>
<l>len1FAI21LeftLower :=210</l>
<l>len2FAI21LeftLower := 115</l>
<l>row1FAI21Left := [row1FAI21LeftUpper, row1FAI21LeftLower]</l>
<l>col1FAI21Left := [col1FAI21LeftUpper, col1FAI21LeftLower]</l>
<l>radianFAI21Left := [radianFAI21LeftUpper, radianFAI21LeftLower]</l>
<l>len1FAI21Left := [len1FAI21LeftUpper, len1FAI21LeftLower]</l>
<l>len2FAI21Left := [len2FAI21LeftUpper, len2FAI21LeftLower]</l>
<l>AffineTransRect2 (row1FAI21Left, col1FAI21Left, radianFAI21Left, len1FAI21Left, len2FAI21Left, MovementOfItem, row1FAI21Left, col1FAI21Left, radianFAI21Left, len1FAI21Left, len2FAI21Left)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'negative', row1FAI21Left, col1FAI21Left, radianFAI21Left, len1FAI21Left, len2FAI21Left, 10, [Threshold, Threshold], 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI21_LEFT, lineY1_FAI21_LEFT, lineX2_FAI21_LEFT, lineY2_FAI21_LEFT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c>* right</c>
<l>row1FAI21RightUpper := 2869 - modelRow</l>
<l>col1FAI21RightUpper := 3305 - modelCol</l>
<l>radianFAI21RightUpper := rad(-1.5)</l>
<l>len1FAI21RightUpper := 243</l>
<l>len2FAI21RightUpper := 121</l>
<c></c>
<l>row1FAI21RightLower := 4034 - modelRow</l>
<l>col1FAI21RightLower := 3285 - modelCol</l>
<l>radianFAI21RightLower := rad(-1)</l>
<l>len1FAI21RightLower := 243</l>
<l>len2FAI21RightLower := 121</l>
<c></c>
<l>row1FAI21Right := [row1FAI21RightUpper, row1FAI21RightLower]</l>
<l>col1FAI21Right := [col1FAI21RightUpper, col1FAI21RightLower]</l>
<l>radianFAI21Right := [radianFAI21RightUpper, radianFAI21RightLower]</l>
<l>len1FAI21Right := [len1FAI21RightUpper, len1FAI21RightLower]</l>
<l>len2FAI21Right := [len2FAI21RightUpper, len2FAI21RightLower]</l>
<l>AffineTransRect2 (row1FAI21Right, col1FAI21Right, radianFAI21Right, len1FAI21Right, len2FAI21Right, MovementOfItem, row1FAI21Right, col1FAI21Right, radianFAI21Right, len1FAI21Right, len2FAI21Right)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'negative', row1FAI21Right, col1FAI21Right, radianFAI21Right, len1FAI21Right, len2FAI21Right, 10, [Threshold, Threshold], 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI21_Right, lineY1_FAI21_Right, lineX2_FAI21_Right, lineY2_FAI21_Right, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c>* Mid</c>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI21_P1_LEN, MapToWorld, MapToImage, 'false', X1_FAI21_LINE_H_P1, Y1_FAI21_LINE_H_P1, X2_FAI21_LINE_H_P1, Y2_FAI21_LINE_H_P1)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI21_P3_LEN, MapToWorld, MapToImage, 'false', X1_FAI21_LINE_H_P3, Y1_FAI21_LINE_H_P3, X2_FAI21_LINE_H_P3, Y2_FAI21_LINE_H_P3)</l>
<c></c>
<c>* Left intersections and distances</c>
<l>intersection_lines (lineY1_FAI21_LEFT, lineX1_FAI21_LEFT, lineY2_FAI21_LEFT, lineX2_FAI21_LEFT, Y1_FAI21_LINE_H_P1, X1_FAI21_LINE_H_P1, Y2_FAI21_LINE_H_P1, X2_FAI21_LINE_H_P1, intersectY_LEFT, intersectX_LEFT, IsOverlapping)</l>
<l>intersection_lines (lineY1_FAI21_Right, lineX1_FAI21_Right, lineY2_FAI21_Right, lineX2_FAI21_Right, Y1_FAI21_LINE_H_P1, X1_FAI21_LINE_H_P1, Y2_FAI21_LINE_H_P1, X2_FAI21_LINE_H_P1, intersectY_RIGHT, intersectX_RIGHT, IsOverlapping)</l>
<l>distance_pp (intersectY_LEFT, intersectX_LEFT, intersectY_RIGHT, intersectX_RIGHT, Distance)</l>
<l>IntersectsX := [IntersectsX, intersectX_LEFT]</l>
<l>IntersectsY := [IntersectsY, intersectY_LEFT]</l>
<l>IntersectsX := [IntersectsX, intersectX_RIGHT]</l>
<l>IntersectsY := [IntersectsY, intersectY_RIGHT]</l>
<l>Outputs := [Outputs, Distance*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c></c>
<l>intersection_lines (lineY1_FAI21_LEFT, lineX1_FAI21_LEFT, lineY2_FAI21_LEFT, lineX2_FAI21_LEFT, Y1_FAI21_LINE_H_P3, X1_FAI21_LINE_H_P3, Y2_FAI21_LINE_H_P3, X2_FAI21_LINE_H_P3, intersectY_LEFT, intersectX_LEFT, IsOverlapping)</l>
<l>intersection_lines (lineY1_FAI21_Right, lineX1_FAI21_Right, lineY2_FAI21_Right, lineX2_FAI21_Right, Y1_FAI21_LINE_H_P3, X1_FAI21_LINE_H_P3, Y2_FAI21_LINE_H_P3, X2_FAI21_LINE_H_P3, intersectY_RIGHT, intersectX_RIGHT, IsOverlapping)</l>
<l>distance_pp (intersectY_LEFT, intersectX_LEFT, intersectY_RIGHT, intersectX_RIGHT, Distance)</l>
<l>IntersectsX := [IntersectsX, intersectX_LEFT]</l>
<l>IntersectsY := [IntersectsY, intersectY_LEFT]</l>
<l>IntersectsX := [IntersectsX, intersectX_RIGHT]</l>
<l>IntersectsY := [IntersectsY, intersectY_RIGHT]</l>
<l>Outputs := [Outputs, Distance*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c></c>
<c>*************************FAI23****************************</c>
<c>* Top line</c>
<l>rectX1 := 2210 - modelCol</l>
<l>rectY1 := 2210 - modelRow</l>
<l>rectRadian := rad(-91)</l>
<l>rectLen1 :=230</l>
<l>rectLen2 :=549</l>
<c></c>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold + 10, 'first', 0.2, 'false', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI23_TOP, lineY1_FAI23_TOP, lineX2_FAI23_TOP, lineY2_FAI23_TOP, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c>* Bottom line</c>
<l>rect1X1 := 1602 - modelCol</l>
<l>rect1Y1 := 4603 - modelRow</l>
<l>rect1Radian := rad(-90)</l>
<l>rect1Len1 :=150</l>
<l>rect1Len2 :=102</l>
<c></c>
<l>rect2X1 := 2178 - modelCol</l>
<l>rect2Y1 := 4617 - modelRow</l>
<l>rect2Radian := rad(-90)</l>
<l>rect2Len1 :=150</l>
<l>rect2Len2 :=150</l>
<c></c>
<l>rect3X1 := 2709 - modelCol</l>
<l>rect3Y1 := 4623 - modelRow</l>
<l>rect3Radian := rad(-90)</l>
<l>rect3Len1 :=150</l>
<l>rect3Len2 :=102</l>
<c></c>
<l>rectX1 := [rect1X1, rect2X1, rect3X1]</l>
<l>rectY1 := [rect1Y1, rect2Y1, rect3Y1]</l>
<l>rectRadian := [rect1Radian, rect2Radian, rect3Radian]</l>
<l>rectLen1 :=[rect1Len1, rect2Len1, rect3Len1]</l>
<l>rectLen2 :=[rect1Len2, rect2Len2, rect3Len2]</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'negative', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, [Threshold,Threshold,Threshold], 'first', 0.2, 'false', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI23_BOTTOM, lineY1_FAI23_BOTTOM, lineX2_FAI23_BOTTOM, lineY2_FAI23_BOTTOM, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c>* Intersection points</c>
<l>*TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI23_MID_LEN, MapToWorld, MapToImage, 'false', X1_FAI23_LINE_H, Y1_FAI23_LINE_H, X2_FAI23_LINE_H, Y2_FAI23_LINE_H)</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI23_P1_LEN, MapToWorld, MapToImage, 'true', X1_FAI23_P1, Y1_FAI23_P1, X2_FAI23_P1, Y2_FAI23_P1)</l>
<l>*TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI23_P2_LEN, MapToWorld, MapToImage, 'true', X1_FAI23_P2, Y1_FAI23_P2, X2_FAI23_P2, Y2_FAI23_P2)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI23_P3_LEN, MapToWorld, MapToImage, 'true', X1_FAI23_P3, Y1_FAI23_P3, X2_FAI23_P3, Y2_FAI23_P3)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>* BOTTOM intersections and distances</c>
<l>intersection_lines (lineY1_FAI23_TOP, lineX1_FAI23_TOP, lineY2_FAI23_TOP, lineX2_FAI23_TOP, Y1_FAI23_P1, X1_FAI23_P1, Y2_FAI23_P1, X2_FAI23_P1, intersectY_TOP, intersectX_TOP, IsOverlapping)</l>
<l>intersection_lines (lineY1_FAI23_BOTTOM, lineX1_FAI23_BOTTOM, lineY2_FAI23_BOTTOM, lineX2_FAI23_BOTTOM, Y1_FAI23_P1, X1_FAI23_P1, Y2_FAI23_P1, X2_FAI23_P1, intersectY_BOTTOM, intersectX_BOTTOM, IsOverlapping)</l>
<l>distance_pp (intersectY_TOP, intersectX_TOP, intersectY_BOTTOM, intersectX_BOTTOM, Distance)</l>
<l>IntersectsX := [IntersectsX, intersectX_TOP]</l>
<l>IntersectsY := [IntersectsY, intersectY_TOP]</l>
<l>IntersectsX := [IntersectsX, intersectX_BOTTOM]</l>
<l>IntersectsY := [IntersectsY, intersectY_BOTTOM]</l>
<l>Outputs := [Outputs, Distance*YCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c></c>
<l>intersection_lines (lineY1_FAI23_TOP, lineX1_FAI23_TOP, lineY2_FAI23_TOP, lineX2_FAI23_TOP, Y1_FAI23_P3, X1_FAI23_P3, Y2_FAI23_P3, X2_FAI23_P3, intersectY_TOP, intersectX_TOP, IsOverlapping)</l>
<l>intersection_lines (lineY1_FAI23_BOTTOM, lineX1_FAI23_BOTTOM, lineY2_FAI23_BOTTOM, lineX2_FAI23_BOTTOM, Y1_FAI23_P3, X1_FAI23_P3, Y2_FAI23_P3, X2_FAI23_P3, intersectY_BOTTOM, intersectX_BOTTOM, IsOverlapping)</l>
<l>distance_pp (intersectY_TOP, intersectX_TOP, intersectY_BOTTOM, intersectX_BOTTOM, Distance)</l>
<l>IntersectsX := [IntersectsX, intersectX_TOP]</l>
<l>IntersectsY := [IntersectsY, intersectY_TOP]</l>
<l>IntersectsX := [IntersectsX, intersectX_BOTTOM]</l>
<l>IntersectsY := [IntersectsY, intersectY_BOTTOM]</l>
<l>Outputs := [Outputs, Distance*YCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c>******************************FAI24************************</c>
<l>rectX1 := 1429 - modelCol</l>
<l>rectY1 := 1148 - modelRow</l>
<l>rectRadian := rad(-1)</l>
<l>rectLen1 :=153</l>
<l>rectLen2 :=140</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI24_LEFT, lineY1_FAI24_LEFT, lineX2_FAI24_LEFT, lineY2_FAI24_LEFT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<l>rectX1 := 2991 - modelCol</l>
<l>rectY1 := 1186 - modelRow</l>
<l>rectRadian := rad(179)</l>
<l>rectLen1 :=147</l>
<l>rectLen2 :=140</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI24_RIGHT, lineY1_FAI24_RIGHT, lineX2_FAI24_RIGHT, lineY2_FAI24_RIGHT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI24_P2_LEN, MapToWorld, MapToImage, 'false', X1_FAI24_LINE_H_P2, Y1_FAI24_LINE_H_P2, X2_FAI24_LINE_H_P2, Y2_FAI24_LINE_H_P2)</l>
<c></c>
<c></c>
<l>intersection_lines (lineY1_FAI24_LEFT, lineX1_FAI24_LEFT, lineY2_FAI24_LEFT, lineX2_FAI24_LEFT, Y1_FAI24_LINE_H_P2, X1_FAI24_LINE_H_P2, Y2_FAI24_LINE_H_P2, X2_FAI24_LINE_H_P2, intersectY_LEFT, intersectX_LEFT, IsOverlapping)</l>
<l>intersection_lines (lineY1_FAI24_RIGHT, lineX1_FAI24_RIGHT, lineY2_FAI24_RIGHT, lineX2_FAI24_RIGHT, Y1_FAI24_LINE_H_P2, X1_FAI24_LINE_H_P2, Y2_FAI24_LINE_H_P2, X2_FAI24_LINE_H_P2, intersectY_RIGHT, intersectX_RIGHT, IsOverlapping)</l>
<l>distance_pp (intersectY_LEFT, intersectX_LEFT, intersectY_RIGHT, intersectX_RIGHT, Distance)</l>
<l>IntersectsX := [IntersectsX, intersectX_LEFT]</l>
<l>IntersectsY := [IntersectsY, intersectY_LEFT]</l>
<l>IntersectsX := [IntersectsX, intersectX_RIGHT]</l>
<l>IntersectsY := [IntersectsY, intersectY_RIGHT]</l>
<l>Outputs := [Outputs, Distance*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c></c>
<c></c>
<c>****************************FAI25************************</c>
<l>rectX1 := 2195 - modelCol</l>
<l>rectY1 := 1202 - modelRow</l>
<l>rectRadian := rad(-90)</l>
<l>rectLen1 :=900</l>
<l>rectLen2 :=600</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>gen_rectangle2 (ROI_0, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>reduce_domain (Image, ROI_0, ImageReduced1)</l>
<l>mean_image (ImageReduced1, ImageMean1, 9, 9)</l>
<l>threshold (ImageMean1, mask, 70, 255)</l>
<l>reduce_domain (Image, mask, ImageReduced2)</l>
<l>edges_sub_pix (ImageReduced2, Edges2, 'canny', 3, 15, 30)</l>
<l>select_contours_xld (Edges2, SelectedContours, 'contour_length', 500, 999999, -0.5, 0.5)</l>
<l>union_cocircular_contours_xld (SelectedContours, UnionContours, rad(180), rad(5), rad(180), 2000, 10, 50, 'true', 3)</l>
<l>fit_circle_contour_xld (UnionContours, 'algebraic', -1, 0, 0, 3, 2, Row, Column, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>gen_circle_contour_xld(ContCircle, Row, Column, Radius, StartPhi, StartPhi + rad(360), 'positive', 1)</l>
<c></c>
<l>gen_circle (Circle, Row, Column, Radius)</l>
<l>concat_obj (LineRegions, Circle, LineRegions)</l>
<l>diameterPixel := Radius * 2</l>
<l>Outputs := [Outputs, diameterPixel*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, diameterPixel]</l>
<c></c>
<l>distance_pl (Row, Column, lineY1TopBase, lineX1TopBase, lineY2TopBase, lineX2TopBase, DistancePixelY)</l>
<l>distance_pl (Row, Column, lineY1LeftBase, lineX1LeftBase, lineY2LeftBase, lineX2LeftBase, DistancePixelX)</l>
<l>distance := sqrt(DistancePixelY * DistancePixelY + DistancePixelX * DistancePixelX)</l>
<l>Outputs := [Outputs, distance*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distance]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>******************************FAI26***********************</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1_FAI24_LEFT, lineY1_FAI24_LEFT, lineX2_FAI24_LEFT, lineY2_FAI24_LEFT, FAI26_LEN, MapToWorld, MapToImage, 'true', X1_FAI26_LEFT, Y1_FAI26_LEFT, X2_FAI26_LEFT, Y2_FAI26_LEFT)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1_FAI24_RIGHT, lineY1_FAI24_RIGHT, lineX2_FAI24_RIGHT, lineY2_FAI24_RIGHT, -FAI26_LEN, MapToWorld, MapToImage, 'true', X1_FAI26_RIGHT, Y1_FAI26_RIGHT, X2_FAI26_RIGHT, Y2_FAI26_RIGHT)</l>
<l>GenLineRegion (lineRegion1, X1_FAI26_LEFT, Y1_FAI26_LEFT, X2_FAI26_LEFT, Y2_FAI26_LEFT, 5120, 5120)</l>
<c></c>
<c>* top left point</c>
<l>rectX1 := 1500 - modelCol</l>
<l>rectY1 := 941 - modelRow</l>
<l>rectRadian := rad(0)</l>
<l>rectLen1 :=256</l>
<l>rectLen2 :=160</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_FAI26_TL, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>reduce_domain (Image, ROI_FAI26_TL, ImageReduced)</l>
<l>edges_sub_pix (ImageReduced, Edges1, 'canny', 1, 20, 40)</l>
<l>LongestXLD (Edges1, Edges1)</l>
<l>intersection_line_contour_xld (Edges1, Y1_FAI26_LEFT, X1_FAI26_LEFT, Y2_FAI26_LEFT, X2_FAI26_LEFT, rowTL_FAI26, colTL_FAI26, IsOverlapping3)</l>
<l>IntersectsX := [IntersectsX, colTL_FAI26]</l>
<l>IntersectsY := [IntersectsY, rowTL_FAI26]</l>
<l>gen_cross_contour_xld (Cross1, rowTL_FAI26, colTL_FAI26, 100, 0)</l>
<c></c>
<c>* bottom left point</c>
<l>rectX1 := 1467 - modelCol</l>
<l>rectY1 := 1372 - modelRow</l>
<l>rectRadian := rad(0)</l>
<l>rectLen1 :=135</l>
<l>rectLen2 :=80</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_FAI26_BL, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>reduce_domain (Image, ROI_FAI26_BL, ImageReduced)</l>
<l>edges_sub_pix (ImageReduced, Edges1, 'canny', 1, 20, 40)</l>
<l>LongestXLD (Edges1, Edges1)</l>
<l>intersection_line_contour_xld (Edges1, Y1_FAI26_LEFT, X1_FAI26_LEFT, Y2_FAI26_LEFT, X2_FAI26_LEFT, rowBL_FAI26, colBL_FAI26, IsOverlapping3)</l>
<l>IntersectsX := [IntersectsX, colBL_FAI26]</l>
<l>IntersectsY := [IntersectsY, rowBL_FAI26]</l>
<l>gen_cross_contour_xld (Cross2, rowBL_FAI26, colBL_FAI26, 100, 100)</l>
<c></c>
<c>* top RIGHT point</c>
<l>rectX1 := 2918 - modelCol</l>
<l>rectY1 := 965 - modelRow</l>
<l>rectRadian := rad(0)</l>
<l>rectLen1 :=217</l>
<l>rectLen2 :=134</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_FAI26_TR, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>reduce_domain (Image, ROI_FAI26_TR, ImageReduced)</l>
<l>edges_sub_pix (ImageReduced, Edges1, 'canny', 1, 20, 40)</l>
<l>LongestXLD (Edges1, Edges1)</l>
<l>intersection_line_contour_xld (Edges1, Y1_FAI26_RIGHT, X1_FAI26_RIGHT, Y2_FAI26_RIGHT, X2_FAI26_RIGHT, rowTR_FAI26, colTR_FAI26, IsOverlapping3)</l>
<l>IntersectsX := [IntersectsX, colTR_FAI26]</l>
<l>IntersectsY := [IntersectsY, rowTR_FAI26]</l>
<l>gen_cross_contour_xld (Cross3, rowTR_FAI26, colTR_FAI26, 100, 0)</l>
<c></c>
<c>* bottom RIGHT point</c>
<l>rectX1 := 2888 - modelCol</l>
<l>rectY1 := 1416 - modelRow</l>
<l>rectRadian := rad(0)</l>
<l>rectLen1 :=217</l>
<l>rectLen2 :=134</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_FAI26_BR, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>reduce_domain (Image, ROI_FAI26_BR, ImageReduced)</l>
<l>edges_sub_pix (ImageReduced, Edges1, 'canny', 1, 20, 40)</l>
<l>LongestXLD (Edges1, Edges1)</l>
<l>intersection_line_contour_xld (Edges1, Y1_FAI26_RIGHT, X1_FAI26_RIGHT, Y2_FAI26_RIGHT, X2_FAI26_RIGHT, rowBR_FAI26, colBR_FAI26, IsOverlapping3)</l>
<l>IntersectsX := [IntersectsX, colBR_FAI26]</l>
<l>IntersectsY := [IntersectsY, rowBR_FAI26]</l>
<c></c>
<l>angle_ll (rowTL_FAI26, colTL_FAI26, rowBL_FAI26, colBL_FAI26, lineY1LeftBase, lineX1LeftBase, lineY2LeftBase, lineX2LeftBase, Angle)</l>
<l>distance_pp (rowTL_FAI26, colTL_FAI26, rowBL_FAI26, colBL_FAI26, Distance)</l>
<l>distPixel := Distance * cos(Angle)</l>
<l>Outputs := [Outputs, distPixel*YCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distPixel]</l>
<c></c>
<l>angle_ll (rowTR_FAI26, colTR_FAI26, rowBR_FAI26, colBR_FAI26, lineY1LeftBase, lineX1LeftBase, lineY2LeftBase, lineX2LeftBase, Angle)</l>
<l>distance_pp (rowTR_FAI26, colTR_FAI26, rowBR_FAI26, colBR_FAI26, Distance)</l>
<l>distPixel := Distance * cos(Angle)</l>
<l>Outputs := [Outputs, distPixel*YCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distPixel]</l>
<c>***********************FAI27***************************</c>
<c>* Top line</c>
<l>rectX1 := 4137 - modelCol</l>
<l>rectY1 := 1770 - modelRow</l>
<l>rectRadian := rad(-90)</l>
<l>rectLen1 :=108</l>
<l>rectLen2 :=144</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'false', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI27_TOP, lineY1_FAI27_TOP, lineX2_FAI27_TOP, lineY2_FAI27_TOP, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c>* Bottom line</c>
<c></c>
<l>rectX1 := 4129 - modelCol</l>
<l>rectY1 := 2862 - modelRow</l>
<l>rectRadian := rad(90)</l>
<l>rectLen1 :=121</l>
<l>rectLen2 :=150</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'false', 1, sigma2, 5120, 5120, 5, 40, 20, lineX1_FAI27_BOTTOM, lineY1_FAI27_BOTTOM, lineX2_FAI27_BOTTOM, lineY2_FAI27_BOTTOM, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c>* Intersection points</c>
<l>rectX1 := 3755 - modelCol</l>
<l>rectY1 := 1945 - modelRow</l>
<l>rectRadian := rad(-44)</l>
<l>rectLen1 :=188</l>
<l>rectLen2 :=194</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_TL, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>rectX1 := 4521 - modelCol</l>
<l>rectY1 := 2703 - modelRow</l>
<l>rectRadian := rad(-44)</l>
<l>rectLen1 :=195</l>
<l>rectLen2 :=194</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_BR, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>rectX1 := 4536 - modelCol</l>
<l>rectY1 := 1938 - modelRow</l>
<l>rectRadian := rad(-44)</l>
<l>rectLen1 :=188</l>
<l>rectLen2 :=194</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_TR, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>rectX1 := 3755 - modelCol</l>
<l>rectY1 := 2696 - modelRow</l>
<l>rectRadian := rad(-44)</l>
<l>rectLen1 :=188</l>
<l>rectLen2 :=194</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_BL, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>union2(ROI_TL, ROI_BR, ROI_MAIN_DIR)</l>
<l>union2 (ROI_TR, ROI_BL, ROI_VICE_DIR)</l>
<l>union2 (ROI_MAIN_DIR, ROI_VICE_DIR, ROI)</l>
<c></c>
<l>rectX1 := 4142 - modelCol</l>
<l>rectY1 := 2289 - modelRow</l>
<l>rectRadian := rad(-90)</l>
<l>rectLen1 :=673</l>
<l>rectLen2 :=616</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>gen_rectangle2 (ROI_Threshold, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>reduce_domain (Image, ROI_Threshold, ImageThreshold)</l>
<l>mean_image (ImageThreshold, ImageMean, 11, 11)</l>
<l>threshold (ImageMean, Region1, 180, 255)</l>
<l>connection (Region1, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 400000, 99999999)</l>
<l>select_shape (SelectedRegions, SelectedRegions1, 'roundness', 'and', 0.92, 10)</l>
<l>dilation_circle (SelectedRegions1, RegionDilation, 35)</l>
<c></c>
<l>intersection (ROI, RegionDilation, ROI_INTERSECTION)</l>
<c></c>
<l>reduce_domain (Image, ROI_INTERSECTION, image_intersection)</l>
<l>edges_sub_pix (image_intersection, Edges, 'canny', 1, 15, 30)</l>
<l>union_cocircular_contours_xld (Edges, UnionContours1, rad(180), rad(5), rad(180), 2000, 10, 10, 'true', 3)</l>
<l>select_shape_xld (UnionContours1, SelectedXLD, 'outer_radius', 'and', 200, 1000)</l>
<l>fit_circle_contour_xld (SelectedXLD, 'algebraic', -1, 0, 0, 3, 2, rowRightCircle, colRightCircle, radRightCircle, StartPhi1, EndPhi1, PointOrder1)</l>
<l>gen_circle (Circle1, rowRightCircle, colRightCircle, radRightCircle)</l>
<l>concat_obj (LineRegions, Circle1, LineRegions)</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI27_P2_LEN, MapToWorld, MapToImage, 'true', X1_FAI27_P2, Y1_FAI27_P2, X2_FAI27_P2, Y2_FAI27_P2)</l>
<c></c>
<l>intersection_lines (lineY1_FAI27_TOP, lineX1_FAI27_TOP, lineY2_FAI27_TOP, lineX2_FAI27_TOP, Y1_FAI27_P2, X1_FAI27_P2, Y2_FAI27_P2, X2_FAI27_P2, intersectY, intersectX, IsOverlapping)</l>
<l>IntersectsX := [IntersectsX, intersectX]</l>
<l>IntersectsY := [IntersectsY, intersectY]</l>
<l>distance_pp (rowRightCircle, colRightCircle, intersectY, intersectX, distancePixel)</l>
<l>angle_ll (lineY1LeftBase, lineX1LeftBase, lineY2LeftBase, lineX2LeftBase, intersectY, intersectX, rowRightCircle, colRightCircle, Angle)</l>
<l>distancePixel := distancePixel * abs(cos(Angle))</l>
<l>Outputs := [Outputs, distancePixel*YCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c></c>
<l>intersection_lines (lineY1_FAI27_BOTTOM, lineX1_FAI27_BOTTOM, lineY2_FAI27_BOTTOM, lineX2_FAI27_BOTTOM, Y1_FAI27_P2, X1_FAI27_P2, Y2_FAI27_P2, X2_FAI27_P2, intersectY, intersectX, IsOverlapping)</l>
<l>IntersectsX := [IntersectsX, intersectX]</l>
<l>IntersectsY := [IntersectsY, intersectY]</l>
<c>* distance p2 bottom</c>
<l>distance_pp (rowRightCircle, colRightCircle, intersectY, intersectX, distancePixel)</l>
<l>angle_ll (lineY1LeftBase, lineX1LeftBase, lineY2LeftBase, lineX2LeftBase, rowRightCircle, colRightCircle, intersectY, intersectX, Angle)</l>
<l>distancePixel := distancePixel * abs(cos(Angle))</l>
<l>Outputs := [Outputs, distancePixel*YCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distancePixel]</l>
<c></c>
<c></c>
<c>*******************FAI28***********************</c>
<l>diameterPixel := radRightCircle * 2</l>
<l>Outputs := [Outputs, diameterPixel*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, diameterPixel]</l>
<c></c>
<l>distance_pl (rowRightCircle, colRightCircle, lineY1LeftBase, lineX1LeftBase, lineY2LeftBase, lineX2LeftBase, DistanceX)</l>
<l>distance_pl (rowRightCircle, colRightCircle, lineY1TopBase, lineX1TopBase, lineY2TopBase, lineX2TopBase, DistanceY)</l>
<l>distancePixel := sqrt(DistanceX * DistanceX + DistanceY * DistanceY)</l>
<l>Outputs := [Outputs, distancePixel*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distancePixel]</l>
<c></c>
<c>********************************FAI29*****************************</c>
<l>rectX1 := 3592 - modelCol</l>
<l>rectY1 := 2306 - modelRow</l>
<l>rectRadian := rad(0)</l>
<l>rectLen1 :=173</l>
<l>rectLen2 :=135</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI29_LEFT, lineY1_FAI29_LEFT, lineX2_FAI29_LEFT, lineY2_FAI29_LEFT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<l>rectX1 := 4675 - modelCol</l>
<l>rectY1 := 2331 - modelRow</l>
<l>rectRadian := rad(0)</l>
<l>rectLen1 :=173</l>
<l>rectLen2 :=122</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'negative', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold-10, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 40, 20, lineX1_FAI29_RIGHT, lineY1_FAI29_RIGHT, lineX2_FAI29_RIGHT, lineY2_FAI29_RIGHT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI29_P2_LEN, MapToWorld, MapToImage, 'false', X1_FAI29_LINE_H_P2, Y1_FAI29_LINE_H_P2, X2_FAI29_LINE_H_P2, Y2_FAI29_LINE_H_P2)</l>
<c></c>
<c></c>
<c>* Left intersections and distances</c>
<c></c>
<l>intersection_lines (lineY1_FAI29_LEFT, lineX1_FAI29_LEFT, lineY2_FAI29_LEFT, lineX2_FAI29_LEFT, Y1_FAI29_LINE_H_P2, X1_FAI29_LINE_H_P2, Y2_FAI29_LINE_H_P2, X2_FAI29_LINE_H_P2, intersectY, intersectX, IsOverlapping)</l>
<l>IntersectsX := [IntersectsX, intersectX]</l>
<l>IntersectsY := [IntersectsY, intersectY]</l>
<l>distance_pp (rowRightCircle, colRightCircle, intersectY, intersectX, distancePixel)</l>
<l>angle_ll (lineY1TopBase, lineX1TopBase, lineY2TopBase, lineX2TopBase, rowRightCircle, colRightCircle, intersectY, intersectX, Angle)</l>
<l>distancePixel := distancePixel * abs(cos(Angle))</l>
<l>Outputs := [Outputs, distancePixel*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distancePixel]</l>
<c></c>
<c>* RIGHT intersections and distances</c>
<l>intersection_lines (lineY1_FAI29_RIGHT, lineX1_FAI29_RIGHT, lineY2_FAI29_RIGHT, lineX2_FAI29_RIGHT, Y1_FAI29_LINE_H_P2, X1_FAI29_LINE_H_P2, Y2_FAI29_LINE_H_P2, X2_FAI29_LINE_H_P2, intersectY, intersectX, IsOverlapping)</l>
<l>IntersectsX := [IntersectsX, intersectX]</l>
<l>IntersectsY := [IntersectsY, intersectY]</l>
<l>distance_pp (rowRightCircle, colRightCircle, intersectY, intersectX, distancePixel)</l>
<l>angle_ll (lineY1TopBase, lineX1TopBase, lineY2TopBase, lineX2TopBase, rowRightCircle, colRightCircle, intersectY, intersectX, Angle)</l>
<l>distancePixel := distancePixel * abs(cos(Angle))</l>
<l>Outputs := [Outputs, distancePixel*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, distancePixel]</l>
<c>**************************FAI31**********************************</c>
<l>rectX1 := 1282 - modelCol</l>
<l>rectY1 := 2396 - modelRow</l>
<l>rectRadian := rad(-45)</l>
<l>rectLen1 :=181</l>
<l>rectLen2 :=194</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI31_TOPLEFT, lineY1_FAI31_TOPLEFT, lineX2_FAI31_TOPLEFT, lineY2_FAI31_TOPLEFT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c></c>
<l>rectX1 := 1231 - modelCol</l>
<l>rectY1 := 4380 - modelRow</l>
<l>rectRadian := rad(43)</l>
<l>rectLen1 :=186</l>
<l>rectLen2 :=178</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'positive', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI31_BOTTOMLEFT, lineY1_FAI31_BOTTOMLEFT, lineX2_FAI31_BOTTOMLEFT, lineY2_FAI31_BOTTOMLEFT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<l>rectX1 := 3119 - modelCol</l>
<l>rectY1 := 2453 - modelRow</l>
<l>rectRadian := rad(43)</l>
<l>rectLen1 :=186</l>
<l>rectLen2 :=204</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'negative', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold-10, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI31_TOPRIGHT, lineY1_FAI31_TOPRIGHT, lineX2_FAI31_TOPRIGHT, lineY2_FAI31_TOPRIGHT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<c></c>
<l>rectX1 := 3087 - modelCol</l>
<l>rectY1 := 4399 - modelRow</l>
<l>rectRadian := rad(-45)</l>
<l>rectLen1 :=181</l>
<l>rectLen2 :=194</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<l>VisionProStyleFindLineOneStep (Image, findLineRegion, lineRegion, 'negative', rectY1, rectX1, rectRadian, rectLen1, rectLen2, 10, Threshold, 'first', 0.2, 'true', 1, sigma2, 5120, 5120, 5, 60, 30, lineX1_FAI31_BOTTOMRIGHT, lineY1_FAI31_BOTTOMRIGHT, lineX2_FAI31_BOTTOMRIGHT, lineY2_FAI31_BOTTOMRIGHT, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored)</l>
<l>concat_obj (FindLineRegions, findLineRegion, FindLineRegions)</l>
<l>concat_obj (LineRegions, lineRegion, LineRegions)</l>
<l>PointsXUsed := [ptsXUsed, PointsXUsed]</l>
<l>PointsYUsed := [ptsYUsed, PointsYUsed]</l>
<l>PointsXIgnored := [ptsXIgnored, PointsXIgnored]</l>
<l>PointsYIgnored := [ptsYIgnored, PointsYIgnored]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI31_LEFT_LEN, MapToWorld, MapToImage, 'true', X1_X_1, Y1_X_1, X2_X_1, Y2_X_1)</l>
<l>intersection_lines (Y1_X_1, X1_X_1, Y2_X_1, X2_X_1, lineY1_FAI31_TOPLEFT, lineX1_FAI31_TOPLEFT, lineY2_FAI31_TOPLEFT, lineX2_FAI31_TOPLEFT, ptY_TL, ptX_TL, IsOverlapping1)</l>
<l>intersection_lines (Y1_X_1, X1_X_1, Y2_X_1, X2_X_1, lineY1_FAI31_BOTTOMLEFT, lineX1_FAI31_BOTTOMLEFT, lineY2_FAI31_BOTTOMLEFT, lineX2_FAI31_BOTTOMLEFT, ptY_BL, ptX_BL, IsOverlapping1)</l>
<l>IntersectsX := [IntersectsX, ptX_TL]</l>
<l>IntersectsY := [IntersectsY, ptY_TL]</l>
<l>IntersectsX := [IntersectsX, ptX_BL]</l>
<l>IntersectsY := [IntersectsY, ptY_BL]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI31_RIGHT_LEN, MapToWorld, MapToImage, 'true', X1_X_2, Y1_X_2, X2_X_2, Y2_X_2)</l>
<l>intersection_lines (Y1_X_2, X1_X_2, Y2_X_2, X2_X_2, lineY1_FAI31_TOPRIGHT, lineX1_FAI31_TOPRIGHT, lineY2_FAI31_TOPRIGHT, lineX2_FAI31_TOPRIGHT, ptY_TR, ptX_TR, IsOverlapping1)</l>
<l>intersection_lines (Y1_X_2, X1_X_2, Y2_X_2, X2_X_2, lineY1_FAI31_BOTTOMRIGHT, lineX1_FAI31_BOTTOMRIGHT, lineY2_FAI31_BOTTOMRIGHT, lineX2_FAI31_BOTTOMRIGHT, ptY_BR, ptX_BR, IsOverlapping1)</l>
<l>IntersectsX := [IntersectsX, ptX_TR]</l>
<l>IntersectsY := [IntersectsY, ptY_TR]</l>
<l>IntersectsX := [IntersectsX, ptX_BR]</l>
<l>IntersectsY := [IntersectsY, ptY_BR]</l>
<c></c>
<l>intersection_lines (ptY_TL, ptX_TL, ptY_BR, ptX_BR, ptY_TR, ptX_TR, ptY_BL, ptX_BL, ptY, ptX, IsOverlapping2)</l>
<l>IntersectsX := [IntersectsX, ptX]</l>
<l>IntersectsY := [IntersectsY, ptY]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI31_CENTERX_LEN, MapToWorld, MapToImage, 'true', X1V, Y1V, X2V, Y2V)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI31_CENTERY_LEN, MapToWorld, MapToImage, 'false', X1H, Y1H, X2H, Y2H)</l>
<l>intersection_lines (Y1H, X1H, Y2H, X2H, Y1V, X1V, Y2V, X2V, centerY, centerX, IsOverlapping8)</l>
<l>distance_pp (centerY, centerX, ptY, ptX, Distance)</l>
<l>Outputs := [Outputs, Distance*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c>******************************FAI32**************************</c>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI32_X1_LEN, MapToWorld, MapToImage, 'true', X1_X_1, Y1_X_1, X2_X_1, Y2_X_1)</l>
<l>intersection_lines (Y1_X_1, X1_X_1, Y2_X_1, X1_X_1, lineY1_FAI23_TOP, lineX1_FAI23_TOP, lineY2_FAI23_TOP, lineX2_FAI23_TOP, intersectY_TL, intersectX_TL, IsOverlapping5)</l>
<l>intersection_lines (Y1_X_1, X1_X_1, Y2_X_1, X1_X_1, lineY1_FAI23_BOTTOM, lineX1_FAI23_BOTTOM, lineY2_FAI23_BOTTOM, lineX2_FAI23_BOTTOM, intersectY_BL, intersectX_BL, IsOverlapping5)</l>
<c></c>
<c></c>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI32_X2_LEN, MapToWorld, MapToImage, 'true', X1_X_2, Y1_X_2, X2_X_2, Y2_X_2)</l>
<l>intersection_lines (Y1_X_2, X1_X_2, Y2_X_2, X1_X_2, lineY1_FAI23_TOP, lineX1_FAI23_TOP, lineY2_FAI23_TOP, lineX2_FAI23_TOP, intersectY_TR, intersectX_TR, IsOverlapping5)</l>
<l>intersection_lines (Y1_X_2, X1_X_2, Y2_X_2, X1_X_2, lineY1_FAI23_BOTTOM, lineX1_FAI23_BOTTOM, lineY2_FAI23_BOTTOM, lineX2_FAI23_BOTTOM, intersectY_BR, intersectX_BR, IsOverlapping5)</l>
<l>X1_L6 := (intersectX_TL + intersectX_TR) / 2.0</l>
<l>Y1_L6 := (intersectY_TL + intersectY_TR) / 2.0</l>
<l>IntersectsX := [IntersectsX, X1_L6]</l>
<l>IntersectsY := [IntersectsY, Y1_L6]</l>
<c></c>
<l>X2_L6 := (intersectX_BL + intersectX_BR) / 2.0</l>
<l>Y2_L6 := (intersectY_BL + intersectY_BR) / 2.0</l>
<l>IntersectsX := [IntersectsX, X2_L6]</l>
<l>IntersectsY := [IntersectsY, Y2_L6]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI32_Y1_LEN, MapToWorld, MapToImage, 'false', X1_Y_1, Y1_Y_1, X2_Y_1, Y2_Y_1)</l>
<l>intersection_lines (Y1_Y_1, X1_Y_1, Y2_Y_1, X2_Y_1, lineY1_FAI21_LEFT, lineX1_FAI21_LEFT, lineY2_FAI21_LEFT, lineX2_FAI21_LEFT, intersectY_LT, intersectX_LT, IsOverlapping6)</l>
<l>intersection_lines (Y1_Y_1, X1_Y_1, Y2_Y_1, X2_Y_1, lineY1_FAI21_Right, lineX1_FAI21_Right, lineY2_FAI21_Right, lineX2_FAI21_Right, intersectY_RT, intersectX_RT, IsOverlapping6)</l>
<c></c>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI32_Y2_LEN, MapToWorld, MapToImage, 'false', X1_Y_2, Y1_Y_2, X2_Y_2, Y2_Y_2)</l>
<l>intersection_lines (Y1_Y_2, X1_Y_2, Y2_Y_2, X2_Y_2, lineY1_FAI21_LEFT, lineX1_FAI21_LEFT, lineY2_FAI21_LEFT, lineX2_FAI21_LEFT, intersectY_LB, intersectX_LB, IsOverlapping6)</l>
<l>intersection_lines (Y1_Y_2, X1_Y_2, Y2_Y_2, X2_Y_2, lineY1_FAI21_Right, lineX1_FAI21_Right, lineY2_FAI21_Right, lineX2_FAI21_Right, intersectY_RB, intersectX_RB, IsOverlapping6)</l>
<c></c>
<l>X1_L5 := (intersectX_LT + intersectX_LB) / 2.0</l>
<l>Y1_L5 := (intersectY_LT + intersectY_LB) / 2.0</l>
<l>IntersectsX := [IntersectsX, X1_L5]</l>
<l>IntersectsY := [IntersectsY, Y1_L5]</l>
<c></c>
<l>X2_L5 := (intersectX_RT + intersectX_RB) / 2.0</l>
<l>Y2_L5 := (intersectY_RT + intersectY_RB) / 2.0</l>
<l>IntersectsX := [IntersectsX, X2_L5]</l>
<l>IntersectsY := [IntersectsY, Y2_L5]</l>
<c></c>
<c></c>
<l>intersection_lines (Y1_L5, X1_L5, Y2_L5, X2_L5, Y1_L6, X1_L6, Y2_L6, X2_L6, centerY_FAI32, centerX_FAI32, IsOverlapping7)</l>
<l>IntersectsX := [IntersectsX, centerX_FAI32]</l>
<l>IntersectsY := [IntersectsY, centerY_FAI32]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI23_MID_LEN, MapToWorld, MapToImage, 'false', X1H, Y1H, X2H, Y2H)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI23_P2_LEN, MapToWorld, MapToImage, 'true', X1V, Y1V, X2V, Y2V)</l>
<l>intersection_lines (Y1V, X1V, Y2V, X2V, Y1H, X1H, Y2H, X2H, centerY, centerX, IsOverlapping7)</l>
<l>IntersectsX := [IntersectsX, centerX]</l>
<l>IntersectsY := [IntersectsY, centerY]</l>
<c></c>
<l>distance_pp (centerY, centerX, centerY_FAI32, centerX_FAI32, Distance)</l>
<l>Outputs := [Outputs, Distance*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c></c>
<c>*******************FAI33******************</c>
<c></c>
<l>L6_ROW1 := (rowTL_FAI26 + rowTR_FAI26) / 2.0</l>
<l>L6_COL1 := (colTL_FAI26 + colTR_FAI26) / 2.0</l>
<l>L6_ROW2 := (rowBL_FAI26 + rowBR_FAI26) / 2.0</l>
<l>L6_COL2 := (colBL_FAI26 + colBR_FAI26) / 2.0</l>
<c></c>
<c></c>
<l>L5_ROW1 := (rowTL_FAI26 + rowBL_FAI26) / 2.0</l>
<l>L5_COL1 := (colTL_FAI26 + colBL_FAI26) / 2.0</l>
<l>L5_ROW2 := (rowTR_FAI26 + rowBR_FAI26) / 2.0</l>
<l>L5_COL2 := (colTR_FAI26 + colBR_FAI26) / 2.0</l>
<c></c>
<l>intersection_lines (L6_ROW1, L6_COL1, L6_ROW2, L6_COL2, L5_ROW1, L5_COL1, L5_ROW2, L5_COL2, centerY_FAI33, centerX_FAI33, IsOverlapping4)</l>
<l>IntersectsX := [IntersectsX, intersectX]</l>
<l>IntersectsY := [IntersectsY, intersectY]</l>
<c></c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI33_V_LEN, MapToWorld, MapToImage, 'false', X1H, Y1H, X2H, Y2H)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1LeftBase, lineY1LeftBase, lineX2LeftBase, lineY2LeftBase, FAI33_H_LEN, MapToWorld, MapToImage, 'true', X1V, Y1V, X2V, Y2V)</l>
<l>intersection_lines (Y1V, X1V, Y2V, X2V, Y1H, X1H, Y2H, X2H, centerY, centerX, IsOverlapping7)</l>
<l>IntersectsX := [IntersectsX, centerX]</l>
<l>IntersectsY := [IntersectsY, centerY]</l>
<c></c>
<l>distance_pp (centerY, centerX, centerY_FAI33, centerX_FAI33, Distance)</l>
<l>Outputs := [Outputs, Distance*XCoeff]</l>
<l>OutputsPixel := [OutputsPixel, Distance]</l>
<c></c>
<c>***********************FAI123******************</c>
<l>rect1X1 := 658 - modelCol</l>
<l>rect1Y1 := 4660 - modelRow</l>
<l>rect1Radian := rad(89)</l>
<l>rect1Len1 :=28</l>
<l>rect1Len2 :=150</l>
<c></c>
<l>rect2X1 := 2372 - modelCol</l>
<l>rect2Y1 := 4685 - modelRow</l>
<l>rect2Radian := rad(-90)</l>
<l>rect2Len1 :=64</l>
<l>rect2Len2 :=205</l>
<c></c>
<l>rectX1 := [rect1X1, rect2X1]</l>
<l>rectY1 := [rect1Y1, rect2Y1]</l>
<l>rectRadian := [rect1Radian, rect2Radian]</l>
<l>rectLen1 := [rect1Len1, rect2Len1]</l>
<l>rectLen2 := [rect1Len2, rect2Len2]</l>
<l>AffineTransRect2 (rectY1, rectX1, rectRadian, rectLen1, rectLen2, MovementOfItem, rectY1, rectX1, rectRadian, rectLen1, rectLen2)</l>
<c></c>
<c></c>
<l>* VisionProStyleFindLineOneStep_Pairs (Image, findLineRegion, lineRegion, rect1Y1, rect1X1, rect1Radian, rect1Len1, rect1Len2, 'positive', 10, 5, 1, sigma2, 'first', 'false', 0.2, 'first', 1, 10, 5120, 5120, 60, 30, useXLD, ptsXUsed,ptsYUsed,ptsXIgnored,ptsYIgnored, lineX1, lineY1, lineX2, lineY2)</l>
<l>return ()</l>
</body>
<docu id="I94BottomViewMeasure">
<parameters>
<parameter id="FAIBiases"/>
<parameter id="FAINames"/>
<parameter id="FAIWeights"/>
<parameter id="FindLineRegions"/>
<parameter id="Image"/>
<parameter id="IntersectsX"/>
<parameter id="IntersectsY"/>
<parameter id="LineRegions"/>
<parameter id="ModelID"/>
<parameter id="Outputs"/>
<parameter id="OutputsPixel"/>
<parameter id="PointsXIgnored"/>
<parameter id="PointsXUsed"/>
<parameter id="PointsYIgnored"/>
<parameter id="PointsYUsed"/>
<parameter id="XCoeff"/>
<parameter id="YCoeff"/>
</parameters>
</docu>
</procedure>
<procedure name="AffineTransRect2">
<interface>
<ic>
<par name="row" base_type="ctrl" dimension="0"/>
<par name="col" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="len1" base_type="ctrl" dimension="0"/>
<par name="len2" base_type="ctrl" dimension="0"/>
<par name="map" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="rowOut" base_type="ctrl" dimension="0"/>
<par name="colOut" base_type="ctrl" dimension="0"/>
<par name="radianOut" base_type="ctrl" dimension="0"/>
<par name="len1Out" base_type="ctrl" dimension="0"/>
<par name="len2Out" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>rowOut :=[]</l>
<l>colOut :=[]</l>
<l>radianOut :=[]</l>
<l>len1Out :=[]</l>
<l>len2Out :=[]</l>
<c></c>
<l>for i := 0 to |row|-1 by 1</l>
<l>    _affineTransRect2Single (row[i], col[i], radian[i], len1[i], len2[i], map, rowO, colO, radianO, len1O, len2O)</l>
<l>    rowOut :=[rowOut, rowO]</l>
<l>colOut :=[colOut, colO]</l>
<l>radianOut :=[radianOut, radianO]</l>
<l>len1Out :=[len1Out, len1O]</l>
<l>len2Out :=[len2Out, len2O]</l>
<l>endfor</l>
</body>
<docu id="AffineTransRect2">
<parameters>
<parameter id="col"/>
<parameter id="colOut"/>
<parameter id="len1"/>
<parameter id="len1Out"/>
<parameter id="len2"/>
<parameter id="len2Out"/>
<parameter id="map"/>
<parameter id="radian"/>
<parameter id="radianOut"/>
<parameter id="row"/>
<parameter id="rowOut"/>
</parameters>
</docu>
</procedure>
<procedure name="PivotLineAroundPoint">
<interface>
<oo>
<par name="lineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
<par name="pivotX" base_type="ctrl" dimension="0"/>
<par name="pivotY" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="newPointDirection" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outLineX1" base_type="ctrl" dimension="0"/>
<par name="outLineY1" base_type="ctrl" dimension="0"/>
<par name="outLineX2" base_type="ctrl" dimension="0"/>
<par name="outLineY2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>line_orientation (lineY1, lineX1, lineY2, lineX2, initialRadian)</l>
<l>newRadian := initialRadian + radian</l>
<c></c>
<l>m := tan(newRadian)</l>
<l>b := pivotY - pivotX * m</l>
<c></c>
<l>outLineX1 := pivotX</l>
<l>outLineY1 := pivotY</l>
<c></c>
<l>dist := 10</l>
<l>if(newPointDirection == 'up')</l>
<l>    outLineY2 := outLineY1 + dist</l>
<l>    outLineX2 := (outLineY2 - b) / m</l>
<l>elseif(newPointDirection == 'down')</l>
<l>    outLineY2 := outLineY1 - dist</l>
<l>    outLineX2 := (outLineY2 - b) / m</l>
<l>elseif(newPointDirection == 'left')</l>
<l>    outLineX2 := outLineX1 - dist</l>
<l>    outLineY2 := outLineX2 * m + b</l>
<l>elseif(newPointDirection == 'right')</l>
<l>    outLineX2 := outLineX1 + dist</l>
<l>    outLineY2 := outLineX2 * m + b</l>
<l>else</l>
<l>    throw ('Invalid Direction')</l>
<l>endif</l>
<c></c>
<l>GenLineRegion (lineRegion, outLineX1, outLineY1, outLineX2, outLineY2, imageWidth, imageHeight)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="PivotLineAroundPoint">
<parameters>
<parameter id="imageHeight">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="imageWidth">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="lineRegion"/>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
<parameter id="newPointDirection"/>
<parameter id="outLineX1"/>
<parameter id="outLineX2"/>
<parameter id="outLineY1"/>
<parameter id="outLineY2"/>
<parameter id="pivotX"/>
<parameter id="pivotY"/>
<parameter id="radian"/>
</parameters>
</docu>
</procedure>
<procedure name="LongestXLD">
<interface>
<io>
<par name="inputContour" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="outputContour" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>union_adjacent_contours_xld (inputContour, outputContour, 10, 1, 'attr_keep')</l>
<l>count_obj (outputContour, Number)</l>
<c></c>
<c></c>
<l>if(Number&gt;1)</l>
<l>    gen_empty_obj (selectedContour)</l>
<l>    selectedIndex := 0</l>
<l>    selectedLen := 0</l>
<l>    for Index := 1 to Number by 1</l>
<l>        select_obj (outputContour, ObjectSelected, Index)</l>
<l>        length_xld (ObjectSelected, Length)</l>
<l>        if(Length &gt; selectedLen)</l>
<l>            selectedLen := Length</l>
<l>            selectedContour := ObjectSelected</l>
<l>        endif</l>
<l>    endfor</l>
<l>    outputContour := selectedContour</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="LongestXLD">
<parameters>
<parameter id="inputContour"/>
<parameter id="outputContour"/>
</parameters>
</docu>
</procedure>
</hdevelop>
