<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.0">
<procedure name="main">
<interface/>
<body>
<l>read_shape_model (modelPath, ModelID)</l>
<c></c>
<l>GetWorldImageMap (Image, './calibration/cameraParam.cal', './calibration/cameraPos.dat', mapToImage, mapToWorld, Pose, CameraParam)</l>
<c></c>
<l>set_system ('image_dir', 'E:/Projects/3d/I94/I94TopFace')</l>
<l>open_framegrabber ('File', 1, 1, Width, Height, Row, Column, 'default', -1, 'default', -1, 'false', 'E:/Projects/3d/I94/I94TopFace/images.seq', '', 1, 2, AcqHandle)</l>
<c></c>
<l>grab_image (Image1, AcqHandle)</l>
<c></c>
<l>for Index := 1 to 41 by 1</l>
<c>    </c>
<c>    </c>
<c>* find right base line</c>
<c></c>
<c></c>
<l>dev_resize_window_fit_image (Image, 0, 0, 800, 800)</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('red')</l>
<l>gen_cross_contour_xld (Cross4, crossesYIgnored, crossesXIgnored, crossSize, 0.785398)</l>
<l>dev_set_color ('green')</l>
<l>gen_cross_contour_xld (Cross4, crossesYused, crossesXUsed, crossSize, 0.785398)</l>
<l>dev_set_color ('blue')</l>
<l>dev_set_line_width (2)</l>
<l>gen_cross_contour_xld (Cross4, intersectYs, intersectXs, 200, 0)</l>
<l>dev_set_color ('yellow')</l>
<l>dev_display (lineRegions)</l>
<l>dev_set_color ('magenta')</l>
<l>dev_display (FindLineRects)</l>
<c>    </c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    stop ()</l>
<c>    </c>
<l>endfor</l>
<c></c>
<c></c>
<l>clear_shape_model (ModelID)</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="GenVisibleMeasureRect">
<interface>
<oo>
<par name="ROI_0" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="rect1_row" base_type="ctrl" dimension="0"/>
<par name="rect1_col" base_type="ctrl" dimension="0"/>
<par name="rect1_rad" base_type="ctrl" dimension="0"/>
<par name="rect1_len1" base_type="ctrl" dimension="0"/>
<par name="rect1_len2" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="MeasureHandle" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle2 (ROI_0, rect1_row, rect1_col, rect1_rad, rect1_len1, rect1_len2)</l>
<l>gen_measure_rectangle2 (rect1_row, rect1_col, rect1_rad, rect1_len1, rect1_len2, Width, Height, 'nearest_neighbor', MeasureHandle)</l>
<l>return ()</l>
</body>
<docu id="GenVisibleMeasureRect">
<parameters>
<parameter id="Height"/>
<parameter id="MeasureHandle"/>
<parameter id="ROI_0"/>
<parameter id="Width"/>
<parameter id="rect1_col"/>
<parameter id="rect1_len1"/>
<parameter id="rect1_len2"/>
<parameter id="rect1_rad"/>
<parameter id="rect1_row"/>
</parameters>
</docu>
</procedure>
<procedure name="VisionProStyleFindLine">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ROI_0" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="transition" base_type="ctrl" dimension="0"/>
<par name="rect1_row" base_type="ctrl" dimension="0"/>
<par name="rect1_col" base_type="ctrl" dimension="0"/>
<par name="rect1_rad" base_type="ctrl" dimension="0"/>
<par name="rect1_len1" base_type="ctrl" dimension="0"/>
<par name="rect1_len2" base_type="ctrl" dimension="0"/>
<par name="numSubRects" base_type="ctrl" dimension="0"/>
<par name="threshold" base_type="ctrl" dimension="0"/>
<par name="sigma" base_type="ctrl" dimension="0"/>
<par name="firstOrLast" base_type="ctrl" dimension="0"/>
<par name="usingPairs" base_type="ctrl" dimension="0"/>
<par name="whichEdgePair" base_type="ctrl" dimension="0"/>
<par name="minEdge" base_type="ctrl" dimension="0"/>
<par name="maxEdge" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Xs" base_type="ctrl" dimension="0"/>
<par name="Ys" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>Xs := []</l>
<l>Ys := []</l>
<c></c>
<c></c>
<l>get_image_size (Image, Width, Height)</l>
<c></c>
<c></c>
<l>leftFaced := rect1_rad&lt;rad(-90) or rect1_rad&gt;rad(90)</l>
<l>rect1_deg := deg(rect1_rad)</l>
<c></c>
<l>gen_rectangle2 (ROI_0, rect1_row, rect1_col, rect1_rad, rect1_len1, rect1_len2)</l>
<l>widthSubRects := rect1_len2/numSubRects*2</l>
<l>heightSubRects := rect1_len1*2</l>
<c></c>
<l>if(leftFaced)</l>
<l>    betaDeg := -rect1_deg - 90</l>
<l>rectStartX := rect1_col - rect1_len2 * cos(rad(betaDeg))</l>
<l>rectStartY := rect1_row - rect1_len2 * sin(rad(betaDeg))</l>
<l>subRectXIncrement := widthSubRects * cos(rad(betaDeg))</l>
<l>subRectYIncrement := sqrt(widthSubRects*widthSubRects-subRectXIncrement*subRectXIncrement)</l>
<l>firstSubRectCenterX := rectStartX + subRectXIncrement*0.5</l>
<l>firstSubRectCenterY := rectStartY + subRectYIncrement * 0.5</l>
<l>else</l>
<l>    betaDeg := 90 + rect1_deg</l>
<l>rectStartX := rect1_col + rect1_len2 * cos(rad(betaDeg))</l>
<l>rectStartY := rect1_row - rect1_len2 * sin(rad(betaDeg))</l>
<l>subRectXIncrement := -widthSubRects * cos(rad(betaDeg))</l>
<l>subRectYIncrement := sqrt(widthSubRects*widthSubRects-subRectXIncrement*subRectXIncrement)</l>
<l>firstSubRectCenterX := rectStartX + subRectXIncrement*0.5</l>
<l>firstSubRectCenterY := rectStartY + subRectYIncrement * 0.5</l>
<l>endif</l>
<c></c>
<c></c>
<l>for Index := 0 to numSubRects-1 by 1</l>
<c>    </c>
<l>    if(leftFaced)</l>
<l>         subRectCenterX := firstSubRectCenterX + Index*subRectXIncrement</l>
<l>   subRectCenterY := firstSubRectCenterY + Index*subRectYIncrement </l>
<l>   subRectLen1 := rect1_len1</l>
<l>   subRectLen2 := rect1_len2/numSubRects</l>
<l>   subRectPhi := rect1_rad</l>
<l>    else</l>
<l>           subRectCenterX := firstSubRectCenterX + Index*subRectXIncrement</l>
<l>   subRectCenterY := firstSubRectCenterY + Index*subRectYIncrement </l>
<l>   subRectLen1 := rect1_len1</l>
<l>   subRectLen2 := rect1_len2/numSubRects</l>
<l>   subRectPhi := rect1_rad</l>
<l>    endif</l>
<c>    </c>
<l>   gen_rectangle2 (Rectangle, subRectCenterY, subRectCenterX, subRectPhi, subRectLen1, subRectLen2)</l>
<l>   gen_measure_rectangle2 (subRectCenterY, subRectCenterX, subRectPhi, subRectLen1, subRectLen2, Width, Height, 'nearest_neighbor', MeasureHandle1)</l>
<c>   </c>
<l>   if(usingPairs == 'false')</l>
<l>          measure_pos (Image, MeasureHandle1, sigma, threshold, transition, firstOrLast, RowEdge1, ColumnEdge1, Amplitude1, Distance1)</l>
<l>          Xs := [Xs,ColumnEdge1]</l>
<l>          Ys := [Ys, RowEdge1]</l>
<l>   else</l>
<l>       measure_pairs (Image, MeasureHandle1, sigma, threshold, transition, whichEdgePair, RowEdgeFirst, ColumnEdgeFirst, AmplitudeFirst, RowEdgeSecond, ColumnEdgeSecond, AmplitudeSecond, IntraDistance, InterDistance)</l>
<c>       * only count if edge with is within range</c>
<l>       if(|IntraDistance|&gt;0 and IntraDistance &gt; minEdge and IntraDistance &lt; maxEdge)</l>
<l>           if(firstOrLast == 'first')</l>
<l>               Xs := [Xs,ColumnEdgeFirst]</l>
<l>               Ys := [Ys, RowEdgeFirst]</l>
<l>           else</l>
<l>                 Xs := [Xs,ColumnEdgeSecond]</l>
<l>               Ys := [Ys, RowEdgeSecond]</l>
<l>           endif</l>
<l>       endif</l>
<c>       </c>
<l>   endif</l>
<l>                close_measure (MeasureHandle1)</l>
<c></c>
<c>   </c>
<c></c>
<l>endfor</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="VisionProStyleFindLine">
<parameters>
<parameter id="Image"/>
<parameter id="ROI_0"/>
<parameter id="Xs"/>
<parameter id="Ys"/>
<parameter id="firstOrLast"/>
<parameter id="maxEdge">
<sem_type>real</sem_type>
</parameter>
<parameter id="minEdge">
<default_value>0</default_value>
<sem_type>real</sem_type>
</parameter>
<parameter id="numSubRects"/>
<parameter id="rect1_col"/>
<parameter id="rect1_len1"/>
<parameter id="rect1_len2"/>
<parameter id="rect1_rad"/>
<parameter id="rect1_row"/>
<parameter id="sigma">
<default_value>1</default_value>
<multivalue>false</multivalue>
<sem_type>real</sem_type>
</parameter>
<parameter id="threshold"/>
<parameter id="transition"/>
<parameter id="usingPairs">
<default_value>'false'</default_value>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
</parameter>
<parameter id="whichEdgePair">
<default_value>'first'</default_value>
<multivalue>false</multivalue>
<sem_type>string</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="FitLine2D">
<interface>
<ic>
<par name="Xs" base_type="ctrl" dimension="0"/>
<par name="Ys" base_type="ctrl" dimension="0"/>
<par name="ignorePortion" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>fit_line2D_rough (Xs, Ys, lineX1, lineY1, lineX2, lineY2)</l>
<c></c>
<l>totalPoints := |Xs|</l>
<c>* number of points to ignore</c>
<l>numPointsLeft := (1.0-ignorePortion) * |Xs|</l>
<c></c>
<c>* calculate fitness of each point</c>
<l>fiterrors := []</l>
<l>for i := 0 to |Xs|-1 by 1</l>
<l>    distance_pl (Ys[i], Xs[i], lineY1, lineX1, lineY2, lineX2, Distance)</l>
<l>    fiterrors := [fiterrors, Distance]</l>
<l>endfor</l>
<c></c>
<l>tuple_sort_index (fiterrors, Indices)</l>
<c></c>
<c>* select the best fits</c>
<l>XsUsed := []</l>
<l>YsUsed := []</l>
<l>XsIgnored := []</l>
<l>YsIgnored := []</l>
<l>ErrorBest := []</l>
<l>for i := 0 to totalPoints-1 by 1</l>
<l>    index := Indices[i]</l>
<l>   if(i &lt; numPointsLeft)</l>
<l>           XsUsed := [XsUsed, Xs[index]]</l>
<l>    YsUsed := [YsUsed, Ys[index]]</l>
<l>    ErrorBest := [ErrorBest, fiterrors[index]]</l>
<l>   else</l>
<l>       XsIgnored := [XsIgnored, Xs[index]]</l>
<l>       YsIgnored := [YsIgnored, Ys[index]]</l>
<l>   endif</l>
<l>endfor</l>
<c></c>
<c>* fit line again</c>
<l>fit_line2D_rough (XsUsed, YsUsed, lineX1, lineY1, lineX2, lineY2)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="FitLine2D">
<parameters>
<parameter id="Xs"/>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="Ys"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
<parameter id="ignorePortion"/>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
</parameters>
</docu>
</procedure>
<procedure name="move_point_along_line">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineDirectionX" base_type="ctrl" dimension="0"/>
<par name="lineDirectionY" base_type="ctrl" dimension="0"/>
<par name="distance" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineMovedX" base_type="ctrl" dimension="0"/>
<par name="lineMovedY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>xDiff := lineDirectionX - lineStartX</l>
<l>yDiff := lineDirectionY - lineStartY</l>
<l>totalDiff := sqrt(yDiff*yDiff+xDiff*xDiff)</l>
<l>xDirection := xDiff / totalDiff</l>
<l>yDirection := yDiff / totalDiff</l>
<l>lineMovedX := lineStartX + xDirection * distance</l>
<l>lineMovedY := lineStartY + yDirection * distance</l>
<l>return ()</l>
</body>
<docu id="move_point_along_line">
<parameters>
<parameter id="distance"/>
<parameter id="lineDirectionX"/>
<parameter id="lineDirectionY"/>
<parameter id="lineMovedX"/>
<parameter id="lineMovedY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="get_perpendicular_line_that_passes">
<interface>
<ic>
<par name="lineXStart" base_type="ctrl" dimension="0"/>
<par name="lineYStart" base_type="ctrl" dimension="0"/>
<par name="lineXEnd" base_type="ctrl" dimension="0"/>
<par name="lineYEnd" base_type="ctrl" dimension="0"/>
<par name="xPass" base_type="ctrl" dimension="0"/>
<par name="yPass" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineXPerpendicular" base_type="ctrl" dimension="0"/>
<par name="lineYPerpendicular" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>get_direction_unit (lineXStart, lineYStart, lineXEnd, lineYEnd, xUnit, yUnit)</l>
<l>get_perpendicular_direction (xUnit, yUnit, outputVectorX, outputVectorY)</l>
<c></c>
<c>* another point on the perpendicular line can be determined by</c>
<c>* adding perpendicular unit vector to the first point that we passed</c>
<l>lineXPerpendicular := xPass + outputVectorX</l>
<l>lineYPerpendicular := yPass + outputVectorY</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_perpendicular_line_that_passes">
<parameters>
<parameter id="lineXEnd"/>
<parameter id="lineXPerpendicular"/>
<parameter id="lineXStart"/>
<parameter id="lineYEnd"/>
<parameter id="lineYPerpendicular"/>
<parameter id="lineYStart"/>
<parameter id="xPass"/>
<parameter id="yPass"/>
</parameters>
</docu>
</procedure>
<procedure name="get_direction_unit">
<interface>
<ic>
<par name="xStart" base_type="ctrl" dimension="0"/>
<par name="yStart" base_type="ctrl" dimension="0"/>
<par name="xEnd" base_type="ctrl" dimension="0"/>
<par name="yEnd" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="xUnit" base_type="ctrl" dimension="0"/>
<par name="yUnit" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>xDiff := xEnd - xStart</l>
<l>yDiff := yEnd - yStart</l>
<c></c>
<l>totalDiff := sqrt(yDiff*yDiff + xDiff*xDiff)</l>
<c></c>
<l>xUnit := xDiff / totalDiff</l>
<l>yUnit := yDiff / totalDiff</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_direction_unit">
<parameters>
<parameter id="xEnd"/>
<parameter id="xStart"/>
<parameter id="xUnit"/>
<parameter id="yEnd"/>
<parameter id="yStart"/>
<parameter id="yUnit"/>
</parameters>
</docu>
</procedure>
<procedure name="get_perpendicular_direction">
<interface>
<ic>
<par name="inputVectorX" base_type="ctrl" dimension="0"/>
<par name="inputVectorY" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outputVectorX" base_type="ctrl" dimension="0"/>
<par name="outputVectorY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* assume that a perticular vector perpendiclar to me is (xAssume, yAssume), let xAssume = 1</c>
<l>xAssume := 1</l>
<l>yAssume := -(inputVectorX/inputVectorY)</l>
<l>distAssume := sqrt(yAssume*yAssume + xAssume * xAssume)</l>
<c></c>
<c>* calculate unit length direction vector</c>
<l>outputVectorX := xAssume / distAssume</l>
<l>outputVectorY := yAssume / distAssume</l>
<c></c>
<l>return ()</l>
</body>
<docu id="get_perpendicular_direction">
<parameters>
<parameter id="inputVectorX"/>
<parameter id="inputVectorY"/>
<parameter id="outputVectorX"/>
<parameter id="outputVectorY"/>
</parameters>
</docu>
</procedure>
<procedure name="offset_line">
<interface>
<ic>
<par name="x1" base_type="ctrl" dimension="0"/>
<par name="y1" base_type="ctrl" dimension="0"/>
<par name="x2" base_type="ctrl" dimension="0"/>
<par name="y2" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="x1Output" base_type="ctrl" dimension="0"/>
<par name="y1Output" base_type="ctrl" dimension="0"/>
<par name="x2Output" base_type="ctrl" dimension="0"/>
<par name="y2Output" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* calculate m and b</c>
<l>xDiff := x2 - x1</l>
<l>yDiff := y2 - y1</l>
<l>m := yDiff / xDiff</l>
<l>b := y1 - m* x1</l>
<c></c>
<c>* calculate angle</c>
<l>radian := atan(m)</l>
<c>* calculate new b after offset</c>
<l>yIncre := offset / cos(radian)</l>
<l>newB := b + yIncre</l>
<c></c>
<c>* sample two points back to caller</c>
<l>x1Output := x1</l>
<l>x2Output := x2</l>
<l>y1Output := x1Output * m + newB</l>
<l>y2Output := x2Output * m + newB</l>
<c></c>
<l>return ()</l>
</body>
<docu id="offset_line">
<parameters>
<parameter id="offset"/>
<parameter id="x1"/>
<parameter id="x1Output"/>
<parameter id="x2"/>
<parameter id="x2Output"/>
<parameter id="y1"/>
<parameter id="y1Output"/>
<parameter id="y2"/>
<parameter id="y2Output"/>
</parameters>
</docu>
</procedure>
<procedure name="I40_FindOrigin">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="FindLineRegions" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="VAxisX1" base_type="ctrl" dimension="0"/>
<par name="VAxisY1" base_type="ctrl" dimension="0"/>
<par name="VAxisX2" base_type="ctrl" dimension="0"/>
<par name="VAxisY2" base_type="ctrl" dimension="0"/>
<par name="HAxisX1" base_type="ctrl" dimension="0"/>
<par name="HAxisY1" base_type="ctrl" dimension="0"/>
<par name="HAxisX2" base_type="ctrl" dimension="0"/>
<par name="HAxisY2" base_type="ctrl" dimension="0"/>
<par name="CoorCenterY" base_type="ctrl" dimension="0"/>
<par name="CoorCenterX" base_type="ctrl" dimension="0"/>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Width := 2032</l>
<l>Height := 2500</l>
<c></c>
<l>xCoeff := 0.016</l>
<l>yCoeff := 0.02</l>
<c></c>
<c>* create xld features for fixturing</c>
<l>gen_rectangle1 (ROI_0, 99.0277, 161.153, 1198.89, 1388.46)</l>
<l>reduce_domain (Image, ROI_0, ImageReduced)</l>
<l>sobel_amp (ImageReduced, EdgeAmplitude, 'sum_abs', 3)</l>
<l>threshold (EdgeAmplitude, Region, 0.5, 255)</l>
<l>region_to_bin (Region, BinImage, 255, 0, Width, Height)</l>
<l>gen_contour_region_xld (Region, Contours, 'border')</l>
<c></c>
<l>find_shape_model (BinImage, ModelID, -0.39, 0.79, 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row5, Column5, Angle, Score)</l>
<l>vector_angle_to_rigid (0, 0, 0, Row5, Column5, Angle, HomMat2D)</l>
<c></c>
<c>* center of the model</c>
<l>area_center (Region, Area1, centerModelY, centerModelX)</l>
<c></c>
<c>* align all the measure rects with respect to the created shape model which is zero centered</c>
<l>set_system ('clip_region', 'false')</l>
<c>* upperleft find line</c>
<l>*gen_rectangle2 (Rectangle, 331.86700000, 510.16200000, rad(-90.00000000), 40, 90.95780000)</l>
<l>*move_region (Rectangle, RegionMoved, -centerModelY, -centerModelX)</l>
<c>* upper right find line</c>
<l>gen_rectangle2 (Rectangle1, 1676.14, 792.335, rad(90), 60, 220)</l>
<l>move_region (Rectangle1, RegionMoved1, -centerModelY, -centerModelX)</l>
<c>* left upper find line</c>
<l>gen_rectangle2 (Rectangle2, 477.38200000, 370.80400000, rad(0.00000000), 60, 75.89940000)</l>
<l>move_region (Rectangle2, RegionMoved2, -centerModelY, -centerModelX)</l>
<c>* left lower find line</c>
<l>gen_rectangle2 (Rectangle3, 897.15300000, 368.12700000, rad(0.00000000), 60, 48.35380000)</l>
<l>move_region (Rectangle3, RegionMoved3, -centerModelY, -centerModelX)</l>
<l>set_system ('clip_region', 'true')</l>
<c></c>
<c></c>
<c>* fix all the measure rects to track individual parts to be measured</c>
<l>*affine_trans_region (RegionMoved, FindLineRegions, HomMat2D, 'nearest_neighbor')</l>
<l>affine_trans_region (RegionMoved1, FindLineRegions, HomMat2D, 'nearest_neighbor')</l>
<l>affine_trans_region (RegionMoved2, FindLineRegions2, HomMat2D, 'nearest_neighbor')</l>
<l>affine_trans_region (RegionMoved3, FindLineRegions3, HomMat2D, 'nearest_neighbor')</l>
<c></c>
<c>* get the pose of measure rects that are fixed in place</c>
<l>*smallest_rectangle2 (FindLineRegions, Row1, Column1, Phi, Length1, Length2)</l>
<l>smallest_rectangle2 (FindLineRegions, Row2, Column2, Phi1, Length11, Length21)</l>
<l>smallest_rectangle2 (FindLineRegions2, Row3, Column3, Phi2, Length12, Length22)</l>
<l>smallest_rectangle2 (FindLineRegions3, Row4, Column4, Phi3, Length13, Length23)</l>
<c></c>
<c>* find all the points within the above rects</c>
<l>* VisionProStyleFindLine (Image, ROI_0, 'positive', Row1, Column1, rad(-90), Length2, Length1, 8, threshold, sigma, firstOrLast, usingPairs, whichEdge, minEdge, maxEdge, XsUpperLeft, YsUpperLeft)</l>
<l>VisionProStyleFindLine (Image, ROI_0, 'negative', Row2, Column2, rad(-90), Length21, Length11, 8, threshold1, sigma1, firstOrLast1, usingPairs1, whichEdge1, minEdge1, maxEdge1, XsUpperRight, YsUpperRight)</l>
<l>VisionProStyleFindLine (Image, ROI_0, 'positive', Row3, Column3, rad(0), Length22, Length12, 8, threshold2, sigma2, firstOrLast2, usingPairs2, whichEdge2, minEdge2, maxEdge2, XsLeftUpper, YsLeftUpper)</l>
<l>VisionProStyleFindLine (Image, ROI_0, 'positive', Row4, Column4, rad(0), Length13, Length23, 8, threshold3, sigma3, firstOrLast3, usingPairs3, whichEdge3, minEdge3, maxEdge3, XsLeftLower, YsLeftLower)</l>
<c></c>
<c>* fit left and upper base line</c>
<l>*tuple_concat (XsUpperLeft, XsUpperRight, XsUpper)</l>
<l>*tuple_concat (YsUpperLeft, YsUpperRight, YsUpper)</l>
<l>tuple_concat (XsLeftUpper, XsLeftLower, XsLeft)</l>
<l>tuple_concat (YsLeftUpper, YsLeftLower, YsLeft)</l>
<c></c>
<l>ignorePortion := 0.2</l>
<l>FitLine2D (XsUpperRight, YsUpperRight, ignorePortion, lineX1Horizontal, lineY1Horizontal, lineX2Horizontal, lineY2Horizontal, XsUsed1, YsUsed1, XsIgnored1, YsIgnored1)</l>
<l>FitLine2D (YsLeft, XsLeft, ignorePortion, lineY1Vertical, lineX1Vertical, lineY2Vertical, lineX2Vertical, YsUsed2, XsUsed2, YsIgnored2, XsIgnored2)</l>
<c></c>
<l>tuple_concat (XsUsed1, XsUsed2, XsUsed)</l>
<l>tuple_concat (YsUsed1, YsUsed2, YsUsed)</l>
<l>tuple_concat (XsIgnored1, XsIgnored2, XsIgnored)</l>
<l>tuple_concat (YsIgnored1,YsIgnored2, YsIgnored)</l>
<c></c>
<l>intersection_lines (lineY1Vertical, lineX1Vertical, lineY2Vertical, lineX2Vertical, lineY1Horizontal, lineX1Horizontal, lineY2Horizontal, lineX2Horizontal, Row, Column, IsOverlapping)</l>
<c></c>
<c>* move the intersection point from top left to top center</c>
<l>move_point_along_line (Column, Row, lineX1Horizontal, lineY1Horizontal, 6.74/xCoeff, VAxisX1, VAxisY1)</l>
<l>gen_cross_contour_xld (PointsFound4, VAxisY1, VAxisX1, 100, Angle)</l>
<c></c>
<c>* the perpendicular can be determined by the last four params</c>
<l>get_perpendicular_line_that_passes (lineX1Horizontal, lineY1Horizontal, VAxisX1, VAxisY1, VAxisX1, VAxisY1, VAxisX2, VAxisY2)</l>
<c></c>
<c>* offset the horizontal line</c>
<l>offset_line(lineX1Horizontal, lineY1Horizontal, lineX2Horizontal, lineY2Horizontal, -19.47/yCoeff, HAxisX1, HAxisY1, HAxisX2, HAxisY2)</l>
<c></c>
<c>* draw new coordinate center</c>
<l>intersection_lines (VAxisY1, VAxisX1, VAxisY2, VAxisX2, HAxisY1, HAxisX1, HAxisY2, HAxisX2, CoorCenterY, CoorCenterX, IsOverlapping1)</l>
<l>gen_cross_contour_xld (PointsFound5, CoorCenterY, CoorCenterX, 100, Angle)</l>
<c></c>
<c></c>
<c>* concat objects necessary for displaying</c>
<l>concat_obj (FindLineRegions, FindLineRegions2, FindLineRegions)</l>
<l>concat_obj (FindLineRegions, FindLineRegions3, FindLineRegions)</l>
<l>return ()</l>
</body>
<docu id="I40_FindOrigin">
<parameters>
<parameter id="CoorCenterX"/>
<parameter id="CoorCenterY"/>
<parameter id="FindLineRegions"/>
<parameter id="HAxisX1"/>
<parameter id="HAxisX2"/>
<parameter id="HAxisY1"/>
<parameter id="HAxisY2"/>
<parameter id="Image"/>
<parameter id="ModelID"/>
<parameter id="VAxisX1"/>
<parameter id="VAxisX2"/>
<parameter id="VAxisY1"/>
<parameter id="VAxisY2"/>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
</parameters>
</docu>
</procedure>
<procedure name="fit_line2D_rough">
<interface>
<ic>
<par name="Xs" base_type="ctrl" dimension="0"/>
<par name="Ys" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>tuple_sum (Xs, SumX)</l>
<l>AverageX := SumX / |Xs|</l>
<c></c>
<l>tuple_sum (Ys, SumY)</l>
<l>AverageY := SumY / |Ys|</l>
<c></c>
<l>SumUpper := 0</l>
<l>SumLower := 0</l>
<l>for i := 0 to |Xs|-1 by 1</l>
<l>    incrementUpper := (Xs[i]-AverageX) * (Ys[i]-AverageY)</l>
<l>    incrementLower := (AverageX-Xs[i]) * (AverageX-Xs[i])</l>
<l>    SumUpper := SumUpper + incrementUpper</l>
<l>    SumLower := SumLower + incrementLower</l>
<l>endfor</l>
<c></c>
<l>m := SumUpper / SumLower</l>
<l>b := AverageY - m*AverageX </l>
<c></c>
<c></c>
<c></c>
<c>* sample two point</c>
<l>tuple_max (Xs, lineX1)</l>
<l>tuple_min (Xs, lineX2)</l>
<c></c>
<l>lineY1 := m * lineX1 + b</l>
<l>lineY2 := m * lineX2 + b</l>
<l>return ()</l>
</body>
<docu id="fit_line2D_rough">
<parameters>
<parameter id="Xs"/>
<parameter id="Ys"/>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
</parameters>
</docu>
</procedure>
<procedure name="VisionProStyleFindLineOneStep">
<interface>
<io>
<par name="inputImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="findLineRegion" base_type="iconic" dimension="0"/>
<par name="lineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="transition" base_type="ctrl" dimension="0"/>
<par name="row" base_type="ctrl" dimension="0"/>
<par name="col" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="len1" base_type="ctrl" dimension="0"/>
<par name="len2" base_type="ctrl" dimension="0"/>
<par name="numSubRects" base_type="ctrl" dimension="0"/>
<par name="threshold" base_type="ctrl" dimension="0"/>
<par name="firstOrLast" base_type="ctrl" dimension="0"/>
<par name="ignoreFraction" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
<par name="sigma" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>VisionProStyleFindLine (inputImage, findLineRegion, transition, row, col, radian, len1, len2, numSubRects, threshold, sigma, firstOrLast, 'false', 'first', 0, 100, Xs, Ys)</l>
<c></c>
<c></c>
<l>if(isVertical == 'true')</l>
<l>    FitLine2D (Ys, Xs, ignoreFraction, lineY1, lineX1, lineY2, lineX2, YsUsed, XsUsed, YsIgnored, XsIgnored)</l>
<l>else</l>
<l>        FitLine2D (Xs, Ys, ignoreFraction, lineX1, lineY1, lineX2, lineY2, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>endif</l>
<c></c>
<l>GenLineRegion (lineRegion, lineX1, lineY1, lineX2, lineY2, imageWidth, imageHeight)</l>
<l>return ()</l>
</body>
<docu id="VisionProStyleFindLineOneStep">
<parameters>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
<parameter id="col"/>
<parameter id="findLineRegion">
<description lang="zh_CN">The region where the line was searched</description>
</parameter>
<parameter id="firstOrLast"/>
<parameter id="ignoreFraction"/>
<parameter id="imageHeight">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="imageWidth">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="inputImage"/>
<parameter id="isVertical"/>
<parameter id="len1"/>
<parameter id="len2"/>
<parameter id="lineRegion">
<description lang="zh_CN">The found line</description>
</parameter>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
<parameter id="numSubRects"/>
<parameter id="radian"/>
<parameter id="row"/>
<parameter id="sigma">
<default_type>real</default_type>
<default_value>1</default_value>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="threshold"/>
<parameter id="transition"/>
</parameters>
</docu>
</procedure>
<procedure name="GetWorldImageMap">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="camParamFile" base_type="ctrl" dimension="0"/>
<par name="camPoseFile" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="mapToImage" base_type="ctrl" dimension="0"/>
<par name="mapToWorld" base_type="ctrl" dimension="0"/>
<par name="Pose" base_type="ctrl" dimension="0"/>
<par name="CameraParam" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_pose (camPoseFile, Pose)</l>
<l>read_cam_par (camParamFile, CameraParam)</l>
<l>get_image_size (Image, Width, Height)</l>
<c></c>
<c>* generate 9 image-to-world coordinate pairs</c>
<l>XsImage := []</l>
<l>YsImage := []</l>
<l>XsWorld := []</l>
<l>YsWorld := []</l>
<c></c>
<l>for row := -1 to 1 by 1</l>
<l>    for column := -1 to 1 by 1</l>
<l>        xImage := Width/2 + 100* column</l>
<l>        XsImage := [XsImage, xImage]</l>
<l>        yImage := Height/2 + 100 * row</l>
<l>        YsImage := [YsImage, yImage]</l>
<c>        </c>
<l>        image_points_to_world_plane (CameraParam, Pose, yImage, xImage, 'mm', xWorld, yWorld)</l>
<l>        XsWorld := [XsWorld, xWorld]</l>
<l>        YsWorld := [YsWorld, yWorld]</l>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>vector_to_similarity (XsWorld, YsWorld, XsImage, YsImage, mapToImage)</l>
<l>vector_to_similarity (XsImage, YsImage, XsWorld, YsWorld, mapToWorld)</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="GetWorldImageMap">
<parameters>
<parameter id="CameraParam"/>
<parameter id="Image">
<description lang="zh_CN">Getting maps that convert image coordintates to and from world</description>
</parameter>
<parameter id="Pose"/>
<parameter id="camParamFile">
<sem_type>string</sem_type>
</parameter>
<parameter id="camPoseFile">
<sem_type>string</sem_type>
</parameter>
<parameter id="mapToImage"/>
<parameter id="mapToWorld"/>
</parameters>
</docu>
</procedure>
<procedure name="GetImageToWorldMap">
<interface>
<io>
<par name="image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="camParamFile" base_type="ctrl" dimension="0"/>
<par name="camPoseFile" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="map" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_pose (camPoseFile, Pose)</l>
<l>read_cam_par (camParamFile, CameraParam)</l>
<l>get_image_size (image, Width, Height)</l>
<c></c>
<c>* generate 9 image-to-world coordinate pairs</c>
<l>XsImage := []</l>
<l>YsImage := []</l>
<l>XsWorld := []</l>
<l>YsWorld := []</l>
<c></c>
<l>for row := -1 to 1 by 1</l>
<l>    for column := -1 to 1 by 1</l>
<l>        xImage := Width/2 + 100* column</l>
<l>        XsImage := [XsImage, xImage]</l>
<l>        yImage := Height/2 + 100 * row</l>
<l>        YsImage := [YsImage, yImage]</l>
<c>        </c>
<l>        image_points_to_world_plane (CameraParam, Pose, yImage, xImage, 'mm', xWorld, yWorld)</l>
<l>        XsWorld := [XsWorld, xWorld]</l>
<l>        YsWorld := [YsWorld, yWorld]</l>
<l>    endfor</l>
<l>endfor</l>
<c></c>
<l>vector_to_similarity (XsImage, YsImage, XsWorld, YsWorld, map)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GetImageToWorldMap">
<parameters>
<parameter id="camParamFile"/>
<parameter id="camPoseFile"/>
<parameter id="image"/>
<parameter id="map"/>
</parameters>
</docu>
</procedure>
<procedure name="TranslateLineInWorldCoordinateAndConvertBack">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="distance" base_type="ctrl" dimension="0"/>
<par name="mapToWorld" base_type="ctrl" dimension="0"/>
<par name="mapToImage" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outLineStartX" base_type="ctrl" dimension="0"/>
<par name="outLineStartY" base_type="ctrl" dimension="0"/>
<par name="outLineEndX" base_type="ctrl" dimension="0"/>
<par name="outLineEndY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<c></c>
<c>* translate world line</c>
<l>MakeParallelLine (lineStartX, lineStartY, lineEndX, lineEndY, distance, isVertical, outLineStartX, outLineStartY, outLineEndX, outLineEndY)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="TranslateLineInWorldCoordinateAndConvertBack">
<parameters>
<parameter id="distance"/>
<parameter id="isVertical">
<sem_type>string</sem_type>
</parameter>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="mapToImage"/>
<parameter id="mapToWorld"/>
<parameter id="outLineEndX"/>
<parameter id="outLineEndY"/>
<parameter id="outLineStartX"/>
<parameter id="outLineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="MakeParallelLine">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outLineStartX" base_type="ctrl" dimension="0"/>
<par name="outLineStartY" base_type="ctrl" dimension="0"/>
<par name="outLineEndX" base_type="ctrl" dimension="0"/>
<par name="outLineEndY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>if(isVertical == 'true')</l>
<l>    TranslateLineNotVertical (lineStartY, lineStartX, lineEndY, lineEndX, offset, outLineStartY, outLineStartX, outLineEndY, outLineEndX)</l>
<l>else</l>
<l>    TranslateLineNotVertical (lineStartX, lineStartY, lineEndX, lineEndY, offset, outLineStartX, outLineStartY, outLineEndX, outLineEndY)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="MakeParallelLine">
<parameters>
<parameter id="isVertical">
<description lang="zh_CN">Whether the line is near or actually vertical</description>
<sem_type>string</sem_type>
</parameter>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="offset">
<description lang="zh_CN">Positive direction points outward from (0,0)</description>
<sem_type>real</sem_type>
</parameter>
<parameter id="outLineEndX"/>
<parameter id="outLineEndY"/>
<parameter id="outLineStartX"/>
<parameter id="outLineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="TranslateLineNotVertical">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="offset" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="outLineStartX" base_type="ctrl" dimension="0"/>
<par name="outLineStartY" base_type="ctrl" dimension="0"/>
<par name="outLineEndX" base_type="ctrl" dimension="0"/>
<par name="outLineEndY" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>xDiff := lineEndX - lineStartX</l>
<l>yDiff := lineEndY - lineStartY</l>
<c></c>
<l>m := yDiff / xDiff</l>
<l>b := lineStartY - yDiff / xDiff * lineStartX</l>
<c></c>
<l>alpha := atan(m)</l>
<c></c>
<l>bIncre := offset / cos(alpha)</l>
<c></c>
<l>newB := b + bIncre</l>
<c></c>
<c></c>
<c>* sample output points</c>
<l>outLineStartX := lineStartX</l>
<l>outLineStartY := m * outLineStartX + newB</l>
<l>outLineEndX := lineEndX</l>
<l>outLineEndY := m * outLineEndX + newB</l>
<c></c>
<l>return ()</l>
</body>
<docu id="TranslateLineNotVertical">
<parameters>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="offset"/>
<parameter id="outLineEndX"/>
<parameter id="outLineEndY"/>
<parameter id="outLineStartX"/>
<parameter id="outLineStartY"/>
</parameters>
</docu>
</procedure>
<procedure name="DistancePLInWorld">
<interface>
<ic>
<par name="lineStartX" base_type="ctrl" dimension="0"/>
<par name="lineStartY" base_type="ctrl" dimension="0"/>
<par name="lineEndX" base_type="ctrl" dimension="0"/>
<par name="lineEndY" base_type="ctrl" dimension="0"/>
<par name="ptX" base_type="ctrl" dimension="0"/>
<par name="ptY" base_type="ctrl" dimension="0"/>
<par name="mapToWorld" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="distanceWorld" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* transform image points to world points</c>
<l>affine_trans_point_2d (mapToWorld, lineStartX, lineStartY, lineStartX_World, lineStartY_World)</l>
<l>affine_trans_point_2d (mapToWorld, ptX, ptY, ptX_World, ptY_World)</l>
<l>affine_trans_point_2d (mapToWorld, lineEndX, lineEndY, lineEndX_World, lineEndY_World)</l>
<c></c>
<c>* cal world distance</c>
<l>distance_pl (ptY_World, ptX_World, lineStartY_World, lineStartX_World, lineEndY_World, lineEndX_World, distanceWorld)</l>
<l>return ()</l>
</body>
<docu id="DistancePLInWorld">
<parameters>
<parameter id="distanceWorld"/>
<parameter id="lineEndX"/>
<parameter id="lineEndY"/>
<parameter id="lineStartX"/>
<parameter id="lineStartY"/>
<parameter id="mapToWorld"/>
<parameter id="ptX"/>
<parameter id="ptY"/>
</parameters>
</docu>
</procedure>
<procedure name="VisionProStyleFindLineOneStep_Pairs">
<interface>
<io>
<par name="inputImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="findLineRegion" base_type="iconic" dimension="0"/>
<par name="lineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="row" base_type="ctrl" dimension="0"/>
<par name="col" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="len1" base_type="ctrl" dimension="0"/>
<par name="len2" base_type="ctrl" dimension="0"/>
<par name="transition" base_type="ctrl" dimension="0"/>
<par name="numSubRects" base_type="ctrl" dimension="0"/>
<par name="threshold" base_type="ctrl" dimension="0"/>
<par name="sigma" base_type="ctrl" dimension="0"/>
<par name="firstOrLast" base_type="ctrl" dimension="0"/>
<par name="isVertical" base_type="ctrl" dimension="0"/>
<par name="ignoreFraction" base_type="ctrl" dimension="0"/>
<par name="whichEdgePair" base_type="ctrl" dimension="0"/>
<par name="minEdge" base_type="ctrl" dimension="0"/>
<par name="maxEdge" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="XsUsed" base_type="ctrl" dimension="0"/>
<par name="YsUsed" base_type="ctrl" dimension="0"/>
<par name="XsIgnored" base_type="ctrl" dimension="0"/>
<par name="YsIgnored" base_type="ctrl" dimension="0"/>
<par name="lineX1" base_type="ctrl" dimension="0"/>
<par name="lineY1" base_type="ctrl" dimension="0"/>
<par name="lineX2" base_type="ctrl" dimension="0"/>
<par name="lineY2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>VisionProStyleFindLine (inputImage, findLineRegion, transition, row, col, radian, len1, len2, numSubRects, threshold, sigma, firstOrLast, 'true', whichEdgePair, minEdge, maxEdge, XsUsed, YsUsed)</l>
<c></c>
<c></c>
<l>if(isVertical == 'true')</l>
<l>    FitLine2D (YsUsed, XsUsed, ignoreFraction, lineY1, lineX1, lineY2, lineX2, YsUsed, XsUsed, YsIgnored, XsIgnored)</l>
<l>else</l>
<l>    FitLine2D (XsUsed, YsUsed, ignoreFraction, lineX1, lineY1, lineX2, lineY2, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>endif</l>
<c></c>
<l>GenLineRegion (lineRegion, lineX1, lineY1, lineX2, lineY2, imageWidth, imageHeight)</l>
<l>return ()</l>
</body>
<docu id="VisionProStyleFindLineOneStep_Pairs">
<parameters>
<parameter id="XsIgnored"/>
<parameter id="XsUsed"/>
<parameter id="YsIgnored"/>
<parameter id="YsUsed"/>
<parameter id="col">
<default_type>integer</default_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="findLineRegion">
<description lang="zh_CN">The region where the line was searched</description>
</parameter>
<parameter id="firstOrLast">
<default_value>'first'</default_value>
<sem_type>string</sem_type>
</parameter>
<parameter id="ignoreFraction">
<sem_type>real</sem_type>
</parameter>
<parameter id="imageHeight">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="imageWidth">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="inputImage"/>
<parameter id="isVertical">
<default_value>'false'</default_value>
<sem_type>string</sem_type>
</parameter>
<parameter id="len1">
<default_type>real</default_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="len2">
<default_type>real</default_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="lineRegion">
<description lang="zh_CN">The found line</description>
</parameter>
<parameter id="lineX1"/>
<parameter id="lineX2"/>
<parameter id="lineY1"/>
<parameter id="lineY2"/>
<parameter id="maxEdge">
<sem_type>real</sem_type>
</parameter>
<parameter id="minEdge">
<sem_type>real</sem_type>
</parameter>
<parameter id="numSubRects">
<default_type>integer</default_type>
<default_value>10</default_value>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="radian">
<default_type>real</default_type>
<sem_type>real</sem_type>
<type_list>
<item>real</item>
</type_list>
</parameter>
<parameter id="row">
<default_type>integer</default_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="sigma">
<sem_type>real</sem_type>
</parameter>
<parameter id="threshold">
<sem_type>number</sem_type>
</parameter>
<parameter id="transition">
<default_value>'positive'</default_value>
<sem_type>string</sem_type>
</parameter>
<parameter id="whichEdgePair">
<default_value>'first'</default_value>
<sem_type>string</sem_type>
</parameter>
</parameters>
</docu>
</procedure>
<procedure name="AffineTransRect2">
<interface>
<ic>
<par name="row" base_type="ctrl" dimension="0"/>
<par name="col" base_type="ctrl" dimension="0"/>
<par name="radian" base_type="ctrl" dimension="0"/>
<par name="len1" base_type="ctrl" dimension="0"/>
<par name="len2" base_type="ctrl" dimension="0"/>
<par name="map" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="rowOut" base_type="ctrl" dimension="0"/>
<par name="colOut" base_type="ctrl" dimension="0"/>
<par name="radianOut" base_type="ctrl" dimension="0"/>
<par name="len1Out" base_type="ctrl" dimension="0"/>
<par name="len2Out" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>affine_trans_point_2d (map, row, col, rowOut, colOut)</l>
<l>len1Out := len1</l>
<l>len2Out := len2</l>
<c></c>
<l>topCenterCol := col + cos(radian) * len1</l>
<l>topCenterRow := row - sin(radian) * len2</l>
<c></c>
<l>affine_trans_point_2d (map, topCenterRow, topCenterCol, topCenterRowTrans, topCenterColTrans)</l>
<c></c>
<c></c>
<c></c>
<l>vecCol := topCenterColTrans - colOut</l>
<l>vecRow := topCenterRowTrans - rowOut</l>
<l>epslon := 0.0000000001</l>
<l>if(abs(vecRow) &lt; epslon)</l>
<l>    vecRow := epslon</l>
<l>endif</l>
<c></c>
<l>if(vecCol &gt;=0 and vecRow &gt;=0)</l>
<c>    * 右下</c>
<l>    radianOut := -atan(vecRow / vecCol)</l>
<l>elseif (vecCol &gt;= 0 and vecRow &lt; 0)</l>
<c>    * 右上</c>
<l>    radianOut := -atan(vecRow / vecCol)</l>
<l>elseif (vecCol &lt; 0 and vecRow &gt;=0)</l>
<c>    * 左下</c>
<l>     radianOut := rad(-180) - atan(vecRow / vecCol)</l>
<l>else</l>
<c>    * 左上</c>
<l>     radianOut := rad(180) - atan(vecRow / vecCol)</l>
<l>endif</l>
<c></c>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="AffineTransRect2">
<parameters>
<parameter id="col"/>
<parameter id="colOut"/>
<parameter id="len1"/>
<parameter id="len1Out"/>
<parameter id="len2"/>
<parameter id="len2Out"/>
<parameter id="map"/>
<parameter id="radian"/>
<parameter id="radianOut"/>
<parameter id="row"/>
<parameter id="rowOut"/>
</parameters>
</docu>
</procedure>
<procedure name="GenLineRegion">
<interface>
<oo>
<par name="lineRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="lineXStart" base_type="ctrl" dimension="0"/>
<par name="lineYStart" base_type="ctrl" dimension="0"/>
<par name="lineXEnd" base_type="ctrl" dimension="0"/>
<par name="lineYEnd" base_type="ctrl" dimension="0"/>
<par name="imageWidth" base_type="ctrl" dimension="0"/>
<par name="imageHeight" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>xDiff := lineXEnd - lineXStart</l>
<l>yDiff := lineYEnd - lineYStart</l>
<c></c>
<l>epslon := 0.0000000001</l>
<l>if(abs(xDiff) &lt; epslon)</l>
<l>    xDiff := epslon</l>
<l>endif</l>
<c></c>
<l>m := yDiff/xDiff</l>
<l>b := lineYStart - m* lineXStart</l>
<c></c>
<l>xStart := 0</l>
<l>xEnd := imageWidth</l>
<c></c>
<l>yStart := m* xStart +b</l>
<l>if(yStart&gt; imageHeight or yStart &lt; 0)</l>
<l>    yStart := 0</l>
<l>    xStart := (yStart - b)/m</l>
<l>endif</l>
<c></c>
<l>yEnd := m* xEnd +b</l>
<l>if(yEnd&gt; imageHeight or yEnd &lt; 0)</l>
<l>    yEnd := imageHeight</l>
<l>    xEnd := (yEnd - b)/m</l>
<l>endif</l>
<c></c>
<l>gen_region_line (lineRegion, yStart, xStart, yEnd, xEnd)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GenLineRegion">
<parameters>
<parameter id="imageHeight">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="imageWidth">
<default_type>integer</default_type>
<default_value>5120</default_value>
<sem_type>integer</sem_type>
<type_list>
<item>integer</item>
</type_list>
</parameter>
<parameter id="lineRegion"/>
<parameter id="lineXEnd"/>
<parameter id="lineXStart"/>
<parameter id="lineYEnd"/>
<parameter id="lineYStart"/>
</parameters>
</docu>
</procedure>
<procedure name="I94TopFaceMeasurement">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="ModelID" base_type="ctrl" dimension="0"/>
<par name="xCoeff" base_type="ctrl" dimension="0"/>
<par name="yCoeff" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>get_image_size (Image, Width, Height)</l>
<l>mapToImage := 0</l>
<l>mapToWorld := 0</l>
<c></c>
<l>dev_set_draw ('margin')</l>
<c></c>
<l>crossSize := 100</l>
<l>numSubRects := 10</l>
<l>ignorePortion := 0.2</l>
<c></c>
<l>findLineRects := []</l>
<c></c>
<c>* record find line points</c>
<l>crossesXUsed := []</l>
<l>crossesYused := []</l>
<l>crossesXIgnored := []</l>
<l>crossesYIgnored := []</l>
<c></c>
<c>* record line-line intersections</c>
<l>intersectXs := []</l>
<l>intersectYs := []</l>
<c></c>
<c>* set units and positions</c>
<c></c>
<c></c>
<l>FAI2_LEN_P1 := -4.583 / xCoeff</l>
<l>FAI2_LEN_P2 := -9.583 / xCoeff</l>
<l>FAI2_LEN_P3 := -14.583 / xCoeff</l>
<c></c>
<l>FAI3_LEN_P1 := -5.299 / xCoeff</l>
<l>FAI3_LEN_P2 := -9.299 / xCoeff</l>
<l>FAI3_LEN_P3 := -13.299 / xCoeff</l>
<c></c>
<l>FAI4_LEN_P1 := -5.299 / xCoeff</l>
<l>FAI4_LEN_P2 := -9.299 / xCoeff</l>
<l>FAI4_LEN_P3 := -13.299 / xCoeff</l>
<c></c>
<l>FAI5_LEN_P1 := -5.299 / xCoeff</l>
<l>FAI5_LEN_P2 := -9.299 / xCoeff</l>
<l>FAI5_LEN_P3 := -13.299 / xCoeff</l>
<c></c>
<l>FAI6_LEN_P1 := -22.024 / xCoeff</l>
<l>FAI6_LEN_P2 := -24.024 / xCoeff</l>
<l>FAI6_LEN_P3 := -26.024 / xCoeff</l>
<c></c>
<l>FAI9_LEN_P1 := -21.753 / xCoeff</l>
<l>FAI9_LEN_P2 := -23.753 / xCoeff</l>
<l>FAI9_LEN_P3 := -25.753 / xCoeff</l>
<c></c>
<c></c>
<l>FAI12_LEN_P1 := -23.213 / yCoeff</l>
<l>FAI12_LEN_P2 := -34.97 / yCoeff</l>
<c></c>
<l>FAI16_LEN_P1 := -13.071 / yCoeff</l>
<l>FAI16_LEN_P2 := -20.213 / yCoeff</l>
<c></c>
<l>FAI17_LEN_P1 := -1.53 / yCoeff</l>
<l>FAI17_LEN_P2 := -9.827 / yCoeff</l>
<c></c>
<l>FAI19_LEN_P1 := -2.157 / yCoeff</l>
<l>FAI19_LEN_P2 := -13.791 / yCoeff</l>
<c></c>
<l>FAI20_LEN_X := -9.299 / xCoeff</l>
<l>FAI20_LEN_Y := -7.886 / yCoeff</l>
<c></c>
<c>* find model</c>
<l>modelPath := 'E:/Projects/3d/Hdevs/Image_20190918091134087'</l>
<l>Threshold := 128</l>
<l>rowModel := 1171.5</l>
<l>colModel := 3678.5</l>
<l>gen_rectangle1 (ROI_0, 53.9, 1940.83, 3017.1, 4961.63)</l>
<l>reduce_domain (Image, ROI_0, ImageReduced)</l>
<l>threshold_sub_pix (ImageReduced, Border, 128)</l>
<l>find_shape_model (ImageReduced, ModelID, -0.39, 0.79, 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row, Column, Angle, Score)</l>
<l>vector_angle_to_rigid (0, 0, 0, Row, Column, Angle, MovementImageToImage)</l>
<c></c>
<c></c>
<l>baseRightRow := 3614.64000000 - rowModel</l>
<l>baseRightColum := 4804.56000000 - colModel</l>
<l>baseRightRadian := rad(180)</l>
<l>baseRightLen1 := 287.58000000</l>
<l>baseRightLen2 := 1070.83000000</l>
<c></c>
<c></c>
<l>AffineTransRect2 (baseRightRow, baseRightColum, baseRightRadian, baseRightLen1, baseRightLen2, MovementImageToImage, baseRightRow, baseRightColum, baseRightRadian, baseRightLen1, baseRightLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, rectBaseRight, lineRegionRightBase, 'positive', baseRightRow, baseRightColum, baseRightRadian, baseRightLen1, baseRightLen2, numSubRects, 40, 'first', ignorePortion, 'true', 1, Width, Height, lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* find top base line</c>
<l>baseTopRow := 162.42300000 - rowModel</l>
<l>baseTopColumn := 3614.30000000 - colModel</l>
<l>baseTopRadian := rad(-90.00000000)</l>
<l>baseTopLen1 := 279.69400000</l>
<l>baseTopLen2 := 627.82500000</l>
<c></c>
<l>AffineTransRect2 (baseTopRow, baseTopColumn, baseTopRadian, baseTopLen1, baseTopLen2, MovementImageToImage, baseTopRow, baseTopColumn, baseTopRadian, baseTopLen1, baseTopLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, rectBaseTop, lineRegionTopBase, 'positive', baseTopRow, baseTopColumn, baseTopRadian, baseTopLen1, baseTopLen2, numSubRects, 50, 'last', ignorePortion, 'false', 1, Width, Height, lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (rectBaseRight, rectBaseTop, FindLineRects)</l>
<l>concat_obj (lineRegionRightBase, lineRegionTopBase, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c></c>
<c></c>
<c>* make origin</c>
<l>intersection_lines (lineY1RightBase, lineX1RightBase, lineY2RightBase, lineX2RightBase, lineY1TopBase, lineX1TopBase, lineY2TopBase, lineX2TopBase, rowOrigin, colOrigin, IsOverlapping)</l>
<l>intersectXs := [intersectXs, colOrigin]</l>
<l>intersectYs := [intersectYs, rowOrigin]</l>
<c></c>
<c>****************************************************FAI2***********************************</c>
<c>* make vertical grids</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI2_LEN_P1, mapToWorld, mapToImage, 'true', FAI2_P1_LineStartX, FAI2_P1_LineStartY, FAI2_P1_LineEndX, FAI2_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI2_LEN_P2, mapToWorld, mapToImage, 'true', FAI2_P2_LineStartX, FAI2_P2_LineStartY, FAI2_P2_LineEndX, FAI2_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI2_LEN_P3, mapToWorld, mapToImage, 'true', FAI2_P3_LineStartX, FAI2_P3_LineStartY, FAI2_P3_LineEndX, FAI2_P3_LineEndY)</l>
<c></c>
<c>* make H line for FAI2</c>
<l>rectFAI2Row :=2173.39000000 - rowModel</l>
<l>rectFAI2Col :=3668.38000000 - colModel</l>
<l>rectFAI2Radian := rad(89)</l>
<l>rectFAI2Len1 :=70.89500000</l>
<l>rectFAI2Len2 := 655.18000000</l>
<l>AffineTransRect2 (rectFAI2Row, rectFAI2Col, rectFAI2Radian, rectFAI2Len1, rectFAI2Len2, MovementImageToImage, rectFAI2Row, rectFAI2Col, rectFAI2Radian, rectFAI2Len1, rectFAI2Len2)</l>
<l>VisionProStyleFindLineOneStep_Pairs (Image, findLineRegionFAI2, lineRegion, rectFAI2Row, rectFAI2Col, rectFAI2Radian, rectFAI2Len1, rectFAI2Len2, 'positive', 40, 5, 1, 'first', 'false', 0.3, 'last', 1, 10, Width, Height, XsUsed, YsUsed, XsIgnored, YsIgnored, lineStartX_FAI2H, lineStartY_FAI2H, lineEndX_FAI2H, lineEndY_FAI2H)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<l>concat_obj (FindLineRects, findLineRegionFAI2, FindLineRects)</l>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* FAI2-P1</c>
<l>intersection_lines (lineStartY_FAI2H, lineStartX_FAI2H, lineEndY_FAI2H, lineEndX_FAI2H, FAI2_P1_LineStartY, FAI2_P1_LineStartX, FAI2_P1_LineEndY, FAI2_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping1)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>* FAI2-P2</c>
<l>intersection_lines (lineStartY_FAI2H, lineStartX_FAI2H, lineEndY_FAI2H, lineEndX_FAI2H, FAI2_P2_LineStartY, FAI2_P2_LineStartX, FAI2_P2_LineEndY, FAI2_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping1)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>* FAI2-P3</c>
<l>intersection_lines (lineStartY_FAI2H, lineStartX_FAI2H, lineEndY_FAI2H, lineEndX_FAI2H, FAI2_P3_LineStartY, FAI2_P3_LineStartX, FAI2_P3_LineEndY, FAI2_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping1)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_P3)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c></c>
<c>**********************************************FAI3************************************</c>
<l>rectFAI3Row := 2269.30000000 - rowModel</l>
<l>rectFAI3Col := 3612.45000000 - colModel</l>
<l>rectFAI3Radian := rad(90)</l>
<l>rectFAI3Len1 := 175.88000000</l>
<l>rectFAI3Len2 := 623.96700000</l>
<l>AffineTransRect2 (rectFAI3Row, rectFAI3Col, rectFAI3Radian, rectFAI3Len1, rectFAI3Len2, MovementImageToImage, rectFAI3Row, rectFAI3Col, rectFAI3Radian, rectFAI3Len1, rectFAI3Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rectFAI3, lineRegion, 'positive', rectFAI3Row, rectFAI3Col, rectFAI3Radian, rectFAI3Len1, rectFAI3Len2, numSubRects, 40, 'first', ignorePortion, 'false', 1, Width, Height, lineX1FAI3, lineY1FAI3, lineX2FAI3, lineY2FAI3, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rectFAI3, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI3_LEN_P1, mapToWorld, mapToImage, 'true', FAI3_P1_LineStartX, FAI3_P1_LineStartY, FAI3_P1_LineEndX, FAI3_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI3_LEN_P2, mapToWorld, mapToImage, 'true', FAI3_P2_LineStartX, FAI3_P2_LineStartY, FAI3_P2_LineEndX, FAI3_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI3_LEN_P3, mapToWorld, mapToImage, 'true', FAI3_P3_LineStartX, FAI3_P3_LineStartY, FAI3_P3_LineEndX, FAI3_P3_LineEndY)</l>
<c>* P1</c>
<l>intersection_lines (lineY1FAI3, lineX1FAI3, lineY2FAI3, lineX2FAI3, FAI3_P1_LineStartY, FAI3_P1_LineStartX, FAI3_P1_LineEndY, FAI3_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI3_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI3, lineX1FAI3, lineY2FAI3, lineX2FAI3, FAI3_P2_LineStartY, FAI3_P2_LineStartX, FAI3_P2_LineEndY, FAI3_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI3_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>* P3</c>
<l>intersection_lines (lineY1FAI3, lineX1FAI3, lineY2FAI3, lineX2FAI3, FAI3_P3_LineStartY, FAI3_P3_LineStartX, FAI3_P3_LineEndY, FAI3_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI3_P3)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>***********************************************FAI4*******************************</c>
<l>rectFAI4Row := 4712.30000000 - rowModel</l>
<l>rectFAI4Col := 3567.21000000 - colModel</l>
<l>rectFAI4Radian := rad(90)</l>
<l>rectFAI4Len1 := 107.89900000</l>
<l>rectFAI4Len2 := 559.30000000</l>
<l>AffineTransRect2 (rectFAI4Row, rectFAI4Col, rectFAI4Radian, rectFAI4Len1, rectFAI4Len2, MovementImageToImage, rectFAI4Row, rectFAI4Col, rectFAI4Radian, rectFAI4Len1, rectFAI4Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rectFAI4, lineRegion, 'negative', rectFAI4Row, rectFAI4Col, rectFAI4Radian, rectFAI4Len1, rectFAI4Len2, numSubRects, 50, 'first', ignorePortion, 'false', 1, Width, Height, lineX1FAI4, lineY1FAI4, lineX2FAI4, lineY2FAI4, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rectFAI4, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI4, lineX1FAI4, lineY2FAI4, lineX2FAI4, FAI3_P1_LineStartY, FAI3_P1_LineStartX, FAI3_P1_LineEndY, FAI3_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI4_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI4, lineX1FAI4, lineY2FAI4, lineX2FAI4, FAI3_P2_LineStartY, FAI3_P2_LineStartX, FAI3_P2_LineEndY, FAI3_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI4_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P3</c>
<l>intersection_lines (lineY1FAI4, lineX1FAI4, lineY2FAI4, lineX2FAI4, FAI3_P3_LineStartY, FAI3_P3_LineStartX, FAI3_P3_LineEndY, FAI3_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI4_P3)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>*************************************FAI 5***************************************</c>
<l>rectFAI5Row := 4890.45000000 - rowModel</l>
<l>rectFAI5Col := 3599.13000000 - colModel</l>
<l>rectFAI5Radian := rad(89)</l>
<l>rectFAI5Len1 := 156.70400000</l>
<l>rectFAI5Len2 := 970.77200000</l>
<l>AffineTransRect2 (rectFAI5Row, rectFAI5Col, rectFAI5Radian, rectFAI5Len1, rectFAI5Len2, MovementImageToImage, rectFAI5Row, rectFAI5Col, rectFAI5Radian, rectFAI5Len1, rectFAI5Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI5Row, rectFAI5Col, rectFAI5Radian, rectFAI5Len1, rectFAI5Len2, numSubRects, 50, 'first', ignorePortion, 'false', 1, Width, Height, lineX1FAI5, lineY1FAI5, lineX2FAI5, lineY2FAI5, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI5, lineX1FAI5, lineY2FAI5, lineX2FAI5, FAI3_P1_LineStartY, FAI3_P1_LineStartX, FAI3_P1_LineEndY, FAI3_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI5_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI5, lineX1FAI5, lineY2FAI5, lineX2FAI5, FAI3_P2_LineStartY, FAI3_P2_LineStartX, FAI3_P2_LineEndY, FAI3_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI5_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P3</c>
<l>intersection_lines (lineY1FAI5, lineX1FAI5, lineY2FAI5, lineX2FAI5, FAI3_P3_LineStartY, FAI3_P3_LineStartX, FAI3_P3_LineEndY, FAI3_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI5_P3)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c></c>
<c>*************************************FAI 6******************************************</c>
<l>rectFAI6Row := 3017.82000000 - rowModel</l>
<l>rectFAI6Col := 1671.50000000 - colModel</l>
<l>rectFAI6Radian := rad(90)</l>
<l>rectFAI6Len1 := 101.93600000</l>
<l>rectFAI6Len2 := 370.58900000</l>
<l>AffineTransRect2 (rectFAI6Row, rectFAI6Col, rectFAI6Radian, rectFAI6Len1, rectFAI6Len2, MovementImageToImage, rectFAI6Row, rectFAI6Col, rectFAI6Radian, rectFAI6Len1, rectFAI6Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI6Row, rectFAI6Col, rectFAI6Radian, rectFAI6Len1, rectFAI6Len2, numSubRects, 80, 'first', ignorePortion, 'false', 1, Width, Height, lineX1FAI6, lineY1FAI6, lineX2FAI6, lineY2FAI6, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI6_LEN_P1, mapToWorld, mapToImage, 'true', FAI6_P1_LineStartX, FAI6_P1_LineStartY, FAI6_P1_LineEndX, FAI6_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI6_LEN_P2, mapToWorld, mapToImage, 'true', FAI6_P2_LineStartX, FAI6_P2_LineStartY, FAI6_P2_LineEndX, FAI6_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI6_LEN_P3, mapToWorld, mapToImage, 'true', FAI6_P3_LineStartX, FAI6_P3_LineStartY, FAI6_P3_LineEndX, FAI6_P3_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI6, lineX1FAI6, lineY2FAI6, lineX2FAI6, FAI6_P1_LineStartY, FAI6_P1_LineStartX, FAI6_P1_LineEndY, FAI6_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI6_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI6, lineX1FAI6, lineY2FAI6, lineX2FAI6, FAI6_P2_LineStartY, FAI6_P2_LineStartX, FAI6_P2_LineEndY, FAI6_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI6_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P3</c>
<l>intersection_lines (lineY1FAI6, lineX1FAI6, lineY2FAI6, lineX2FAI6, FAI6_P3_LineStartY, FAI6_P3_LineStartX, FAI6_P3_LineEndY, FAI6_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI6_P3)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>*************************************FAI9********************************************</c>
<l>rectFAI9Row := 1584.57000000 - rowModel</l>
<l>rectFAI9Col := 1744.61000000 - colModel</l>
<l>rectFAI9Radian := rad(-90)</l>
<l>rectFAI9Len1 := 97.95910000</l>
<l>rectFAI9Len2 := 275.13700000</l>
<l>AffineTransRect2 (rectFAI9Row, rectFAI9Col, rectFAI9Radian, rectFAI9Len1, rectFAI9Len2, MovementImageToImage, rectFAI9Row, rectFAI9Col, rectFAI9Radian, rectFAI9Len1, rectFAI9Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI9Row, rectFAI9Col, rectFAI9Radian, rectFAI9Len1, rectFAI9Len2, numSubRects, 80, 'first', ignorePortion, 'false', 1, Width, Height, lineX1FAI9, lineY1FAI9, lineX2FAI9, lineY2FAI9, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI9_LEN_P1, mapToWorld, mapToImage, 'true', FAI9_P1_LineStartX, FAI9_P1_LineStartY, FAI9_P1_LineEndX, FAI9_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI9_LEN_P2, mapToWorld, mapToImage, 'true', FAI9_P2_LineStartX, FAI9_P2_LineStartY, FAI9_P2_LineEndX, FAI9_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI9_LEN_P3, mapToWorld, mapToImage, 'true', FAI9_P3_LineStartX, FAI9_P3_LineStartY, FAI9_P3_LineEndX, FAI9_P3_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI9, lineX1FAI9, lineY2FAI9, lineX2FAI9, FAI9_P1_LineStartY, FAI9_P1_LineStartX, FAI9_P1_LineEndY, FAI9_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI9_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI9, lineX1FAI9, lineY2FAI9, lineX2FAI9, FAI9_P2_LineStartY, FAI9_P2_LineStartX, FAI9_P2_LineEndY, FAI9_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI9_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P3</c>
<l>intersection_lines (lineY1FAI9, lineX1FAI9, lineY2FAI9, lineX2FAI9, FAI9_P3_LineStartY, FAI9_P3_LineStartX, FAI9_P3_LineEndY, FAI9_P3_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI9_P3)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c>******************************FAI12**************************</c>
<l>rectFAI12Row := 3817.80000000 - rowModel</l>
<l>rectFAI12Col := 2372.51000000 - colModel</l>
<l>rectFAI12Radian := rad(0)</l>
<l>rectFAI12Len1 := 209.09700000</l>
<l>rectFAI12Len2 := 477.84200000</l>
<l>AffineTransRect2 (rectFAI12Row, rectFAI12Col, rectFAI12Radian, rectFAI12Len1, rectFAI12Len2, MovementImageToImage, rectFAI12Row, rectFAI12Col, rectFAI12Radian, rectFAI12Len1, rectFAI12Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI12Row, rectFAI12Col, rectFAI12Radian, rectFAI12Len1, rectFAI12Len2, numSubRects, 50, 'first', ignorePortion, 'true', 1, Width, Height, lineX1FAI12, lineY1FAI12, lineX2FAI12, lineY2FAI12, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate TOP right</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI12_LEN_P1, mapToWorld, mapToImage, 'true', FAI12_P1_LineStartX, FAI12_P1_LineStartY, FAI12_P1_LineEndX, FAI12_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI12_LEN_P2, mapToWorld, mapToImage, 'true', FAI12_P2_LineStartX, FAI12_P2_LineStartY, FAI12_P2_LineEndX, FAI12_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI12, lineX1FAI12, lineY2FAI12, lineX2FAI12, FAI12_P1_LineStartY, FAI12_P1_LineStartX, FAI12_P1_LineEndY, FAI12_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI12_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI12, lineX1FAI12, lineY2FAI12, lineX2FAI12, FAI12_P2_LineStartY, FAI12_P2_LineStartX, FAI12_P2_LineEndY, FAI12_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI12_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c></c>
<c>*********************************FAI16*************************</c>
<l>rectFAI16Row := 2276.47000000 - rowModel</l>
<l>rectFAI16Col := 992.65500000 - colModel</l>
<l>rectFAI16Radian := rad(-1)</l>
<l>rectFAI16Len1 := 175.95600000</l>
<l>rectFAI16Len2 := 391.84500000</l>
<l>AffineTransRect2 (rectFAI16Row, rectFAI16Col, rectFAI16Radian, rectFAI16Len1, rectFAI16Len2, MovementImageToImage, rectFAI16Row, rectFAI16Col, rectFAI16Radian, rectFAI16Len1, rectFAI16Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI16Row, rectFAI16Col, rectFAI16Radian, rectFAI16Len1, rectFAI16Len2, numSubRects, 80, 'first', ignorePortion, 'true', 1, Width, Height, lineX1FAI16, lineY1FAI16, lineX2FAI16, lineY2FAI16, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate base top</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI16_LEN_P1, mapToWorld, mapToImage, 'true', FAI16_P1_LineStartX, FAI16_P1_LineStartY, FAI16_P1_LineEndX, FAI16_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI16_LEN_P2, mapToWorld, mapToImage, 'true', FAI16_P2_LineStartX, FAI16_P2_LineStartY, FAI16_P2_LineEndX, FAI16_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI16, lineX1FAI16, lineY2FAI16, lineX2FAI16, FAI16_P1_LineStartY, FAI16_P1_LineStartX, FAI16_P1_LineEndY, FAI16_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI16_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI16, lineX1FAI16, lineY2FAI16, lineX2FAI16, FAI16_P2_LineStartY, FAI16_P2_LineStartX, FAI16_P2_LineEndY, FAI16_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI16_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c></c>
<c>**************************FAI17*******************************</c>
<l>rectFAI17Row := 909.27300000 - rowModel</l>
<l>rectFAI17Col := 2644.21000000 - colModel</l>
<l>rectFAI17Radian := rad(-1)</l>
<l>rectFAI17Len1 := 161.07100000</l>
<l>rectFAI17Len2 := 356.53500000</l>
<l>AffineTransRect2 (rectFAI17Row, rectFAI17Col, rectFAI17Radian, rectFAI17Len1, rectFAI17Len2, MovementImageToImage, rectFAI17Row, rectFAI17Col, rectFAI17Radian, rectFAI17Len1, rectFAI17Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI17Row, rectFAI17Col, rectFAI17Radian, rectFAI17Len1, rectFAI17Len2, numSubRects, 80, 'first', ignorePortion, 'true', 1, Width, Height, lineX1FAI17, lineY1FAI17, lineX2FAI17, lineY2FAI17, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate top base</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI17_LEN_P1, mapToWorld, mapToImage, 'true', FAI17_P1_LineStartX, FAI17_P1_LineStartY, FAI17_P1_LineEndX, FAI17_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI17_LEN_P2, mapToWorld, mapToImage, 'true', FAI17_P2_LineStartX, FAI17_P2_LineStartY, FAI17_P2_LineEndX, FAI17_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI17, lineX1FAI17, lineY2FAI17, lineX2FAI17, FAI17_P1_LineStartY, FAI17_P1_LineStartX, FAI17_P1_LineEndY, FAI17_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI17_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI17, lineX1FAI17, lineY2FAI17, lineX2FAI17, FAI17_P2_LineStartY, FAI17_P2_LineStartX, FAI17_P2_LineEndY, FAI17_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI17_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c></c>
<c>********************************FAI19**************************</c>
<l>rectFAI19Row := 1178.78000000 - rowModel</l>
<l>rectFAI19Col := 4665.06000000 - colModel</l>
<l>rectFAI19Radian := rad(179.12200000)</l>
<l>rectFAI19Len1 := 172.44100000</l>
<l>rectFAI19Len2 := 573.70700000</l>
<l>AffineTransRect2 (rectFAI19Row, rectFAI19Col, rectFAI19Radian, rectFAI19Len1, rectFAI19Len2, MovementImageToImage, rectFAI19Row, rectFAI19Col, rectFAI19Radian, rectFAI19Len1, rectFAI19Len2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'positive', rectFAI19Row, rectFAI19Col, rectFAI19Radian, rectFAI19Len1, rectFAI19Len2, numSubRects, 50, 'first', 0.3, 'true', 1, Width, Height, lineX1FAI19, lineY1FAI19, lineX2FAI19, lineY2FAI19, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* translate top base</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI19_LEN_P1, mapToWorld, mapToImage, 'true', FAI19_P1_LineStartX, FAI19_P1_LineStartY, FAI19_P1_LineEndX, FAI19_P1_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI19_LEN_P2, mapToWorld, mapToImage, 'true', FAI19_P2_LineStartX, FAI19_P2_LineStartY, FAI19_P2_LineEndX, FAI19_P2_LineEndY)</l>
<c></c>
<c>* P1</c>
<l>intersection_lines (lineY1FAI19, lineX1FAI19, lineY2FAI19, lineX2FAI19, FAI19_P1_LineStartY, FAI19_P1_LineStartX, FAI19_P1_LineEndY, FAI19_P1_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI19_P1)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c>* P2</c>
<l>intersection_lines (lineY1FAI19, lineX1FAI19, lineY2FAI19, lineX2FAI19, FAI19_P2_LineStartY, FAI19_P2_LineStartX, FAI19_P2_LineEndY, FAI19_P2_LineEndX, rowIntersect, colIntersect, IsOverlapping2)</l>
<l>DistancePLInWorld (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, colIntersect, rowIntersect, mapToWorld, distanceWorld_FAI19_P2)</l>
<l>intersectXs := [intersectXs, colIntersect]</l>
<l>intersectYs := [intersectYs, rowIntersect]</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c>*****************************FAI20********************************</c>
<c>* 定圆心</c>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1TopBase, lineY1TopBase, lineX2TopBase, lineY2TopBase, FAI20_LEN_Y, mapToWorld, mapToImage, 'true', FAI20_P2_LineStartX, FAI20_P2_LineStartY, FAI20_P2_LineEndX, FAI20_P2_LineEndY)</l>
<l>TranslateLineInWorldCoordinateAndConvertBack (lineX1RightBase, lineY1RightBase, lineX2RightBase, lineY2RightBase, FAI20_LEN_X, mapToWorld, mapToImage, 'true', FAI20V_P1_LineStartX, FAI20V_P1_LineStartY, FAI20V_P1_LineEndX, FAI20V_P1_LineEndY)</l>
<l>intersection_lines (FAI20_P2_LineStartY, FAI20_P2_LineStartX, FAI20_P2_LineEndY, FAI20_P2_LineEndX, FAI20V_P1_LineStartY, FAI20V_P1_LineStartX, FAI20V_P1_LineEndY, FAI20V_P1_LineEndX, rowCenterTop, colCenterTop, IsOverlapping2)</l>
<l>intersectXs := [intersectXs, colCenterTop]</l>
<l>intersectYs := [intersectYs, rowCenterTop]</l>
<c></c>
<l>rectFAI20TRRow := 268.18300000 -rowModel</l>
<l>rectFAI20TRCol := 4567.96000000 - colModel</l>
<l>rectFAI20TRRadian := rad(-122.84800000)</l>
<l>rectFAI20TRLen1 := 84.64630000</l>
<l>rectFAI20TRLen2 := 45.46210000</l>
<l>AffineTransRect2 (rectFAI20TRRow, rectFAI20TRCol, rectFAI20TRRadian, rectFAI20TRLen1, rectFAI20TRLen2, MovementImageToImage, rectFAI20TRRow, rectFAI20TRCol, rectFAI20TRRadian, rectFAI20TRLen1, rectFAI20TRLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'negative', rectFAI20TRRow, rectFAI20TRCol, rectFAI20TRRadian, rectFAI20TRLen1, rectFAI20TRLen2, 4, 30, 'first', 0, 'false', 1, Width, Height, lineX1FAI20TR, lineY1FAI20TR, lineX2FAI20TR, lineY2FAI20TR, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<l>rectFAI20LFRow := 2098.83000000 - rowModel</l>
<l>rectFAI20LFCol := 2763.07000000 - colModel</l>
<l>rectFAI20LFRadian := rad(58.47500000)</l>
<l>rectFAI20LFLen1 := 80.07090000</l>
<l>rectFAI20LFLen2 := 40.95030000</l>
<l>AffineTransRect2 (rectFAI20LFRow, rectFAI20LFCol, rectFAI20LFRadian, rectFAI20LFLen1, rectFAI20LFLen2, MovementImageToImage, rectFAI20LFRow, rectFAI20LFCol, rectFAI20LFRadian, rectFAI20LFLen1, rectFAI20LFLen2)</l>
<l>VisionProStyleFindLineOneStep (Image, rect, lineRegion, 'negative', rectFAI20LFRow, rectFAI20LFCol, rectFAI20LFRadian, rectFAI20LFLen1, rectFAI20LFLen2, 4, 30, 'first', 0, 'false', 1, Width, Height, lineX1FAI20LF, lineY1FAI20LF, lineX2FAI20LF, lineY2FAI20LF, XsUsed, YsUsed, XsIgnored, YsIgnored)</l>
<l>concat_obj (FindLineRects, rect, FindLineRects)</l>
<l>concat_obj (lineRegions, lineRegion, lineRegions)</l>
<c></c>
<l>crossesXUsed := [crossesXUsed, XsUsed]</l>
<l>crossesYused := [crossesYused, YsUsed]</l>
<l>crossesXIgnored := [crossesXIgnored, XsIgnored]</l>
<l>crossesYIgnored := [crossesYIgnored, YsIgnored]</l>
<c></c>
<c>* FAI20-1</c>
<l>DistancePLInWorld (lineX1FAI20TR, lineY1FAI20TR, lineX2FAI20TR, lineY2FAI20TR, lineX1FAI20LF, lineY1FAI20LF, mapToWorld, distanceWorld_FAI20_1)</l>
<c>* FAI20-2</c>
<l>DistancePLInWorld (lineX1FAI20TR, lineY1FAI20TR, lineX2FAI20TR, lineY2FAI20TR, colCenterTop, rowCenterTop, mapToWorld, distanceWorld_FAI20_2_1)</l>
<l>DistancePLInWorld (lineX1FAI20LF, lineY1FAI20LF, lineX2FAI20LF, lineY2FAI20LF, colCenterTop, rowCenterTop, mapToWorld, distanceWorld_FAI20_2_2)</l>
<l>distanceWorld_FAI20_2 := distanceWorld_FAI20_2_1 - distanceWorld_FAI20_2_2</l>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="I94TopFaceMeasurement">
<parameters>
<parameter id="Image"/>
<parameter id="ModelID"/>
<parameter id="xCoeff"/>
<parameter id="yCoeff"/>
</parameters>
</docu>
</procedure>
</hdevelop>
